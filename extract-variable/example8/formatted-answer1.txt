package org.hibernate.search.backend.lucene.search.predicate.impl;

import java.lang.invoke.MethodHandles;
import java.lang.reflect.Array;

import org.hibernate.search.backend.lucene.logging.impl.Log;
import org.hibernate.search.backend.lucene.search.common.impl.AbstractLuceneValueFieldSearchQueryElementFactory;
import org.hibernate.search.backend.lucene.search.common.impl.LuceneSearchIndexScope;
import org.hibernate.search.backend.lucene.search.common.impl.LuceneSearchIndexValueFieldContext;
import org.hibernate.search.backend.lucene.types.codec.impl.LuceneFieldCodec;
import org.hibernate.search.backend.lucene.types.codec.impl.LuceneVectorFieldCodec;
import org.hibernate.search.engine.search.predicate.SearchPredicate;
import org.hibernate.search.engine.search.predicate.spi.KnnPredicateBuilder;
import org.hibernate.search.util.common.AssertionFailure;
import org.hibernate.search.util.common.logging.impl.LoggerFactory;

import org.apache.lucene.search.KnnByteVectorQuery;
import org.apache.lucene.search.KnnFloatVectorQuery;
import org.apache.lucene.search.Query;

public class LuceneKnnPredicate extends AbstractLuceneSingleFieldPredicate implements LuceneSearchPredicate {

    private static final Log log = LoggerFactory.make(Log.class, MethodHandles.lookup());

    private final int k;
    private final Object vector;
    private final LuceneSearchPredicate filter;

    private LuceneKnnPredicate(Builder<?> builder) {
        super(builder);
        this.k = builder.k;
        this.vector = builder.vector;
        this.filter = builder.filter;
    }

    @Override
    protected Query doToQuery(PredicateRequestContext context) {
        Query filterQuery = filter == null ? null : filter.toQuery(context);
        if (vector instanceof byte[]) {
            return new KnnByteVectorQuery(absoluteFieldPath, (byte[]) vector, k, filterQuery);
        }
        if (vector instanceof float[]) {
            return new KnnFloatVectorQuery(absoluteFieldPath, (float[]) vector, k, filterQuery);
        }
        throw new UnsupportedOperationException("Unknown vector type " + vector.getClass() + ". only byte[] and float[] vectors are supported.");
    }

    public static class DefaultFactory<F> extends AbstractLuceneValueFieldSearchQueryElementFactory<KnnPredicateBuilder, F> {
        @Override
        public KnnPredicateBuilder create(LuceneSearchIndexScope<?> scope, LuceneSearchIndexValueFieldContext<F> field) {
            return new Builder<>(scope, field);
        }
    }

    private static class Builder<F> extends AbstractBuilder implements KnnPredicateBuilder {
        private final Class<?> vectorElementsType;
        private final int indexedVectorsDimension;
        private int k;
        private Object vector;
        private LuceneSearchPredicate filter;

        private Builder(LuceneSearchIndexScope<?> scope, LuceneSearchIndexValueFieldContext<F> field) {
            super(scope, field);
            LuceneFieldCodec<F> codec = field.type().codec();
            if (codec instanceof LuceneVectorFieldCodec) {
                vectorElementsType = ((LuceneVectorFieldCodec<F>) codec).vectorElementsType();
                indexedVectorsDimension = ((LuceneVectorFieldCodec<F>) codec).getConfiguredDimensions();
            } else {
                throw new AssertionFailure("Attempting to use a knn predicate on a non-vector field.");
            }
        }

        @Override
        public void k(int k) {
            this.k = k;
        }

        @Override
        public void vector(Object vector) {
            if (!vector.getClass().isArray()) {
                throw new IllegalArgumentException("Vector can only be either a float or a byte array (float[], byte[]).");
            }
            Class<?> componentType = vector.getClass().getComponentType();
            if (!vectorElementsType.equals(componentType)) {
                throw log.vectorKnnMatchVectorTypeDiffersFromField(absoluteFieldPath, vectorElementsType, componentType);
            }
            int vectorLength = Array.getLength(vector);
            if (vectorLength != indexedVectorsDimension) {
                throw log.vectorKnnMatchVectorDimensionDiffersFromField(absoluteFieldPath, indexedVectorsDimension, vectorLength);
            }
            this.vector = vector;
        }

        @Override
        public void filter(SearchPredicate filter) {
            this.filter = LuceneSearchPredicate.from(scope, filter);
        }

        @Override
        public SearchPredicate build() {
            return new LuceneKnnPredicate(this);
        }
    }
}