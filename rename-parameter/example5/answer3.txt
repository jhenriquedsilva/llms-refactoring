01-05-2025, 10:58

**Analysis of Identifiers for Renaming**

We'll focus on low-quality, unclear, or misleading parameter names, especially those violating naming conventions or lacking descriptive value.

### Candidates for Rename Parameter Refactoring

#### 1. `biRel`
- **Context**: Used in `visitBiRel(BiRel biRel)` and its usage in shuttle classes.
- **Improvement**: `biRel` is a portmanteau for "binary relational operator", but calling it `biRelNode` or simply `binaryRel` clarifies its type and intent.

#### 2. `hBiRel`
- **Context**: In `visitBiRel(BiRel biRel)`, the variable `Hintable hBiRel = (Hintable) biRel;`.
- **Improvement**: Use `hintableBinaryRel` for clarity.

#### 3. `joinHintNeedRemove`
- **Context**: In constructor `ClearOuterQueryHintShuttle(RelHint joinHintNeedRemove)`.
- **Improvement**: The name `joinHintNeedRemove` is misleading as the refactoring is not about join hints but about any query hint to be removed. Use `queryHintToRemove`.

#### 4. `queryHintNeedRemove`
- **Context**: Private field for the hint to be removed.
- **Improvement**: Rename to `queryHintToRemove`.

#### 5. `currentInheritPath`
- **Context**: Represents the current path in inherited query hints.
- **Improvement**: `currentInheritPath` is fine.

#### 6. Parameters like `invalidInheritPath`, `checkedInheritPath` in `isMatchInvalidInheritPath`.
- **Context**: These are lists of integers representing the inheritance path; naming is OK but could clarify meaning.
- **Improvement**: Rename to `expectedInheritPath` and `actualInheritPath` for clarity.

#### 7. Variable `hints` used in various places.
- **Context**: List of hints.
- **Improvement**: The context is mostly self-evident and fine.

---

## Refactored Code

```java
package org.apache.flink.table.planner.hint;

import org.apache.calcite.rel.BiRel;
import org.apache.calcite.rel.RelNode;
import org.apache.calcite.rel.RelShuttleImpl;
import org.apache.calcite.rel.hint.Hintable;
import org.apache.calcite.rel.hint.RelHint;
import org.apache.calcite.rel.logical.LogicalCorrelate;
import org.apache.calcite.rel.logical.LogicalJoin;
import org.apache.calcite.sql.SqlNode;
import org.apache.calcite.sql2rel.SqlToRelConverter;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Due to Calcite will expand the whole SQL RelNode tree that contains query block, query hints
 * (including join hints and state ttl hints) will be propagated from root to leaves in the whole
 * RelNode tree. This shuttle is used to clear the query hints that are propagated into the query
 * block incorrectly.
 *
 * <p>See more at {@link
 * org.apache.calcite.sql2rel.SqlToRelConverter#convertFrom(SqlToRelConverter.Blackboard, SqlNode,
 * List)}.
 */
public class ClearQueryHintsWithInvalidPropagationShuttle extends QueryHintsRelShuttle {

    @Override
    protected RelNode visitBiRel(BiRel binaryRelNode) {
        List<RelHint> hints = ((Hintable) binaryRelNode).getHints();

        Set<String> allHintNames =
                hints.stream().map(hint -> hint.hintName).collect(Collectors.toSet());

        // there are no query hints on this Join/Correlate node
        if (allHintNames.stream().noneMatch(FlinkHints::isQueryHint)) {
            return super.visit(binaryRelNode);
        }

        Optional<RelHint> firstAliasHint =
                hints.stream()
                        .filter(hint -> FlinkHints.HINT_ALIAS.equals(hint.hintName))
                        .findFirst();

        // there are no alias hints on this Join/Correlate node
        if (!firstAliasHint.isPresent()) {
            return super.visit(binaryRelNode);
        }

        List<RelHint> queryHintsFromOuterQueryBlock =
                hints.stream()
                        .filter(
                                hint ->
                                        FlinkHints.isQueryHint(hint.hintName)
                                                // if the size of inheritPath is bigger than 0, it
                                                // means that this query hint is propagated from its
                                                // parent
                                                && hint.inheritPath.size()
                                                > firstAliasHint.get().inheritPath.size())
                        .collect(Collectors.toList());

        if (queryHintsFromOuterQueryBlock.isEmpty()) {
            return super.visit(binaryRelNode);
        }

        RelNode newRelNode = binaryRelNode;
        ClearOuterQueryHintShuttle clearOuterQueryHintShuttle;

        for (RelHint outerQueryHint : queryHintsFromOuterQueryBlock) {
            clearOuterQueryHintShuttle = new ClearOuterQueryHintShuttle(outerQueryHint);
            newRelNode = newRelNode.accept(clearOuterQueryHintShuttle);
        }

        return super.visit(newRelNode);
    }

    /**
     * A shuttle to clean the query hints which are in outer query block and should not affect the
     * query-block inside.
     *
     * <p>Only the nodes that query hints could attach may be cleared. See more at {@link
     * FlinkHintStrategies}.
     */
    private static class ClearOuterQueryHintShuttle extends RelShuttleImpl {
        // the current inheritPath about the query hint that need be removed
        private final Deque<Integer> currentInheritPath;

        // the query hint that needs to be removed
        private final RelHint queryHintToRemove;

        public ClearOuterQueryHintShuttle(RelHint queryHintToRemove) {
            this.queryHintToRemove = queryHintToRemove;
            this.currentInheritPath = new ArrayDeque<>();
            this.currentInheritPath.addAll(queryHintToRemove.inheritPath);
        }

        @Override
        protected RelNode visitChild(RelNode parent, int index, RelNode child) {
            currentInheritPath.addLast(index);
            RelNode newNode = super.visitChild(parent, index, child);
            currentInheritPath.removeLast();
            return newNode;
        }

        @Override
        public RelNode visit(LogicalCorrelate correlate) {
            return visitBiRel(correlate);
        }

        @Override
        public RelNode visit(LogicalJoin join) {
            return visitBiRel(join);
        }

        private RelNode visitBiRel(BiRel binaryRelNode) {
            Hintable hintableBinaryRel = (Hintable) binaryRelNode;
            List<RelHint> hints = new ArrayList<>(hintableBinaryRel.getHints());
            Optional<RelHint> invalidQueryHint = getInvalidQueryHint(hints);

            // if this node contains the query hint that needs to be removed
            if (invalidQueryHint.isPresent()) {
                hints.remove(invalidQueryHint.get());
                return super.visit(hintableBinaryRel.withHints(hints));
            }

            return super.visit(binaryRelNode);
        }

        /**
         * Get the invalid query hint in this node.
         *
         * <p>The invalid node meets the following requirement:
         *
         * <p>1. This hint name is same with the query hint that needs to be removed
         *
         * <p>2.The length of this hint should be same with the length of propagating this removed
         * query hint.
         *
         * <p>3. The inherited path of this hint should match the inherited path of this removed
         * query hint.
         *
         * @param hints all hints
         * @return return the invalid query hint if exists, else return empty
         */
        private Optional<RelHint> getInvalidQueryHint(List<RelHint> hints) {
            for (RelHint hint : hints) {
                if (hint.hintName.equals(queryHintToRemove.hintName)
                        && isMatchInvalidInheritPath(
                        new ArrayList<>(currentInheritPath), hint.inheritPath)) {
                    return Optional.of(hint);
                }
            }
            return Optional.empty();
        }

        private boolean isMatchInvalidInheritPath(
                List<Integer> expectedInheritPath, List<Integer> actualInheritPath) {
            if (expectedInheritPath.size() != actualInheritPath.size()) {
                return false;
            }

            for (int i = 0; i < expectedInheritPath.size(); i++) {
                if (!Objects.equals(expectedInheritPath.get(i), actualInheritPath.get(i))) {
                    return false;
                }
            }
            return true;
        }
    }
}
```

---

**Summary of changes**:
- `biRel` => `binaryRelNode`
- `hBiRel` => `hintableBinaryRel`
- `joinHintNeedRemove`/`queryHintNeedRemove` => `queryHintToRemove`
- `invalidInheritPath`/`checkedInheritPath` => `expectedInheritPath`/`actualInheritPath`
- method parameter index variable standardized to `index` in `visitChild`

These refactorings increase code clarity while maintaining the original logic.

Compiles