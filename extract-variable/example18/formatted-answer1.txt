package org.apache.solr.handler.configsets;

import static org.apache.solr.client.solrj.SolrRequest.METHOD.PUT;
import static org.apache.solr.security.PermissionNameProvider.Name.CONFIG_EDIT_PERM;

import java.io.InputStream;

import org.apache.solr.api.EndPoint;
import org.apache.solr.common.SolrException;
import org.apache.solr.common.cloud.ZkMaintenanceUtils;
import org.apache.solr.common.params.ConfigSetParams;
import org.apache.solr.core.CoreContainer;
import org.apache.solr.request.SolrQueryRequest;
import org.apache.solr.response.SolrQueryResponse;
import org.apache.solr.util.FileTypeMagicUtil;

public class UploadConfigSetFileAPI extends ConfigSetAPIBase {

    public static final String CONFIGSET_NAME_PLACEHOLDER = UploadConfigSetAPI.CONFIGSET_NAME_PLACEHOLDER;
    public static final String FILEPATH_PLACEHOLDER = "*";
    private static final String API_PATH = "/cluster/configs/{" + CONFIGSET_NAME_PLACEHOLDER + "}/" + FILEPATH_PLACEHOLDER;

    public UploadConfigSetFileAPI(CoreContainer coreContainer) {
        super(coreContainer);
    }

    @EndPoint(method = PUT, path = API_PATH, permission = CONFIG_EDIT_PERM)
    public void updateConfigSetFile(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {
        ensureConfigSetUploadEnabled();
        final String configSetName = req.getPathTemplateValues().get("name");
        boolean overwritesExisting = configSetService.checkConfigExists(configSetName);
        boolean requestIsTrusted = isTrusted(req.getUserPrincipal(), coreContainer.getAuthenticationPlugin());
        String singleFilePath = req.getPathTemplateValues().getOrDefault(FILEPATH_PLACEHOLDER, "");
        boolean allowOverwrite = req.getParams().getBool(ConfigSetParams.OVERWRITE, true);
        boolean cleanup = req.getParams().getBool(ConfigSetParams.CLEANUP, false);
        final InputStream inputStream = ensureNonEmptyInputStream(req);
        String fixedSingleFilePath = singleFilePath;
        if (fixedSingleFilePath.charAt(0) == '/') {
            fixedSingleFilePath = fixedSingleFilePath.substring(1);
        }
        final byte[] fileBytes = inputStream.readAllBytes();
        if (fixedSingleFilePath.isEmpty()) {
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "The file path provided for upload, '" + singleFilePath + "', is not valid.");
        } else if (ZkMaintenanceUtils.isFileForbiddenInConfigSets(fixedSingleFilePath) || FileTypeMagicUtil.isFileForbiddenInConfigset(fileBytes)) {
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "The file type provided for upload, '" + singleFilePath + "', is forbidden for use in configSets.");
        } else if (cleanup) {
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "ConfigSet uploads do not allow cleanup=true when file path is used.");
        } else {
            createBaseNode(configSetService, overwritesExisting, requestIsTrusted, configSetName);
            configSetService.uploadFileToConfig(configSetName, fixedSingleFilePath, fileBytes, allowOverwrite);
        }
    }
}