29-04-2025, 20:15

Certainly! After reviewing the code, I found several method names that could be improved for clarity and intent, according to best practices. Here are the top refactoring opportunities:

### 1. `get(String name)`
- **Issue**: "get" is too generic; it's better to indicate this fetches an *attribute method* by name.
- **Suggestion**: Rename to `getAttributeMethod(String name)`.

### 2. `get(int index)`
- **Issue**: Likewise, be explicit that you're accessing an attribute method by its index.
- **Suggestion**: Rename to `getAttributeMethod(int index)`.

### 3. `indexOf(Method attribute)`
- **Issue**: Suggests it's getting an *index* of a raw attribute, which is actually a `Method`.
- **Suggestion**: Rename to `indexOfAttributeMethod(Method attributeMethod)`.

### 4. `indexOf(String name)`
- **Issue**: Suggests ambiguous look-up. Clarity improves if we specify it's for attribute method.
- **Suggestion**: Rename to `indexOfAttributeMethod(String name)`.

### 5. `canThrowTypeNotPresentException(int index)`
- **Issue**: Could mislead about whether it’s the method itself or invocation. Improve by moving “attribute method” up.
- **Suggestion**: Rename to `attributeMethodCanThrowTypeNotPresentException(int index)`.

### Other methods (`isValid`, `validate`, `size`, `hasDefaultValueMethod`, `hasNestedAnnotation`, `describe`, etc.) are clear and idiomatic.

---

Here is the **refactored** class reflecting these changes:

```java
package org.springframework.core.annotation;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Map;

import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.ConcurrentReferenceHashMap;
import org.springframework.util.ReflectionUtils;

/**
 * Provides a quick way to access the attribute methods of an {@link Annotation}
 * with consistent ordering as well as a few useful utility methods.
 *
 * @author Phillip Webb
 * @author Sam Brannen
 * @since 5.2
 */
final class AttributeMethods {

    static final AttributeMethods NONE = new AttributeMethods(null, new Method[0]);

    static final Map<Class<? extends Annotation>, AttributeMethods> cache = new ConcurrentReferenceHashMap<>();

    private static final Comparator<Method> methodComparator = (m1, m2) -> {
        if (m1 != null && m2 != null) {
            return m1.getName().compareTo(m2.getName());
        }
        return (m1 != null ? -1 : 1);
    };

    @Nullable
    private final Class<? extends Annotation> annotationType;

    private final Method[] attributeMethods;

    private final boolean[] canThrowTypeNotPresentException;

    private final boolean hasDefaultValueMethod;

    private final boolean hasNestedAnnotation;

    private AttributeMethods(@Nullable Class<? extends Annotation> annotationType, Method[] attributeMethods) {
        this.annotationType = annotationType;
        this.attributeMethods = attributeMethods;
        this.canThrowTypeNotPresentException = new boolean[attributeMethods.length];
        boolean foundDefaultValueMethod = false;
        boolean foundNestedAnnotation = false;
        for (int i = 0; i < attributeMethods.length; i++) {
            Method method = this.attributeMethods[i];
            Class<?> type = method.getReturnType();
            if (!foundDefaultValueMethod && (method.getDefaultValue() != null)) {
                foundDefaultValueMethod = true;
            }
            if (!foundNestedAnnotation && (type.isAnnotation() || (type.isArray() && type.componentType().isAnnotation()))) {
                foundNestedAnnotation = true;
            }
            ReflectionUtils.makeAccessible(method);
            this.canThrowTypeNotPresentException[i] = (type == Class.class || type == Class[].class || type.isEnum());
        }
        this.hasDefaultValueMethod = foundDefaultValueMethod;
        this.hasNestedAnnotation = foundNestedAnnotation;
    }

    /**
     * Determine if values from the given annotation can be safely accessed without
     * causing any {@link TypeNotPresentException TypeNotPresentExceptions}.
     * <p>This method is designed to cover Google App Engine's late arrival of such
     * exceptions for {@code Class} values (instead of the more typical early
     * {@code Class.getAnnotations() failure} on a regular JVM).
     * @param annotation the annotation to check
     * @return {@code true} if all values are present
     * @see #validate(Annotation)
     */
    boolean isValid(Annotation annotation) {
        assertAnnotation(annotation);
        for (int i = 0; i < size(); i++) {
            if (attributeMethodCanThrowTypeNotPresentException(i)) {
                try {
                    AnnotationUtils.invokeAnnotationMethod(getAttributeMethod(i), annotation);
                }
                catch (IllegalStateException ex) {
                    // Plain invocation failure to expose -> leave up to attribute retrieval
                    // (if any) where such invocation failure will be logged eventually.
                }
                catch (Throwable ex) {
                    // TypeNotPresentException etc. -> annotation type not actually loadable.
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Check if values from the given annotation can be safely accessed without causing
     * any {@link TypeNotPresentException TypeNotPresentExceptions}.
     * <p>This method is designed to cover Google App Engine's late arrival of such
     * exceptions for {@code Class} values (instead of the more typical early
     * {@code Class.getAnnotations() failure} on a regular JVM).
     * @param annotation the annotation to validate
     * @throws IllegalStateException if a declared {@code Class} attribute could not be read
     * @see #isValid(Annotation)
     */
    void validate(Annotation annotation) {
        assertAnnotation(annotation);
        for (int i = 0; i < size(); i++) {
            if (attributeMethodCanThrowTypeNotPresentException(i)) {
                try {
                    AnnotationUtils.invokeAnnotationMethod(getAttributeMethod(i), annotation);
                }
                catch (IllegalStateException ex) {
                    throw ex;
                }
                catch (Throwable ex) {
                    throw new IllegalStateException("Could not obtain annotation attribute value for " +
                            getAttributeMethod(i).getName() + " declared on " + annotation.annotationType(), ex);
                }
            }
        }
    }

    private void assertAnnotation(Annotation annotation) {
        Assert.notNull(annotation, "Annotation must not be null");
        if (this.annotationType != null) {
            Assert.isInstanceOf(this.annotationType, annotation);
        }
    }

    /**
     * Get the attribute method with the specified name or {@code null} if no
     * matching attribute exists.
     * @param name the attribute name to find
     * @return the attribute method or {@code null}
     */
    @Nullable
    Method getAttributeMethod(String name) {
        int index = indexOfAttributeMethod(name);
        return (index != -1 ? this.attributeMethods[index] : null);
    }

    /**
     * Get the attribute method at the specified index.
     * @param index the index of the attribute method to return
     * @return the attribute method
     * @throws IndexOutOfBoundsException if the index is out of range
     * ({@code index < 0 || index >= size()})
     */
    Method getAttributeMethod(int index) {
        return this.attributeMethods[index];
    }

    /**
     * Determine if the attribute method at the specified index could throw a
     * {@link TypeNotPresentException} when accessed.
     * @param index the index of the attribute method to check
     * @return {@code true} if the attribute can throw a
     * {@link TypeNotPresentException}
     */
    boolean attributeMethodCanThrowTypeNotPresentException(int index) {
        return this.canThrowTypeNotPresentException[index];
    }

    /**
     * Get the index of the attribute method with the specified name, or {@code -1}
     * if there is no attribute with the name.
     * @param name the name to find
     * @return the index of the attribute method, or {@code -1}
     */
    int indexOfAttributeMethod(String name) {
        for (int i = 0; i < this.attributeMethods.length; i++) {
            if (this.attributeMethods[i].getName().equals(name)) {
                return i;
            }
        }
        return -1;
    }

    /**
     * Get the index of the specified attribute method, or {@code -1} if the
     * attribute is not in this collection.
     * @param attributeMethod the attribute method to find
     * @return the index of the attribute method, or {@code -1}
     */
    int indexOfAttributeMethod(Method attributeMethod) {
        for (int i = 0; i < this.attributeMethods.length; i++) {
            if (this.attributeMethods[i].equals(attributeMethod)) {
                return i;
            }
        }
        return -1;
    }

    /**
     * Get the number of attribute methods in this collection.
     * @return the number of attribute methods
     */
    int size() {
        return this.attributeMethods.length;
    }

    /**
     * Determine if at least one of the attribute methods has a default value.
     * @return {@code true} if there is at least one attribute method with a default value
     */
    boolean hasDefaultValueMethod() {
        return this.hasDefaultValueMethod;
    }

    /**
     * Determine if at least one of the attribute methods is a nested annotation.
     * @return {@code true} if there is at least one attribute method with a nested
     * annotation type
     */
    boolean hasNestedAnnotation() {
        return this.hasNestedAnnotation;
    }

    /**
     * Get the attribute methods for the given annotation type.
     * @param annotationType the annotation type
     * @return the attribute methods for the annotation type
     */
    static AttributeMethods forAnnotationType(@Nullable Class<? extends Annotation> annotationType) {
        if (annotationType == null) {
            return NONE;
        }
        return cache.computeIfAbsent(annotationType, AttributeMethods::compute);
    }

    private static AttributeMethods compute(Class<? extends Annotation> annotationType) {
        Method[] methods = annotationType.getDeclaredMethods();
        int size = methods.length;
        for (int i = 0; i < methods.length; i++) {
            if (!isAttributeMethod(methods[i])) {
                methods[i] = null;
                size--;
            }
        }
        if (size == 0) {
            return NONE;
        }
        Arrays.sort(methods, methodComparator);
        Method[] attributeMethods = Arrays.copyOf(methods, size);
        return new AttributeMethods(annotationType, attributeMethods);
    }

    private static boolean isAttributeMethod(Method method) {
        return (method.getParameterCount() == 0 && method.getReturnType() != void.class);
    }

    /**
     * Create a description for the given attribute method suitable to use in
     * exception messages and logs.
     * @param attribute the attribute to describe
     * @return a description of the attribute
     */
    static String describe(@Nullable Method attribute) {
        if (attribute == null) {
            return "(none)";
        }
        return describe(attribute.getDeclaringClass(), attribute.getName());
    }

    /**
     * Create a description for the given attribute method suitable to use in
     * exception messages and logs.
     * @param annotationType the annotation type
     * @param attributeName the attribute name
     * @return a description of the attribute
     */
    static String describe(@Nullable Class<?> annotationType, @Nullable String attributeName) {
        if (attributeName == null) {
            return "(none)";
        }
        String in = (annotationType != null ? " in annotation [" + annotationType.getName() + "]" : "");
        return "attribute '" + attributeName + "'" + in;
    }
}
```

---

**Summary of what changed:**
- All method names are now clear about operating on *attribute methods*.
- Changed all internal and API uses to the new names for consistency and clarity.
- Javadoc updated to reflect these changes where relevant.

**These rename refactorings improve both the readability and maintainability of the code** by making the intent of each method clear. If you need the minimal diff or a summary list of name changes, let me know!
