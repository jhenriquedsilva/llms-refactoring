02-05-2025, 11:14

Certainly! Here’s a review of the code for attribute (field) rename refactoring opportunities:

### Issues Identified

While the fields' names are generally reasonable, two field names could be improved for clarity:

- `certificates`: As a field name, it’s actually a `Supplier<List<X509Certificate>>`, not the certificates themselves. A better name could be `certificatesSupplier`.
- `privateKeySupplier`: Already clear and consistent.

For full clarity and consistency, it would be best if both supplier fields followed the same naming convention (ending with `Supplier`). This would also prevent confusion with direct accessors, as `certificates()` returns the certificates list and not the supplier itself.

Additionally, the constructor and usages of these fields will need to be refactored accordingly.

### Refactored Code

```java
package org.springframework.boot.ssl.pem;

import java.io.IOException;
import java.io.UncheckedIOException;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import java.util.List;
import java.util.function.Supplier;

import org.springframework.util.Assert;
import org.springframework.util.CollectionUtils;
import org.springframework.util.function.SingletonSupplier;
import org.springframework.util.function.ThrowingSupplier;

/**
 * {@link PemSslStore} loaded from {@link PemSslStoreDetails}.
 *
 * @author Phillip Webb
 * @see PemSslStore#load(PemSslStoreDetails)
 */
final class LoadedPemSslStore implements PemSslStore {

    private final PemSslStoreDetails details;

    private final Supplier<List<X509Certificate>> certificatesSupplier;

    private final Supplier<PrivateKey> privateKeySupplier;

    LoadedPemSslStore(PemSslStoreDetails details) {
        Assert.notNull(details, "Details must not be null");
        this.details = details;
        this.certificatesSupplier = supplier(() -> loadCertificates(details));
        this.privateKeySupplier = supplier(() -> loadPrivateKey(details));
    }

    private static <T> Supplier<T> supplier(ThrowingSupplier<T> supplier) {
        return SingletonSupplier.of(supplier.throwing(LoadedPemSslStore::asUncheckedIOException));
    }

    private static UncheckedIOException asUncheckedIOException(String message, Exception cause) {
        return new UncheckedIOException(message, (IOException) cause);
    }

    private static List<X509Certificate> loadCertificates(PemSslStoreDetails details) throws IOException {
        PemContent pemContent = PemContent.load(details.certificates());
        if (pemContent == null) {
            return null;
        }
        List<X509Certificate> certificates = pemContent.getCertificates();
        Assert.state(!CollectionUtils.isEmpty(certificates), "Loaded certificates are empty");
        return certificates;
    }

    private static PrivateKey loadPrivateKey(PemSslStoreDetails details) throws IOException {
        PemContent pemContent = PemContent.load(details.privateKey());
        return (pemContent != null) ? pemContent.getPrivateKey(details.privateKeyPassword()) : null;
    }

    @Override
    public String type() {
        return this.details.type();
    }

    @Override
    public String alias() {
        return this.details.alias();
    }

    @Override
    public String password() {
        return this.details.password();
    }

    @Override
    public List<X509Certificate> certificates() {
        return this.certificatesSupplier.get();
    }

    @Override
    public PrivateKey privateKey() {
        return this.privateKeySupplier.get();
    }

}
```

---

### Summary of Changes:
- Renamed the `certificates` field to `certificatesSupplier` for clarity and consistency.
- Updated all corresponding usages to the new name.

**This improves readability and reduces ambiguity between the supplier and getter methods.**
