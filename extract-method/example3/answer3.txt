23-04-2025, 19:29
**Analysis**
This `ReflectionDiffBuilder` class (from Apache Commons Lang-style code) has some classic signs where **extract method refactoring** can help, particularly:

- Thereâ€™s repeated logic to check if a field should be excluded (spread via multiple `if` conditions) inside the `accept(Field field)` method.
- The logic for searching for an excluded field name (`Arrays.binarySearch`) is also repeated.
- The `toExcludeFieldNames` static method does cloning and null check, which is duplicated in some ways with how fields are later checked/excluded.
- Exception construction in `appendFields` could be extracted, but that's less significant since it's just in one place.

**Opportunities:**
1. Combine the exclusion checks in `accept(Field field)` into small helper/extracted methods (for readability/reusability).
2. Extract field exclusion logic for searching/excluding (`isExcludedField(String fieldName)`).

---

## Refactored Code

Here is the **refactored** code using "extract method" where appropriate (mostly within the `accept(Field)` logic):

```java
package org.apache.commons.lang3.builder;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.Arrays;
import org.apache.commons.lang3.ArraySorter;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.ClassUtils;
import org.apache.commons.lang3.reflect.FieldUtils;

public class ReflectionDiffBuilder<T> implements Builder<DiffResult<T>> {

    public static final class Builder<T> {

        private String[] excludeFieldNames = ArrayUtils.EMPTY_STRING_ARRAY;
        private DiffBuilder<T> diffBuilder;

        public ReflectionDiffBuilder<T> build() {
            return new ReflectionDiffBuilder<>(diffBuilder, excludeFieldNames);
        }

        public Builder<T> setDiffBuilder(final DiffBuilder<T> diffBuilder) {
            this.diffBuilder = diffBuilder;
            return this;
        }

        public Builder<T> setExcludeFieldNames(final String... excludeFieldNames) {
            this.excludeFieldNames = toExcludeFieldNames(excludeFieldNames);
            return this;
        }

    }

    public static <T> Builder<T> builder() {
        return new Builder<>();
    }

    private static String[] toExcludeFieldNames(final String[] excludeFieldNames) {
        if (excludeFieldNames == null) {
            return ArrayUtils.EMPTY_STRING_ARRAY;
        }
        // clone and remove nulls
        return ArraySorter.sort(ReflectionToStringBuilder.toNoNullStringArray(excludeFieldNames));
    }

    private final DiffBuilder<T> diffBuilder;
    private String[] excludeFieldNames;

    private ReflectionDiffBuilder(final DiffBuilder<T> diffBuilder, final String[] excludeFieldNames) {
        this.diffBuilder = diffBuilder;
        this.excludeFieldNames = excludeFieldNames;
    }

    @Deprecated
    public ReflectionDiffBuilder(final T left, final T right, final ToStringStyle style) {
        this(DiffBuilder.<T>builder().setLeft(left).setRight(right).setStyle(style).build(), null);
    }

    // Extracted method: check if the field is synthetic/inner
    private boolean isInnerClassField(final Field field) {
        return field.getName().indexOf(ClassUtils.INNER_CLASS_SEPARATOR_CHAR) != -1;
    }

    // Extracted method: check if field is transient
    private boolean isTransientField(final Field field) {
        return Modifier.isTransient(field.getModifiers());
    }

    // Extracted method: check if field is static
    private boolean isStaticField(final Field field) {
        return Modifier.isStatic(field.getModifiers());
    }

    // Extracted method: check if excluded by annotation
    private boolean isAnnotationExcluded(final Field field) {
        return field.isAnnotationPresent(DiffExclude.class);
    }

    // Extracted method: check if a field name is in the exclusion list
    private boolean isExcludedField(final String fieldName) {
        return this.excludeFieldNames != null && Arrays.binarySearch(this.excludeFieldNames, fieldName) >= 0;
    }

    // Refactored accept() to use extracted exclusion methods
    private boolean accept(final Field field) {
        if (isInnerClassField(field)) {
            return false;
        }
        if (isTransientField(field)) {
            return false;
        }
        if (isStaticField(field)) {
            return false;
        }
        if (isExcludedField(field.getName())) {
            return false;
        }
        if (isAnnotationExcluded(field)) {
            return false;
        }
        return true;
    }

    private void appendFields(final Class<?> clazz) {
        for (final Field field : FieldUtils.getAllFields(clazz)) {
            if (accept(field)) {
                try {
                    diffBuilder.append(field.getName(),
                        FieldUtils.readField(field, getLeft(), true),
                        FieldUtils.readField(field, getRight(), true));
                } catch (final IllegalAccessException e) {
                    throw new IllegalArgumentException("Unexpected IllegalAccessException: " + e.getMessage(), e);
                }
            }
        }
    }

    @Override
    public DiffResult<T> build() {
        if (getLeft().equals(getRight())) {
            return diffBuilder.build();
        }
        appendFields(getLeft().getClass());
        return diffBuilder.build();
    }

    public String[] getExcludeFieldNames() {
        return this.excludeFieldNames.clone();
    }

    private T getLeft() {
        return diffBuilder.getLeft();
    }

    private T getRight() {
        return diffBuilder.getRight();
    }

    @Deprecated
    public ReflectionDiffBuilder<T> setExcludeFieldNames(final String... excludeFieldNames) {
        this.excludeFieldNames = toExcludeFieldNames(excludeFieldNames);
        return this;
    }

}
```

---

## **Summary of Extract Method Opportunities Used**

- **accept(Field)** is split into five helper methods:
  - `isInnerClassField(Field)`
  - `isTransientField(Field)`
  - `isStaticField(Field)`
  - `isAnnotationExcluded(Field)`
  - `isExcludedField(String)`

This improves readability and maintainability, and if any exclusion logic changes, it will be easier to update in one place.

---

**If you need further extraction in other areas, such as exception handling or further reduction in other methods, let me know!**