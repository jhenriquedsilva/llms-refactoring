28-04-2025, 19:47

### Review for Rename Method Refactoring Opportunities

As a reviewer, I have thoroughly inspected the provided code for method naming quality. The following methods stand out as having *potential for improved naming*:

#### Candidates for Rename Method Refactoring

1. **`lengthMinusTrailingWhitespace(String line)`**
   - **Issue:** The name is not as clear as it could be. "Minus" can be ambiguous in this context.
   - **Suggestion:** `getLengthWithoutTrailingWhitespace(String line)` improves clarity.

2. **`lengthExpandedTabs(String inputString, int toIdx, int tabWidth)`**
   - **Issue:** "lengthExpandedTabs" does not clearly express that it computes the length of a prefix with tabs expanded.
   - **Suggestion:** `getExpandedTabLength(String inputString, int toIdx, int tabWidth)`

3. **`baseClassName(String type)`**
   - **Issue:** Could be ambiguous. "Base" can be interpreted as superclass.
   - **Suggestion:** `getSimpleClassName(String qualifiedClassName)`

4. **`fillTemplateWithStringsByRegexp(...)`**
   - **Issue:** Very wordy and not idiomatic.
   - **Suggestion:** `replaceTemplateGroupsWithRegexMatches(...)`
   - Slightly shorter and communicates the use of regex group matches for template filling.

5. **`isIdentifier(String str)`**
   - **Comment:** Fine, but a more descriptive name would be `isValidJavaIdentifier(String str)`.

6. **`isName(String str)`**
   - **Comment:** Could be ambiguous. Improve to `isValidQualifiedJavaName(String str)`.

---

#### **Refactored Class Below**

```java
package com.puppycrawl.tools.checkstyle.utils;

import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.BitSet;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

import com.puppycrawl.tools.checkstyle.api.CheckstyleException;

/**
 * Contains utility methods.
 *
 */
public final class CommonUtil {

    /** Default tab width for column reporting. */
    public static final int DEFAULT_TAB_WIDTH = 8;

    /** For cases where no tokens should be accepted. */
    public static final BitSet EMPTY_BIT_SET = new BitSet();
    /** Copied from org.apache.commons.lang3.ArrayUtils. */
    public static final String[] EMPTY_STRING_ARRAY = new String[0];
    /** Copied from org.apache.commons.lang3.ArrayUtils. */
    public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];
    /** Copied from org.apache.commons.lang3.ArrayUtils. */
    public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];
    /** Copied from org.apache.commons.lang3.ArrayUtils. */
    public static final int[] EMPTY_INT_ARRAY = new int[0];
    /** Copied from org.apache.commons.lang3.ArrayUtils. */
    public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];
    /** Copied from org.apache.commons.lang3.ArrayUtils. */
    public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];
    /** Pseudo URL protocol for loading from the class path. */
    public static final String CLASSPATH_URL_PROTOCOL = "classpath:";

    /** Prefix for the exception when unable to find resource. */
    private static final String UNABLE_TO_FIND_EXCEPTION_PREFIX = "Unable to find: ";

    /** The extension separator. */
    private static final String EXTENSION_SEPARATOR = ".";

    /** Stop instances being created. **/
    private CommonUtil() {
    }

    public static Pattern createPattern(String pattern) {
        return createPattern(pattern, 0);
    }

    public static Pattern createPattern(String pattern, int flags) {
        try {
            return Pattern.compile(pattern, flags);
        }
        catch (final PatternSyntaxException ex) {
            throw new IllegalArgumentException(
                    "Failed to initialise regular expression " + pattern, ex);
        }
    }

    public static boolean matchesFileExtension(File file, String... fileExtensions) {
        boolean result = false;
        if (fileExtensions == null || fileExtensions.length == 0) {
            result = true;
        }
        else {
            // normalize extensions so all of them have a leading dot
            final String[] withDotExtensions = new String[fileExtensions.length];
            for (int i = 0; i < fileExtensions.length; i++) {
                final String extension = fileExtensions[i];
                if (extension.startsWith(EXTENSION_SEPARATOR)) {
                    withDotExtensions[i] = extension;
                }
                else {
                    withDotExtensions[i] = EXTENSION_SEPARATOR + extension;
                }
            }

            final String fileName = file.getName();
            for (final String fileExtension : withDotExtensions) {
                if (fileName.endsWith(fileExtension)) {
                    result = true;
                    break;
                }
            }
        }

        return result;
    }

    public static boolean hasWhitespaceBefore(int index, String line) {
        boolean result = true;
        for (int i = 0; i < index; i++) {
            if (!Character.isWhitespace(line.charAt(i))) {
                result = false;
                break;
            }
        }
        return result;
    }

    /**
     * Returns the length of a string ignoring all trailing whitespace.
     *
     * @param line
     *            the string to process
     * @return the length of the string ignoring all trailing whitespace
     **/
    public static int getLengthWithoutTrailingWhitespace(String line) {
        int len = line.length();
        for (int i = len - 1; i >= 0; i--) {
            if (!Character.isWhitespace(line.charAt(i))) {
                break;
            }
            len--;
        }
        return len;
    }

    /**
     * Returns the length of a String prefix with tabs expanded.
     * Each tab is counted as the number of characters it
     * takes to jump to the next tab stop.
     *
     * @param inputString
     *            the input String
     * @param toIdx
     *            index in string (exclusive) where the calculation stops
     * @param tabWidth
     *            the distance between tab stop position.
     * @return the length of string.substring(0, toIdx) with tabs expanded.
     */
    public static int getExpandedTabLength(String inputString,
                                           int toIdx,
                                           int tabWidth) {
        int len = 0;
        for (int idx = 0; idx < toIdx; idx++) {
            if (inputString.codePointAt(idx) == '	') {
                len = (len / tabWidth + 1) * tabWidth;
            }
            else {
                len++;
            }
        }
        return len;
    }

    public static boolean isPatternValid(String pattern) {
        boolean isValid = true;
        try {
            Pattern.compile(pattern);
        }
        catch (final PatternSyntaxException ignored) {
            isValid = false;
        }
        return isValid;
    }

    /**
     * Returns simple (unqualified) class name from a qualified name.
     *
     * @param qualifiedClassName the fully qualified name. Cannot be null
     * @return the simple class name from a fully qualified name
     */
    public static String getSimpleClassName(String qualifiedClassName) {
        final int index = qualifiedClassName.lastIndexOf('.');
        return qualifiedClassName.substring(index + 1);
    }

    public static String relativizeAndNormalizePath(final String baseDirectory, final String path) {
        final String resultPath;
        if (baseDirectory == null) {
            resultPath = path;
        }
        else {
            final Path pathAbsolute = Paths.get(path);
            final Path pathBase = Paths.get(baseDirectory);
            resultPath = pathBase.relativize(pathAbsolute).toString();
        }
        return resultPath;
    }

    public static <T> Constructor<T> getConstructor(Class<T> targetClass,
                                                    Class<?>... parameterTypes) {
        try {
            return targetClass.getConstructor(parameterTypes);
        }
        catch (NoSuchMethodException ex) {
            throw new IllegalStateException(ex);
        }
    }

    public static <T> T invokeConstructor(Constructor<T> constructor, Object... parameters) {
        try {
            return constructor.newInstance(parameters);
        }
        catch (InstantiationException | IllegalAccessException | InvocationTargetException ex) {
            throw new IllegalStateException(ex);
        }
    }

    public static void close(Closeable closeable) {
        if (closeable != null) {
            try {
                closeable.close();
            }
            catch (IOException ex) {
                throw new IllegalStateException("Cannot close the stream", ex);
            }
        }
    }

    public static URI getUriByFilename(String filename) throws CheckstyleException {
        URI uri = getWebOrFileProtocolUri(filename);

        if (uri == null) {
            uri = getFilepathOrClasspathUri(filename);
        }

        return uri;
    }

    public static URI getWebOrFileProtocolUri(String filename) {
        URI uri;
        try {
            final URL url = new URL(filename);
            uri = url.toURI();
        }
        catch (URISyntaxException | MalformedURLException ignored) {
            uri = null;
        }
        return uri;
    }

    private static URI getFilepathOrClasspathUri(String filename) throws CheckstyleException {
        final URI uri;
        final File file = new File(filename);

        if (file.exists()) {
            uri = file.toURI();
        }
        else {
            final int lastIndexOfClasspathProtocol;
            if (filename.lastIndexOf(CLASSPATH_URL_PROTOCOL) == 0) {
                lastIndexOfClasspathProtocol = CLASSPATH_URL_PROTOCOL.length();
            }
            else {
                lastIndexOfClasspathProtocol = 0;
            }
            uri = getResourceFromClassPath(filename
                    .substring(lastIndexOfClasspathProtocol));
        }
        return uri;
    }

    public static URI getResourceFromClassPath(String filename) throws CheckstyleException {
        final URL configUrl;
        if (filename.charAt(0) == '/') {
            configUrl = getCheckstyleResource(filename);
        }
        else {
            configUrl = ClassLoader.getSystemResource(filename);
        }

        if (configUrl == null) {
            throw new CheckstyleException(UNABLE_TO_FIND_EXCEPTION_PREFIX + filename);
        }

        final URI uri;
        try {
            uri = configUrl.toURI();
        }
        catch (final URISyntaxException ex) {
            throw new CheckstyleException(UNABLE_TO_FIND_EXCEPTION_PREFIX + filename, ex);
        }

        return uri;
    }

    public static URL getCheckstyleResource(String name) {
        return CommonUtil.class.getResource(name);
    }

    /**
     * Fills template with group matches from the given line based on the provided regex.
     *
     * @param template the string to expand.
     * @param lineToPlaceInTemplate contains expression which should be placed into string.
     * @param regexp expression to find in comment.
     * @return the string, based on template filled with given lines
     */
    public static String replaceTemplateGroupsWithRegexMatches(
            String template, String lineToPlaceInTemplate, Pattern regexp) {
        final Matcher matcher = regexp.matcher(lineToPlaceInTemplate);
        String result = template;
        if (matcher.find()) {
            for (int i = 0; i <= matcher.groupCount(); i++) {
                // $n expands comment match like in Pattern.subst().
                result = result.replaceAll("\$" + i, matcher.group(i));
            }
        }
        return result;
    }

    public static String getFileNameWithoutExtension(String fullFilename) {
        final String fileName = new File(fullFilename).getName();
        final int dotIndex = fileName.lastIndexOf('.');
        final String fileNameWithoutExtension;
        if (dotIndex == -1) {
            fileNameWithoutExtension = fileName;
        }
        else {
            fileNameWithoutExtension = fileName.substring(0, dotIndex);
        }
        return fileNameWithoutExtension;
    }

    public static String getFileExtension(String fileNameWithExtension) {
        final String fileName = Paths.get(fileNameWithExtension).toString();
        final int dotIndex = fileName.lastIndexOf('.');
        final String extension;
        if (dotIndex == -1) {
            extension = "";
        }
        else {
            extension = fileName.substring(dotIndex + 1);
        }
        return extension;
    }

    /**
     * Checks whether the given string is a valid Java identifier.
     *
     * @param str A string to check.
     * @return true when the given string contains valid identifier.
     */
    public static boolean isValidJavaIdentifier(String str) {
        boolean isIdentifier = !str.isEmpty();

        for (int i = 0; isIdentifier && i < str.length(); i++) {
            if (i == 0) {
                isIdentifier = Character.isJavaIdentifierStart(str.charAt(0));
            }
            else {
                isIdentifier = Character.isJavaIdentifierPart(str.charAt(i));
            }
        }

        return isIdentifier;
    }

    /**
     * Checks whether the given string is a valid qualified Java name.
     *
     * @param str A string to check.
     * @return true when the given string contains valid name.
     */
    public static boolean isValidQualifiedJavaName(String str) {
        boolean isName = false;

        final String[] identifiers = str.split("\\.", -1);
        for (String identifier : identifiers) {
            isName = isValidJavaIdentifier(identifier);
            if (!isName) {
                break;
            }
        }

        return isName;
    }

    public static boolean isBlank(String value) {
        return Objects.isNull(value)
                || indexOfNonWhitespace(value) >= value.length();
    }

    public static int indexOfNonWhitespace(String value) {
        final int length = value.length();
        int left = 0;
        while (left < length) {
            final int codePointAt = value.codePointAt(left);
            if (!Character.isWhitespace(codePointAt)) {
                break;
            }
            left += Character.charCount(codePointAt);
        }
        return left;
    }

    public static boolean isCodePointWhitespace(int[] codePoints, int index) {
        //  We only need to check the first member of a surrogate pair to verify that
        //  it is not whitespace.
        final char character = Character.toChars(codePoints[index])[0];
        return Character.isWhitespace(character);
    }
}
```

---

#### **Summary of Main Changes**
- `lengthMinusTrailingWhitespace` → `getLengthWithoutTrailingWhitespace`
- `lengthExpandedTabs` → `getExpandedTabLength`
- `baseClassName` → `getSimpleClassName`
- `fillTemplateWithStringsByRegexp` → `replaceTemplateGroupsWithRegexMatches`
- `isIdentifier` → `isValidJavaIdentifier`
- `isName` → `isValidQualifiedJavaName`

---

**Reasoning:**
These refinements use more standard Java API naming conventions and provide more clarity to future code readers.

---

**If these method signatures are part of the code's public API and used externally, ensure to deprecate the old names and gradually migrate.**

Let me know if you require *both* old and new method signatures with `@Deprecated` deprecation tags for migration!
