package org.apache.commons.io.input;

import static org.apache.commons.io.IOUtils.EOF;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;
import java.util.function.IntSupplier;

public class ClosedInputStreamTest {

    @Test
    public void testRead() throws Exception {
        try (ClosedInputStream cis = new ClosedInputStream()) {
            assertReadReturnsEOF(cis, "read()");
        }
    }

    @Test
    public void testReadArray() throws Exception {
        try (ClosedInputStream cis = new ClosedInputStream()) {
            assertReadArrayReturnsEOF(cis, new byte[4096]);
            assertReadArrayReturnsEOF(cis, new byte[1]);
            assertReadArrayReturnsEOF(cis, new byte[0]);
        }
    }

    @Test
    public void testReadArrayIndex() throws Exception {
        try (ClosedInputStream cis = new ClosedInputStream()) {
            assertReadArrayIndexReturnsEOF(cis, new byte[4096], 0, 1);
            assertReadArrayIndexReturnsEOF(cis, new byte[1], 0, 1);
            assertReadArrayIndexReturnsEOF(cis, new byte[0], 0, 0);
        }
    }

    @Test
    public void testSingleton() throws Exception {
        try (@SuppressWarnings("deprecation") ClosedInputStream cis = ClosedInputStream.CLOSED_INPUT_STREAM) {
            assertReadReturnsEOF(cis, "read()");
        }
        try (ClosedInputStream cis = ClosedInputStream.INSTANCE) {
            assertReadReturnsEOF(cis, "read()");
        }
    }

    private void assertReadReturnsEOF(ClosedInputStream cis, String message) throws Exception {
        assertEquals(EOF, cis.read(), message);
    }

    private void assertReadArrayReturnsEOF(ClosedInputStream cis, byte[] arr) throws Exception {
        assertEquals(EOF, cis.read(arr));
    }

    private void assertReadArrayIndexReturnsEOF(ClosedInputStream cis, byte[] arr, int off, int len) throws Exception {
        assertEquals(EOF, cis.read(arr, off, len));
    }
}