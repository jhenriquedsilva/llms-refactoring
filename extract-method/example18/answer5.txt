26-04-2025, 14:50

Absolutely!
The code contains a few "long method" code smells suitable for **Extract Method** refactoring, which helps with readability and maintainability. Below are the main refactoring opportunities:

---

### 1. `IOUtil.createWriter(Charset charset, String reportFile)`
- **Problem:** The method implements two different ways to create the writer (stdout vs. file).
- **Refactoring:** Extract methods for `createStdoutWriter(Charset)` and `createFileWriter(Charset, String)`.

---

### 2. `IOUtil.BomAwareInputStream#determineBom()`
- **Problem:** The logic for determining UTF-8, UTF-16LE, and UTF-16BE BOMs is mixed together.
- **Refactoring:** Extract methods for each BOM case to improve clarity.

---

### 3. Repeated Patterns
Common repeated I/O buffer read/write loops (such as in `toByteArray`, `copy`, `readToString`) could be extracted for more reusability, but since they’re slightly different (byte/char, append/write), extraction is not strictly necessary.
However, `determineBom()` does benefit from extraction.

---

Below is the **refactored class**:

```java
package net.sourceforge.pmd.internal.util;

import java.io.Closeable;
import java.io.File;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.CodingErrorAction;
import java.nio.charset.StandardCharsets;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Collection;
import java.util.List;
import java.util.Objects;

import org.apache.commons.lang3.StringUtils;
import org.checkerframework.checker.nullness.qual.Nullable;

/**
 *
 * @author Brian Remedios
 */
public final class IOUtil {
    /**
     * Unicode BOM character. Replaces commons io ByteOrderMark.
     */
    public static final char UTF_BOM = '﻿';
    /** Conventional return value for readers. */
    public static final int EOF = -1;
    private static final int BUFFER_SIZE = 8192;

    private IOUtil() {
    }

    public static Writer createWriter() {
        return createWriter(null);
    }

    private static Charset getDefaultCharset() {
        String csn = AccessController.doPrivileged(new PrivilegedAction<String>() {
            @Override
            public String run() {
                return System.getProperty("file.encoding");
            }
        });
        try {
            return Charset.forName(csn);
        } catch (UnsupportedCharsetException e) {
            return StandardCharsets.UTF_8;
        }
    }

    public static Writer createWriter(String reportFile) {
        return createWriter(getDefaultCharset(), reportFile);
    }

    public static Writer createWriter(Charset charset, String reportFile) {
        try {
            if (StringUtils.isBlank(reportFile)) {
                return createStdoutWriter(charset);
            }
            return createFileWriter(charset, reportFile);
        } catch (IOException e) {
            throw new IllegalArgumentException(e);
        }
    }

    // === Extracted Method for Stdout Writer ===
    private static Writer createStdoutWriter(Charset charset) {
        return new OutputStreamWriter(new FilterOutputStream(System.out) {
            @Override
            public void close() {
                // avoid closing stdout, simply flush
                try {
                    out.flush();
                } catch (IOException ignored) {
                    // Nothing left to do
                }
            }

            @Override
            public void write(byte[] b, int off, int len) throws IOException {
                /*
                 * FilterOutputStream iterates over each byte, asking subclasses to provide more efficient implementations
                 * It therefore negates any such optimizations that the underlying stream actually may implement.
                 */
                out.write(b, off, len);
            }
        }, charset);
    }

    // === Extracted Method for File Writer ===
    private static Writer createFileWriter(Charset charset, String reportFile) throws IOException {
        Path path = new File(reportFile).toPath().toAbsolutePath();
        Files.createDirectories(path.getParent()); // ensure parent dir exists
        // this will create the file if it doesn't exist
        return Files.newBufferedWriter(path, charset);
    }

    public static void tryCloseClassLoader(ClassLoader classLoader) {
        if (classLoader instanceof Closeable) {
            closeQuietly((Closeable) classLoader);
        }
    }

    @SuppressWarnings("PMD.CloseResource") // false-positive
    public static Exception closeAll(Collection<? extends AutoCloseable> closeables) {
        Exception composed = null;
        for (AutoCloseable it : closeables) {
            try {
                it.close();
            } catch (Exception e) {
                if (composed == null) {
                    return e;
                } else {
                    composed.addSuppressed(e);
                }
            }
        }
        return composed;
    }

    public static void ensureClosed(List<? extends AutoCloseable> toClose,
                                    @Nullable Exception pendingException) throws Exception {
        Exception closeException = closeAll(toClose);
        if (closeException != null) {
            if (pendingException != null) {
                closeException.addSuppressed(pendingException);
                throw closeException;
            }
            // else no exception at all
        } else if (pendingException != null) {
            throw pendingException;
        }
    }

    public static @Nullable Exception closeAndAccumulate(AutoCloseable closeable, @Nullable Exception pending) {
        try {
            closeable.close();
        } catch (Exception e) {
            if (pending == null) {
                return e;
            } else {
                pending.addSuppressed(e);
            }
        }
        return pending;
    }

    public static void closeQuietly(Closeable closeable) {
        try {
            closeable.close();
        } catch (IOException ignored) {
            // ignored
        }
    }

    public static byte[] toByteArray(InputStream stream) throws IOException {
        byte[] result = new byte[0];
        byte[] buffer = new byte[BUFFER_SIZE];
        int count = stream.read(buffer);
        while (count > -1) {
            byte[] newResult = new byte[result.length + count];
            System.arraycopy(result, 0, newResult, 0, result.length);
            System.arraycopy(buffer, 0, newResult, result.length, count);
            result = newResult;
            count = stream.read(buffer);
        }
        return result;
    }

    public static long skipFully(InputStream stream, long n) throws IOException {
        if (n < 0) {
            throw new IllegalArgumentException();
        }

        long bytesToSkip = n;
        byte[] buffer = new byte[(int) Math.min(BUFFER_SIZE, bytesToSkip)];
        while (bytesToSkip > 0) {
            int count = stream.read(buffer, 0, (int) Math.min(BUFFER_SIZE, bytesToSkip));
            if (count < 0) {
                // reached eof
                break;
            }
            bytesToSkip -= count;
        }
        return n - bytesToSkip;
    }

    public static String normalizePath(String path) {
        Path path1 = Paths.get(path);
        path1.isAbsolute();
        String normalized = path1.normalize().toString();
        if (normalized.contains("." + File.separator) || normalized.contains(".." + File.separator) || "".equals(normalized)) {
            return null;
        }
        return normalized;
    }

    public static boolean equalsNormalizedPaths(String path1, String path2) {
        return Objects.equals(normalizePath(path1), normalizePath(path2));
    }

    public static String getFilenameExtension(String name) {
        String filename = Paths.get(name).getFileName().toString();
        int dot = filename.lastIndexOf('.');
        if (dot > -1) {
            return filename.substring(dot + 1);
        }
        return "";
    }

    public static String getFilenameBase(String name) {
        String filename = Paths.get(name).getFileName().toString();
        int dot = filename.lastIndexOf('.');
        if (dot > -1) {
            return filename.substring(0, dot);
        }
        return filename;
    }

    public static void copy(InputStream from, OutputStream to) throws IOException {
        byte[] buffer = new byte[BUFFER_SIZE];
        int count = from.read(buffer);
        while (count > -1) {
            to.write(buffer, 0, count);
            count = from.read(buffer);
        }
    }

    public static void copy(Reader from, Writer to) throws IOException {
        char[] buffer = new char[BUFFER_SIZE];
        int count = from.read(buffer);
        while (count > -1) {
            to.write(buffer, 0, count);
            count = from.read(buffer);
        }
    }

    public static String readFileToString(File file) throws IOException {
        return readFileToString(file, Charset.defaultCharset());
    }

    public static String readFileToString(File file, Charset charset) throws IOException {
        byte[] bytes = Files.readAllBytes(file.toPath());
        return charset.decode(ByteBuffer.wrap(bytes)).toString();
    }

    public static String readToString(Reader reader) throws IOException {
        StringBuilder sb = new StringBuilder(BUFFER_SIZE);
        char[] buffer = new char[BUFFER_SIZE];
        int count = reader.read(buffer);
        while (count > -1) {
            sb.append(buffer, 0, count);
            count = reader.read(buffer);
        }
        return sb.toString();
    }

    public static String readToString(InputStream stream, Charset charset) throws IOException {
        byte[] bytes = toByteArray(stream);
        return charset.decode(ByteBuffer.wrap(bytes)).toString();
    }

    public static InputStream fromReader(Reader reader) throws IOException {
        class ReaderInputStream extends InputStream {
            private final Reader reader;
            private final CharBuffer charBuffer = CharBuffer.allocate(BUFFER_SIZE);
            private final ByteBuffer byteBuffer = ByteBuffer.allocate(BUFFER_SIZE);
            private final CharsetEncoder encoder;

            private boolean eof;

            ReaderInputStream(Reader reader) {
                this.reader = reader;
                encoder = Charset.defaultCharset().newEncoder()
                        .onMalformedInput(CodingErrorAction.REPLACE)
                        .onUnmappableCharacter(CodingErrorAction.REPLACE);
                charBuffer.clear();
                byteBuffer.clear();
                byteBuffer.flip(); // byte buffer is empty at the beginning, no bytes read yet
            }

            @Override
            public int read() throws IOException {
                if (!byteBuffer.hasRemaining()) {
                    if (charBuffer.hasRemaining() && !eof) {
                        int count = reader.read(charBuffer);
                        eof = count == -1;
                    }
                    byteBuffer.clear();
                    charBuffer.flip();
                    encoder.encode(charBuffer, byteBuffer, eof);
                    byteBuffer.flip();
                    charBuffer.compact();
                }

                if (byteBuffer.hasRemaining()) {
                    return byteBuffer.get();
                }

                return -1;
            }

            @Override
            public int available() throws IOException {
                return byteBuffer.remaining();
            }

            @Override
            public void close() throws IOException {
                reader.close();
            }
        }

        return new ReaderInputStream(reader);
    }

    public static OutputStream fromWriter(Writer writer, String encoding) throws UnsupportedCharsetException {
        class WriterOutputStream extends OutputStream {
            private final Writer writer;
            private final CharsetDecoder decoder;
            private final ByteBuffer byteBuffer = ByteBuffer.allocate(BUFFER_SIZE);
            private final CharBuffer charBuffer = CharBuffer.allocate(BUFFER_SIZE);

            WriterOutputStream(Writer writer, String encoding) throws UnsupportedCharsetException {
                this.writer = writer;
                Charset charset = Charset.forName(encoding);
                decoder = charset.newDecoder()
                        .onMalformedInput(CodingErrorAction.REPLACE)
                        .onUnmappableCharacter(CodingErrorAction.REPLACE);
                byteBuffer.clear();
                charBuffer.clear();
            }

            @Override
            public void write(int b) throws IOException {
                if (!byteBuffer.hasRemaining()) {
                    decodeByteBuffer(false);
                }
                byteBuffer.put((byte) b);
            }

            @Override
            public void flush() throws IOException {
                decodeByteBuffer(false);
            }

            private void decodeByteBuffer(boolean isClosing) throws IOException {
                byteBuffer.flip();
                charBuffer.clear();
                decoder.decode(byteBuffer, charBuffer, isClosing);
                writer.write(charBuffer.array(), 0, charBuffer.position());
                writer.flush();
                byteBuffer.compact();
            }

            @Override
            public void close() throws IOException {
                flush();
                decodeByteBuffer(true);
                writer.close();
            }
        }

        return new WriterOutputStream(writer, encoding);
    }

    /**
     * <p>
     * Input stream that skips an optional byte order mark at the beginning
     * of the stream. Whether the stream had a byte order mark (encoded in either UTF-8,
     * UTF-16LE or UTF-16BE) can be checked with {@link #hasBom()}. The corresponding
     * charset can be retrieved with {@link #getBomCharsetName()}.
     * </p>
     *
     * <p>
     * If the stream didn't had a BOM, then no bytes are skipped.
     * </p>
     */
    public static class BomAwareInputStream extends FilterInputStream {

        private byte[] begin;
        int beginIndex;

        private String charset;

        public BomAwareInputStream(InputStream in) {
            super(in);
            begin = determineBom();
        }

        private byte[] determineBom() {
            byte[] bytes = new byte[3];
            try {
                int count = in.read(bytes);
                if (isUTF8Bom(bytes, count)) {
                    charset = StandardCharsets.UTF_8.name();
                    return new byte[0]; // skip all 3 bytes
                } else if (isUTF16BEBom(bytes, count)) {
                    charset = StandardCharsets.UTF_16BE.name();
                    return extractRemainingBytesForUtf16Be(bytes, count);
                } else if (isUTF16LEBom(bytes, count)) {
                    charset = StandardCharsets.UTF_16LE.name();
                    return extractRemainingBytesForUtf16Le(bytes, count);
                } else if (count == 3) {
                    return bytes;
                }
                if (count < 0) {
                    return new byte[0];
                }
                return extractReadBytes(bytes, count);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }

        // === Extracted methods for BOM cases ===
        private boolean isUTF8Bom(byte[] bytes, int count) {
            return count == 3 && bytes[0] == (byte) 0xef && bytes[1] == (byte) 0xbb && bytes[2] == (byte) 0xbf;
        }

        private boolean isUTF16BEBom(byte[] bytes, int count) {
            return count >= 2 && bytes[0] == (byte) 0xfe && bytes[1] == (byte) 0xff;
        }

        private boolean isUTF16LEBom(byte[] bytes, int count) {
            return count >= 2 && bytes[0] == (byte) 0xff && bytes[1] == (byte) 0xfe;
        }

        private byte[] extractRemainingBytesForUtf16Be(byte[] bytes, int count) {
            return new byte[] { bytes[2] };
        }

        private byte[] extractRemainingBytesForUtf16Le(byte[] bytes, int count) {
            return new byte[] { bytes[2] };
        }

        private byte[] extractReadBytes(byte[] bytes, int count) {
            byte[] read = new byte[count];
            System.arraycopy(bytes, 0, read, 0, count);
            return read;
        }
        // === end BOM extraction ===

        @Override
        public int read() throws IOException {
            if (beginIndex < begin.length) {
                return begin[beginIndex++];
            }
            return super.read();
        }

        @Override
        public int read(byte[] b, int off, int len) throws IOException {
            if (beginIndex < begin.length) {
                int count = 0;
                for (; count < len && beginIndex < begin.length; beginIndex++) {
                    b[off + count] = begin[beginIndex];
                    count++;
                }
                return count;
            }
            return super.read(b, off, len);
        }

        public boolean hasBom() {
            return charset != null;
        }

        public String getBomCharsetName() {
            return charset;
        }
    }
}
```

---

**Summary of changes**:
- Extracted `createStdoutWriter` and `createFileWriter`.
- Extracted BOM-determining logic into helper methods in the `BomAwareInputStream`.

---

**If you need more or different extract method refactorings, or want to target other parts (such as repeated buffer handling), let me know!**
