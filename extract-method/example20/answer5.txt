26-04-2025, 15:54

**Analysis of Refactoring Opportunities**

Looking at the presented code, both `findBridgedMethod` and `getMostSpecificMethod` have the following block of code (only variable names differ):

```java
Object cacheKey = (localBridge ? method : new MethodClassKey(method, targetClass));
Method bridgedMethod = cache.get(cacheKey);
if (bridgedMethod == null) {
    // Gather all methods with matching name and parameter size.
    List<Method> candidateMethods = new ArrayList<>();
    MethodFilter filter = (candidateMethod -> isBridgedCandidateFor(candidateMethod, method));
    ReflectionUtils.doWithMethods(targetClass, candidateMethods::add, filter);
    if (!candidateMethods.isEmpty()) {
        bridgedMethod = (candidateMethods.size() == 1 ? candidateMethods.get(0) :
                searchCandidates(candidateMethods, method, targetClass));
    }
    if (bridgedMethod == null) {
        // A bridge method was passed in but we couldn't find the bridged method.
        // Let's proceed with the passed-in method and hope for the best...
        bridgedMethod = method;
    }
    cache.put(cacheKey, bridgedMethod);
}
return bridgedMethod;
```

This logic can be **extracted** into a new private static method, such as:

```java
private static Method resolveBridgedMethod(Method method, Class<?> targetClass, boolean localBridge) { ... }
```

This will eliminate duplication and improve maintainability.

---

## **Refactored Class**

```java
package org.springframework.core;

import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.springframework.lang.Nullable;
import org.springframework.util.ClassUtils;
import org.springframework.util.ConcurrentReferenceHashMap;
import org.springframework.util.ReflectionUtils;
import org.springframework.util.ReflectionUtils.MethodFilter;

public final class BridgeMethodResolver {

    private static final Map<Object, Method> cache = new ConcurrentReferenceHashMap<>();

    private BridgeMethodResolver() {
    }

    public static Method findBridgedMethod(Method bridgeMethod) {
        Class<?> targetClass = bridgeMethod.getDeclaringClass();
        boolean localBridge = (targetClass == bridgeMethod.getDeclaringClass());
        if (!bridgeMethod.isBridge() && localBridge) {
            return bridgeMethod;
        }
        return resolveBridgedMethod(bridgeMethod, targetClass, localBridge);
    }

    public static Method getMostSpecificMethod(Method bridgeMethod, @Nullable Class<?> targetClass) {
        Method specificMethod = ClassUtils.getMostSpecificMethod(bridgeMethod, targetClass);
        Class<?> effectiveTargetClass = (targetClass != null ? targetClass : specificMethod.getDeclaringClass());
        boolean localBridge = (effectiveTargetClass == specificMethod.getDeclaringClass());
        if (!specificMethod.isBridge() && localBridge) {
            return specificMethod;
        }
        return resolveBridgedMethod(specificMethod, effectiveTargetClass, localBridge);
    }

    /**
     * Extracted method for bridge method resolution and caching.
     */
    private static Method resolveBridgedMethod(Method method, Class<?> targetClass, boolean localBridge) {
        Object cacheKey = (localBridge ? method : new MethodClassKey(method, targetClass));
        Method bridgedMethod = cache.get(cacheKey);
        if (bridgedMethod == null) {
            List<Method> candidateMethods = new ArrayList<>();
            MethodFilter filter = (candidateMethod -> isBridgedCandidateFor(candidateMethod, method));
            ReflectionUtils.doWithMethods(targetClass, candidateMethods::add, filter);
            if (!candidateMethods.isEmpty()) {
                bridgedMethod = (candidateMethods.size() == 1 ? candidateMethods.get(0) :
                        searchCandidates(candidateMethods, method, targetClass));
            }
            if (bridgedMethod == null) {
                bridgedMethod = method;
            }
            cache.put(cacheKey, bridgedMethod);
        }
        return bridgedMethod;
    }

    private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {
        return (!candidateMethod.isBridge() &&
                candidateMethod.getName().equals(bridgeMethod.getName()) &&
                candidateMethod.getParameterCount() == bridgeMethod.getParameterCount());
    }

    @Nullable
    private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod, Class<?> targetClass) {
        if (candidateMethods.isEmpty()) {
            return null;
        }
        Method previousMethod = null;
        boolean sameSig = true;
        for (Method candidateMethod : candidateMethods) {
            if (isBridgeMethodFor(bridgeMethod, candidateMethod, targetClass)) {
                return candidateMethod;
            }
            else if (previousMethod != null) {
                sameSig = sameSig && Arrays.equals(
                        candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes());
            }
            previousMethod = candidateMethod;
        }
        return (sameSig ? candidateMethods.get(0) : null);
    }

    static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> targetClass) {
        if (isResolvedTypeMatch(candidateMethod, bridgeMethod, targetClass)) {
            return true;
        }
        Method method = findGenericDeclaration(bridgeMethod);
        return (method != null && isResolvedTypeMatch(method, candidateMethod, targetClass));
    }

    private static boolean isResolvedTypeMatch(Method genericMethod, Method candidateMethod, Class<?> targetClass) {
        Type[] genericParameters = genericMethod.getGenericParameterTypes();
        if (genericParameters.length != candidateMethod.getParameterCount()) {
            return false;
        }
        Class<?>[] candidateParameters = candidateMethod.getParameterTypes();
        for (int i = 0; i < candidateParameters.length; i++) {
            ResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, targetClass);
            Class<?> candidateParameter = candidateParameters[i];
            if (candidateParameter.isArray()) {
                if (!candidateParameter.componentType().equals(genericParameter.getComponentType().toClass())) {
                    return false;
                }
            }
            if (!ClassUtils.resolvePrimitiveIfNecessary(candidateParameter).equals(
                    ClassUtils.resolvePrimitiveIfNecessary(genericParameter.toClass()))) {
                return false;
            }
        }
        return true;
    }

    @Nullable
    private static Method findGenericDeclaration(Method bridgeMethod) {
        if (!bridgeMethod.isBridge()) {
            return bridgeMethod;
        }
        Class<?> superclass = bridgeMethod.getDeclaringClass().getSuperclass();
        while (superclass != null && Object.class != superclass) {
            Method method = searchForMatch(superclass, bridgeMethod);
            if (method != null && !method.isBridge()) {
                return method;
            }
            superclass = superclass.getSuperclass();
        }
        Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass());
        return searchInterfaces(interfaces, bridgeMethod);
    }

    @Nullable
    private static Method searchInterfaces(Class<?>[] interfaces, Method bridgeMethod) {
        for (Class<?> ifc : interfaces) {
            Method method = searchForMatch(ifc, bridgeMethod);
            if (method != null && !method.isBridge()) {
                return method;
            }
            else {
                method = searchInterfaces(ifc.getInterfaces(), bridgeMethod);
                if (method != null) {
                    return method;
                }
            }
        }
        return null;
    }

    @Nullable
    private static Method searchForMatch(Class<?> type, Method bridgeMethod) {
        try {
            return type.getDeclaredMethod(bridgeMethod.getName(), bridgeMethod.getParameterTypes());
        }
        catch (NoSuchMethodException ex) {
            return null;
        }
    }

    public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {
        if (bridgeMethod == bridgedMethod) {
            return true;
        }
        return (bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType()) &&
                bridgeMethod.getParameterCount() == bridgedMethod.getParameterCount() &&
                Arrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()));
    }
}
```

**Summary of the change**:
- Introduced `private static Method resolveBridgedMethod(Method method, Class<?> targetClass, boolean localBridge)`.
- Updated both `findBridgedMethod` and `getMostSpecificMethod` to use this method.

---

**This refactoring removes duplicated logic, adheres to the DRY principle, and keeps the class easier to maintain.**

Levenshtein edit-distance: 4929