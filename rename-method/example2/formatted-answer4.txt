package org.apache.commons.io.input;

import static org.apache.commons.io.IOUtils.EOF;

import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;

public class NullInputStream extends InputStream {

    public static final NullInputStream INSTANCE = new NullInputStream();
    private final long size;
    private long position;
    private long mark = -1;
    private long readLimit;
    private boolean eof;
    private final boolean throwEofException;
    private final boolean markSupported;

    public NullInputStream() {
        this(0, true, false);
    }

    public NullInputStream(final long size) {
        this(size, true, false);
    }

    public NullInputStream(final long size, final boolean markSupported, final boolean throwEofException) {
        this.size = size;
        this.markSupported = markSupported;
        this.throwEofException = throwEofException;
    }

    @Override
    public int available() {
        final long avail = size - position;
        if (avail <= 0) {
            return 0;
        }
        if (avail > Integer.MAX_VALUE) {
            return Integer.MAX_VALUE;
        }
        return (int) avail;
    }

    private void checkAndThrowEofException(final String message) throws EOFException {
        if (throwEofException) {
            throw new EOFException(message);
        }
    }

    @Override
    public void close() throws IOException {
        eof = false;
        position = 0;
        mark = -1;
    }

    public long getPosition() {
        return position;
    }

    public long getSize() {
        return size;
    }

    private int handleEndOfFile() throws EOFException {
        eof = true;
        checkAndThrowEofException("handleEndOfFile()");
        return EOF;
    }

    @Override
    public synchronized void mark(final int readLimit) {
        if (!markSupported) {
            throw UnsupportedOperationExceptions.mark();
        }
        mark = position;
        this.readLimit = readLimit;
    }

    @Override
    public boolean markSupported() {
        return markSupported;
    }

    protected int processByte() {
        return 0;
    }

    protected void processBytes(final byte[] bytes, final int offset, final int length) {
    }

    @Override
    public int read() throws IOException {
        if (eof) {
            checkAndThrowEofException("read()");
            return EOF;
        }
        if (position == size) {
            return handleEndOfFile();
        }
        position++;
        return processByte();
    }

    @Override
    public int read(final byte[] bytes) throws IOException {
        return read(bytes, 0, bytes.length);
    }

    @Override
    public int read(final byte[] bytes, final int offset, final int length) throws IOException {
        if (eof) {
            checkAndThrowEofException("read(byte[], int, int)");
            return EOF;
        }
        if (position == size) {
            return handleEndOfFile();
        }
        position += length;
        int returnLength = length;
        if (position > size) {
            returnLength = length - (int) (position - size);
            position = size;
        }
        processBytes(bytes, offset, returnLength);
        return returnLength;
    }

    @Override
    public synchronized void reset() throws IOException {
        if (!markSupported) {
            throw UnsupportedOperationExceptions.reset();
        }
        if (mark < 0) {
            throw new IOException("No position has been marked");
        }
        if (position > mark + readLimit) {
            throw new IOException("Marked position [" + mark + "] is no longer valid - passed the read limit [" + readLimit + "]");
        }
        position = mark;
        eof = false;
    }

    @Override
    public long skip(final long numberOfBytes) throws IOException {
        if (eof) {
            checkAndThrowEofException("skip(long)");
            return EOF;
        }
        if (position == size) {
            return handleEndOfFile();
        }
        position += numberOfBytes;
        long returnLength = numberOfBytes;
        if (position > size) {
            returnLength = numberOfBytes - (position - size);
            position = size;
        }
        return returnLength;
    }

}