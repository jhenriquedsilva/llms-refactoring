package com.github.javaparser.resolution.types.parametrization;

import com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration;
import com.github.javaparser.resolution.types.ResolvedType;
import com.github.javaparser.resolution.types.ResolvedWildcard;

import java.util.Optional;

public interface ResolvedTypeParameterValueProvider {

    Optional<ResolvedType> typeParamValue(ResolvedTypeParameterDeclaration typeParameterDeclaration);

    default ResolvedType useThisTypeParametersOnTheGivenType(ResolvedType type) {
        if (type.isTypeVariable()) {
            ResolvedTypeParameterDeclaration typeParameter = type.asTypeParameter();
            if (typeParameter.declaredOnType()) {
                Optional<ResolvedType> typeParam = typeParamValue(typeParameter);
                if (typeParam.isPresent()) {
                    ResolvedType typeParamValue = typeParam.get();
                    if (typeParamValue.isWildcard()) {
                        ResolvedWildcard wildcard = typeParamValue.asWildcard();
                        if (!wildcard.equals(ResolvedWildcard.UNBOUNDED) && type.equals(wildcard.getBoundedType())) {
                            return type;
                        }
                    }
                    type = typeParamValue;
                }
            }
        }
        if (type.isWildcard() && type.asWildcard().isBounded()) {
            ResolvedWildcard wildcard = type.asWildcard();
            if (wildcard.isExtends()) {
                return ResolvedWildcard.extendsBound(useThisTypeParametersOnTheGivenType(wildcard.getBoundedType()));
            }
            return ResolvedWildcard.superBound(useThisTypeParametersOnTheGivenType(wildcard.getBoundedType()));
        }
        if (type.isReferenceType()) {
            type = type.asReferenceType().transformTypeParameters(this::useThisTypeParametersOnTheGivenType);
        }
        return type;
    }

    Optional<ResolvedType> getGenericParameterByName(String name);
}