public class ExhaustiveSwitch {

    static int coverage(Object object) {
        return switch (object) {
            case String str -> str.length();
            case Integer integerValue -> integerValue;
            default -> 0;
        };
    }

    static void coverageStatement(Object object) {
        switch (object) {
            case String str:
                System.out.println(str);
                break;
            case Integer integerValue:
                System.out.println("Integer");
                break;
            default:
                break;
        }
    }

    sealed interface S permits A, B, C {
    }

    final static class A implements S {
    }

    final static class B implements S {
    }

    record C(int value) implements S {
    }

    static int testSealedExhaustive(S sealedInstance) {
        return switch (sealedInstance) {
            case A instanceA -> 1;
            case B instanceB -> 2;
            case C recordC -> 3;
        };
    }

    static void switchStatementExhaustive(S sealedInstance) {
        switch (sealedInstance) {
            case A instanceA:
                System.out.println("A");
                break;
            case C recordC:
                System.out.println("C");
                break;
            default:
                System.out.println("default case, should be B");
                break;
        }
    }

    sealed interface I<T> permits E, F {
    }

    final static class E<X> implements I<String> {
    }

    final static class F<Y> implements I<Y> {
    }

    static int testGenericSealedExhaustive(I<Integer> sealedGeneric) {
        return switch (sealedGeneric) {
            case F<Integer> instanceF -> 42;
        };
    }

    public static void main(String[] args) {
        System.out.println(coverage("a string"));
        System.out.println(coverage(42));
        System.out.println(coverage(new Object()));
        coverageStatement("a string");
        coverageStatement(21);
        coverageStatement(new Object());
        System.out.println("A:" + testSealedExhaustive(new A()));
        System.out.println("B:" + testSealedExhaustive(new B()));
        System.out.println("C:" + testSealedExhaustive(new C(1)));
        switchStatementExhaustive(new A());
        switchStatementExhaustive(new B());
        switchStatementExhaustive(new C(2));
        System.out.println("F:" + testGenericSealedExhaustive(new F<Integer>()));
    }
}