package org.apache.commons.io.input;

import static org.apache.commons.io.IOUtils.EOF;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

public class ClosedInputStreamTest {

    @Test
    public void testRead() throws Exception {
        try (ClosedInputStream cis = new ClosedInputStream()) {
            assertReadEqualsEOF(cis);
        }
    }

    @Test
    public void testReadArray() throws Exception {
        try (ClosedInputStream cis = new ClosedInputStream()) {
            assertReadArrayEqualsEOF(cis);
        }
    }

    @Test
    public void testReadArrayIndex() throws Exception {
        try (ClosedInputStream cis = new ClosedInputStream()) {
            assertReadArrayIndexEqualsEOF(cis);
        }
    }

    @Test
    public void testSingleton() throws Exception {
        try (@SuppressWarnings("deprecation") ClosedInputStream cis = ClosedInputStream.CLOSED_INPUT_STREAM) {
            assertReadEqualsEOF(cis);
        }
        try (ClosedInputStream cis = ClosedInputStream.INSTANCE) {
            assertReadEqualsEOF(cis);
        }
    }

    private void assertReadEqualsEOF(ClosedInputStream cis) throws Exception {
        assertEquals(EOF, cis.read(), "read()");
    }

    private void assertReadArrayEqualsEOF(ClosedInputStream cis) throws Exception {
        assertEquals(EOF, cis.read(new byte[4096]));
        assertEquals(EOF, cis.read(new byte[1]));
        assertEquals(EOF, cis.read(new byte[0]));
    }

    private void assertReadArrayIndexEqualsEOF(ClosedInputStream cis) throws Exception {
        assertEquals(EOF, cis.read(new byte[4096], 0, 1));
        assertEquals(EOF, cis.read(new byte[1], 0, 1));
        assertEquals(EOF, cis.read(new byte[0], 0, 0));
    }
}