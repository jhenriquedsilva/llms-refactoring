29-04-2025, 21:20

Yes, there **are multiple opportunities** for an _extract variable_ refactoring to **improve readability and avoid repeated expressions** in the code you posted. Here's a summary of potential improvements:

### What can be extracted?
1. Repeated array creation: `new float[] { randomFloat(), randomFloat(), randomFloat() }`
2. Repeated construction of `KnnSearchBuilder`, with mostly the same parameters.
3. Repeated lists: `List.of(textField)`, `List.of(numericField)`.
4. Index name, field names, and related constants – but these are already variables.

Let's apply the "Extract Variable" refactoring for the _array creation_ and _KnnSearchBuilder_ instantiation within the `testProfileDfs()` method.

---

## Refactored Code

```java
package org.elasticsearch.search.profile.dfs;

import org.apache.lucene.tests.util.English;
import org.elasticsearch.action.index.IndexRequestBuilder;
import org.elasticsearch.action.search.SearchType;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.search.profile.ProfileResult;
import org.elasticsearch.search.profile.SearchProfileDfsPhaseResult;
import org.elasticsearch.search.profile.SearchProfileShardResult;
import org.elasticsearch.search.profile.query.CollectorResult;
import org.elasticsearch.search.profile.query.QueryProfileShardResult;
import org.elasticsearch.search.vectors.KnnSearchBuilder;
import org.elasticsearch.test.ESIntegTestCase;
import org.elasticsearch.xcontent.XContentFactory;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import static org.elasticsearch.search.profile.query.RandomQueryGenerator.randomQueryBuilder;
import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertResponse;
import static org.hamcrest.Matchers.emptyOrNullString;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.greaterThan;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.Matchers.notNullValue;

public class DfsProfilerIT extends ESIntegTestCase {

    private static final int KNN_DIM = 3;

    public void testProfileDfs() throws Exception {
        String textField = "text_field";
        String numericField = "number";
        String vectorField = "vector";
        String indexName = "text-dfs-profile";
        createIndex(indexName, vectorField);
        ensureGreen();

        int numDocs = randomIntBetween(10, 50);
        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs];
        for (int i = 0; i < numDocs; i++) {
            float[] vectorValues = new float[] { randomFloat(), randomFloat(), randomFloat() };
            docs[i] = prepareIndex(indexName).setId(String.valueOf(i))
                    .setSource(
                            textField,
                            English.intToEnglish(i),
                            numericField,
                            i,
                            vectorField,
                            vectorValues
                    );
        }
        indexRandom(true, docs);
        refresh();
        int iters = between(5, 10);
        for (int i = 0; i < iters; i++) {
            QueryBuilder q = randomQueryBuilder(List.of(textField), List.of(numericField), numDocs, 3);

            float[] knnVector = new float[] { randomFloat(), randomFloat(), randomFloat() };
            Float knnScore = randomBoolean() ? null : randomFloat();
            KnnSearchBuilder knnBuilder = new KnnSearchBuilder(
                    vectorField,
                    knnVector,
                    randomIntBetween(5, 10),
                    50,
                    knnScore
            );

            if (randomBoolean()) {
                knnBuilder.addFilterQuery(q);
            }

            logger.info("Query: {}", q);
            assertResponse(
                    prepareSearch().setQuery(q)
                            .setTrackTotalHits(true)
                            .setProfile(true)
                            .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)
                            .setKnnSearch(randomList(2, 5, () ->  {
                                float[] randomKnnVector = new float[] { randomFloat(), randomFloat(), randomFloat() };
                                Float randomKnnScore = randomBoolean() ? null : randomFloat();
                                return new KnnSearchBuilder(
                                        vectorField,
                                        randomKnnVector,
                                        randomIntBetween(5, 10),
                                        50,
                                        randomKnnScore
                                );
                            })),
                    response -> {
                        assertNotNull("Profile response element should not be null", response.getProfileResults());
                        assertThat("Profile response should not be an empty array", response.getProfileResults().size(), not(0));
                        for (Map.Entry<String, SearchProfileShardResult> shard : response.getProfileResults().entrySet()) {
                            for (QueryProfileShardResult searchProfiles : shard.getValue().getQueryProfileResults()) {
                                for (ProfileResult result : searchProfiles.getQueryResults()) {
                                    assertNotNull(result.getQueryName());
                                    assertNotNull(result.getLuceneDescription());
                                    assertThat(result.getTime(), greaterThan(0L));
                                }
                                CollectorResult result = searchProfiles.getCollectorResult();
                                assertThat(result.getName(), is(not(emptyOrNullString())));
                                assertThat(result.getTime(), greaterThan(0L));
                            }
                            SearchProfileDfsPhaseResult searchProfileDfsPhaseResult = shard.getValue().getSearchProfileDfsPhaseResult();
                            assertThat(searchProfileDfsPhaseResult, is(notNullValue()));
                            for (QueryProfileShardResult queryProfileShardResult : searchProfileDfsPhaseResult.getQueryProfileShardResult()) {
                                for (ProfileResult result : queryProfileShardResult.getQueryResults()) {
                                    assertNotNull(result.getQueryName());
                                    assertNotNull(result.getLuceneDescription());
                                    assertThat(result.getTime(), greaterThan(0L));
                                }
                                CollectorResult result = queryProfileShardResult.getCollectorResult();
                                assertThat(result.getName(), is(not(emptyOrNullString())));
                                assertThat(result.getTime(), greaterThan(0L));
                            }
                            ProfileResult statsResult = searchProfileDfsPhaseResult.getDfsShardResult();
                            assertThat(statsResult.getQueryName(), equalTo("statistics"));
                        }
                    }
            );
        }
    }

    private void createIndex(String name, String vectorField) throws IOException {
        assertAcked(
                prepareCreate(name).setMapping(
                        XContentFactory.jsonBuilder()
                                .startObject()
                                .startObject("properties")
                                .startObject(vectorField)
                                .field("type", "dense_vector")
                                .field("dims", KNN_DIM)
                                .field("index", true)
                                .field("similarity", "cosine")
                                .endObject()
                                .endObject()
                                .endObject()
                )
        );
    }

}
```

---

**Key points in this refactor:**

- The construction of `float[]` was extracted to local variables `vectorValues` and `knnVector` (and `randomKnnVector` for the lambda).
- The construction of `KnnSearchBuilder` was extracted as a local variable (`knnBuilder`), and similar extraction in the lambda—*this enhances clarity*.
- This also prepares the code for easier maintenance: if the vector’s dimension changes or the way vectors are generated is updated, you don’t have to hunt for every occurrence.

If you wish for even further reduction of duplication (e.g. a method to generate a random vector), let me know!

Compiles