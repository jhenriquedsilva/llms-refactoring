26-04-2025, 09:48

Certainly! Upon reviewing your code, some methods contain blocks of code that can benefit from **extract method refactoring** to improve readability, simplify logic, and enhance maintainability. In particular, the following methods stand out for potential refactoring:

- `FileChannelDataBlock.read(ByteBuffer dst, long pos)`
- `FileChannelDataBlock.ManagedFileChannel.read(ByteBuffer dst, long position)`
    - Both have complex, nested logic with multiple responsibilities.

Let's address and refactor these methods accordingly.

---

### Refactored Code

```java
package org.springframework.boot.loader.zip;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedByInterruptException;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.function.Supplier;

import org.springframework.boot.loader.log.DebugLogger;

class FileChannelDataBlock implements CloseableDataBlock {

    private static final DebugLogger debug = DebugLogger.get(FileChannelDataBlock.class);

    static Tracker tracker;

    private final ManagedFileChannel channel;

    private final long offset;

    private final long size;

    FileChannelDataBlock(Path path) throws IOException {
        this.channel = new ManagedFileChannel(path);
        this.offset = 0;
        this.size = Files.size(path);
    }

    FileChannelDataBlock(ManagedFileChannel channel, long offset, long size) {
        this.channel = channel;
        this.offset = offset;
        this.size = size;
    }

    @Override
    public long size() throws IOException {
        return this.size;
    }

    @Override
    public int read(ByteBuffer dst, long pos) throws IOException {
        validatePosition(pos);
        ensureOpen(ClosedChannelException::new);
        int remaining = (int) (this.size - pos);
        if (remaining <= 0) {
            return -1;
        }
        int originalDestinationLimit = maybeLimitDestinationBuffer(dst, remaining);
        int result = this.channel.read(dst, this.offset + pos);
        restoreDestinationLimit(dst, originalDestinationLimit);
        return result;
    }

    private void validatePosition(long pos) {
        if (pos < 0) {
            throw new IllegalArgumentException("Position must not be negative");
        }
    }

    private int maybeLimitDestinationBuffer(ByteBuffer dst, int remaining) {
        if (dst.remaining() > remaining) {
            int originalDestinationLimit = dst.limit();
            dst.limit(dst.position() + remaining);
            return originalDestinationLimit;
        }
        return -1;
    }

    private void restoreDestinationLimit(ByteBuffer dst, int originalDestinationLimit) {
        if (originalDestinationLimit != -1) {
            dst.limit(originalDestinationLimit);
        }
    }

    void open() throws IOException {
        this.channel.open();
    }

    @Override
    public void close() throws IOException {
        this.channel.close();
    }

    <E extends Exception> void ensureOpen(Supplier<E> exceptionSupplier) throws E {
        this.channel.ensureOpen(exceptionSupplier);
    }

    FileChannelDataBlock slice(long offset) throws IOException {
        return slice(offset, this.size - offset);
    }

    FileChannelDataBlock slice(long offset, long size) {
        if (offset == 0 && size == this.size) {
            return this;
        }
        validateSliceArguments(offset, size);
        debug.log("Slicing %s at %s with size %s", this.channel, offset, size);
        return new FileChannelDataBlock(this.channel, this.offset + offset, size);
    }

    private void validateSliceArguments(long offset, long size) {
        if (offset < 0) {
            throw new IllegalArgumentException("Offset must not be negative");
        }
        if (size < 0 || offset + size > this.size) {
            throw new IllegalArgumentException("Size must not be negative and must be within bounds");
        }
    }

    static class ManagedFileChannel {

        static final int BUFFER_SIZE = 1024 * 10;

        private final Path path;

        private int referenceCount;

        private FileChannel fileChannel;

        private ByteBuffer buffer;

        private long bufferPosition = -1;

        private int bufferSize;

        private final Object lock = new Object();

        ManagedFileChannel(Path path) {
            if (!Files.isRegularFile(path)) {
                throw new IllegalArgumentException(path + " must be a regular file");
            }
            this.path = path;
        }

        int read(ByteBuffer dst, long position) throws IOException {
            synchronized (this.lock) {
                if (position < this.bufferPosition || position >= this.bufferPosition + this.bufferSize) {
                    return tryBufferReloadWithRetries(position);
                }
                if (this.bufferSize <= 0) {
                    return this.bufferSize;
                }
                return copyBufferToDestination(dst, position);
            }
        }

        private int tryBufferReloadWithRetries(long position) throws IOException {
            for (int i = 0; i < 10; i++) {
                boolean interrupted = (i != 0) ? Thread.interrupted() : false;
                try {
                    reloadBuffer(position);
                    return this.bufferSize;
                }
                catch (ClosedByInterruptException ex) {
                    repairFileChannel();
                }
                finally {
                    if (interrupted) {
                        Thread.currentThread().interrupt();
                    }
                }
            }
            throw new ClosedByInterruptException();
        }

        private void reloadBuffer(long position) throws IOException {
            this.buffer.clear();
            this.bufferSize = this.fileChannel.read(this.buffer, position);
            this.bufferPosition = position;
        }

        private int copyBufferToDestination(ByteBuffer dst, long position) {
            int offset = (int) (position - this.bufferPosition);
            int length = Math.min(this.bufferSize - offset, dst.remaining());
            dst.put(dst.position(), this.buffer, offset, length);
            dst.position(dst.position() + length);
            return length;
        }

        private void repairFileChannel() throws IOException {
            if (tracker != null) {
                tracker.closedFileChannel(this.path, this.fileChannel);
            }
            this.fileChannel = FileChannel.open(this.path, StandardOpenOption.READ);
            if (tracker != null) {
                tracker.openedFileChannel(this.path, this.fileChannel);
            }
        }

        void open() throws IOException {
            synchronized (this.lock) {
                if (this.referenceCount == 0) {
                    debug.log("Opening '%s'", this.path);
                    this.fileChannel = FileChannel.open(this.path, StandardOpenOption.READ);
                    this.buffer = ByteBuffer.allocateDirect(BUFFER_SIZE);
                    if (tracker != null) {
                        tracker.openedFileChannel(this.path, this.fileChannel);
                    }
                }
                this.referenceCount++;
                debug.log("Reference count for '%s' incremented to %s", this.path, this.referenceCount);
            }
        }

        void close() throws IOException {
            synchronized (this.lock) {
                if (this.referenceCount == 0) {
                    return;
                }
                this.referenceCount--;
                if (this.referenceCount == 0) {
                    debug.log("Closing '%s'", this.path);
                    this.buffer = null;
                    this.bufferPosition = -1;
                    this.bufferSize = 0;
                    this.fileChannel.close();
                    if (tracker != null) {
                        tracker.closedFileChannel(this.path, this.fileChannel);
                    }
                    this.fileChannel = null;
                }
                debug.log("Reference count for '%s' decremented to %s", this.path, this.referenceCount);
            }
        }

        <E extends Exception> void ensureOpen(Supplier<E> exceptionSupplier) throws E {
            synchronized (this.lock) {
                if (this.referenceCount == 0 || !this.fileChannel.isOpen()) {
                    throw exceptionSupplier.get();
                }
            }
        }

        @Override
        public String toString() {
            return this.path.toString();
        }

    }

    interface Tracker {

        void openedFileChannel(Path path, FileChannel fileChannel);

        void closedFileChannel(Path path, FileChannel fileChannel);

    }

}
```

---

### **Summary of Refactorings**

**In `FileChannelDataBlock`:**
- Extracted `validatePosition`, `maybeLimitDestinationBuffer`, and `restoreDestinationLimit` methods from `read()` for clarity.
- Extracted `validateSliceArguments` from `slice(long offset, long size)`.

**In `ManagedFileChannel`:**
- Extracted `tryBufferReloadWithRetries`, `reloadBuffer`, and `copyBufferToDestination` methods from `read()` for clearer separation of logic.

---

This improves readability, isolates errors/side effects, and helps maintain the single responsibility principle within methods.

Levenshtein edit-distance: 1883
Compiles
Passes 9 ouf of 13