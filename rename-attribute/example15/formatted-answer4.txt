package org.mockito.internal.runners;

import org.junit.runner.Description;
import org.junit.runner.manipulation.Filter;
import org.junit.runner.manipulation.NoTestsRemainException;
import org.junit.runner.notification.RunNotifier;
import org.mockito.Mockito;
import org.mockito.internal.junit.UnnecessaryStubbingsReporter;
import org.mockito.internal.runners.util.FailureDetector;

public class StrictRunner implements InternalRunner {

    private final Class<?> testClassToReport;
    private final InternalRunner delegatedRunner;
    private boolean filterWasInvoked;

    public StrictRunner(InternalRunner delegatedRunner, Class<?> testClassToReport) {
        this.delegatedRunner = delegatedRunner;
        this.testClassToReport = testClassToReport;
        this.filterWasInvoked = false;
    }

    @Override
    public void run(RunNotifier notifier) {
        UnnecessaryStubbingsReporter reporter = new UnnecessaryStubbingsReporter();
        FailureDetector listener = new FailureDetector();
        Mockito.framework().addListener(reporter);
        try {
            notifier.addListener(listener);
            delegatedRunner.run(notifier);
        } finally {
            Mockito.framework().removeListener(reporter);
        }
        if (!filterWasInvoked && listener.isSuccessful()) {
            reporter.validateUnusedStubs(testClassToReport, notifier);
        }
    }

    @Override
    public Description getDescription() {
        return delegatedRunner.getDescription();
    }

    @Override
    public void filter(Filter filter) throws NoTestsRemainException {
        Filter recordingFilter = new RecordingFilter(filter);
        delegatedRunner.filter(recordingFilter);
    }

    private class RecordingFilter extends Filter {

        private final Filter wrappedFilter;

        public RecordingFilter(Filter wrappedFilter) {
            this.wrappedFilter = wrappedFilter;
        }

        @Override
        public void apply(Object child) throws NoTestsRemainException {
            wrappedFilter.apply(child);
        }

        @Override
        public Filter intersect(Filter second) {
            return wrappedFilter.intersect(second);
        }

        @Override
        public boolean shouldRun(Description description) {
            boolean result = wrappedFilter.shouldRun(description);
            if (!result) {
                filterWasInvoked = true;
            }
            return result;
        }

        @Override
        public String describe() {
            return wrappedFilter.describe();
        }
    }
}