29-04-2025, 20:08

**Analysis of Method Names:**

Let’s systematically review the method names defined in your code, focusing especially on those in the `Person` class and on all the test names, since identifiers should clearly communicate intent.

### Class: `Person`
- `getName()` – good, clear.
- `guessName()` – could be clearer (returns the default name; "guess" is ambiguous).
- `howMuchDidYouInherit()` – good, clear.
- `getNameButDelegateToMethodThatThrows()` – the name is very verbose; describes *how* rather than *what*. Maybe `getNameOrThrow()` or `getNameAndThrowException()`.
- `throwSomeException()` – this is only for testing; could be `throwRuntimeException()`.

### Test Methods:
- `shouldCallRealMethdsEvenDelegatedToOtherSelfMethod` – typo ("Methds"); could be `shouldCallRealMethodsWhenDelegatedToSelfMethod`.
- `shouldAllowStubbingOfMethodsThatDelegateToOtherMethods` – verbose but ok.
- `shouldAllowStubbingWithThrowablesMethodsThatDelegateToOtherMethods` – awkward; could be `shouldAllowStubbingWithThrowableWhenDelegating`.
- `shouldStackTraceGetFilteredOnUserExceptions` – awkward grammar; maybe `shouldFilterStackTraceOnUserExceptions`.
- `shouldStackTraceGetFilteredOnUserExceptionsReflection` – similar; maybe `shouldFilterStackTraceOnUserExceptionsWithReflection`.
- `shouldStackTraceGetFilteredOnUserExceptionsReflectionForJava21AndHigher` – verbose, but clear purpose. Could be `shouldFilterStackTraceWithReflectionForJava21AndAbove`.
- `shouldDealWithPrivateFieldsOfSubclasses` – clear.
- etc.

### **Proposed Refactorings**

Let’s choose more intention-revealing names. We’ll suggest these renames:

#### **Person class**
- **guessName()** ⟶ `getDefaultName()`
- **getNameButDelegateToMethodThatThrows()** ⟶ `getNameAndThrowException()`
- **throwSomeException()** ⟶ `throwRuntimeException()`

#### **Test methods**
- **shouldCallRealMethdsEvenDelegatedToOtherSelfMethod** ⟶ `shouldCallRealMethodsWhenDelegatedToSelfMethod`
- **shouldAllowStubbingWithThrowablesMethodsThatDelegateToOtherMethods** ⟶ `shouldAllowStubbingWithThrowableWhenDelegating`
- **shouldStackTraceGetFilteredOnUserExceptions** ⟶ `shouldFilterStackTraceOnUserExceptions`
- **shouldStackTraceGetFilteredOnUserExceptionsReflection** ⟶ `shouldFilterStackTraceOnUserExceptionsWithReflection`
- **shouldStackTraceGetFilteredOnUserExceptionsReflectionForJava21AndHigher** ⟶ `shouldFilterStackTraceWithReflectionForJava21AndAbove`

---
## **Refactored Code**

```java
package org.mockitousage.spies;

import static net.bytebuddy.ClassFileVersion.JAVA_V21;
import static org.hamcrest.CoreMatchers.instanceOf;
import static org.hamcrest.CoreMatchers.not;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mockitoutil.Conditions.methodsInStackTrace;

import net.bytebuddy.ClassFileVersion;
import org.assertj.core.api.Assertions;
import org.junit.Assume;
import org.junit.Before;
import org.junit.Test;
import org.mockito.internal.configuration.plugins.Plugins;
import org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker;
import org.mockito.internal.util.reflection.ReflectionMemberAccessor;
import org.mockitoutil.TestBase;

@SuppressWarnings("unchecked")
public class PartialMockingWithSpiesTest extends TestBase {

    @Before
    public void pleaseMakeStackTracesClean() {
        makeStackTracesClean();
    }

    class InheritMe {
        private String inherited = "100$";

        protected String getInherited() {
            return inherited;
        }
    }

    class Person extends InheritMe {
        private final Name defaultName = new Name("Default name");

        public String getName() {
            return getDefaultName().name;
        }

        Name getDefaultName() {
            return defaultName;
        }

        public String howMuchDidYouInherit() {
            return getInherited();
        }

        public String getNameAndThrowException() {
            throwRuntimeException();
            return getDefaultName().name;
        }

        private void throwRuntimeException() {
            throw new RuntimeException("boo");
        }
    }

    class Name {
        private final String name;

        public Name(String name) {
            this.name = name;
        }
    }

    Person spy = spy(new Person());

    @Test
    public void shouldCallRealMethodsWhenDelegatedToSelfMethod() {
        // when
        String name = spy.getName();

        // then
        assertEquals("Default name", name);
    }

    @Test
    public void shouldAllowStubbingOfMethodsThatDelegateToOtherMethods() {
        // when
        when(spy.getName()).thenReturn("foo");

        // then
        assertEquals("foo", spy.getName());
    }

    @Test
    public void shouldAllowStubbingWithThrowableWhenDelegating() {
        // when
        doThrow(new RuntimeException("appetite for destruction"))
                .when(spy)
                .getNameAndThrowException();

        // then
        try {
            spy.getNameAndThrowException();
            fail();
        } catch (Exception e) {
            assertEquals("appetite for destruction", e.getMessage());
        }
    }

    @Test
    public void shouldFilterStackTraceOnUserExceptions() {
        Assume.assumeThat(
                Plugins.getMemberAccessor(), not(instanceOf(ReflectionMemberAccessor.class)));

        try {
            // when
            spy.getNameAndThrowException();
            fail();
        } catch (Throwable t) {
            // then
            Assertions.assertThat(t)
                    .has(
                            methodsInStackTrace(
                                    "throwRuntimeException",
                                    "getNameAndThrowException",
                                    "shouldFilterStackTraceOnUserExceptions"));
        }
    }

    @Test
    public void shouldFilterStackTraceOnUserExceptionsWithReflection() {
        Assume.assumeThat(Plugins.getMockMaker(), instanceOf(InlineByteBuddyMockMaker.class));
        Assume.assumeThat(Plugins.getMemberAccessor(), instanceOf(ReflectionMemberAccessor.class));
        Assume.assumeTrue(ClassFileVersion.ofThisVm().isLessThan(JAVA_V21));

        try {
            // when
            spy.getNameAndThrowException();
            fail();
        } catch (Throwable t) {
            // then
            Assertions.assertThat(t)
                    .has(
                            methodsInStackTrace(
                                    "throwRuntimeException",
                                    "invoke0",
                                    "invoke",
                                    "invoke",
                                    "invoke",
                                    "getNameAndThrowException",
                                    "shouldFilterStackTraceOnUserExceptionsWithReflection"));
        }
    }

    @Test
    public void shouldFilterStackTraceWithReflectionForJava21AndAbove() {
        Assume.assumeThat(Plugins.getMockMaker(), instanceOf(InlineByteBuddyMockMaker.class));
        Assume.assumeThat(Plugins.getMemberAccessor(), instanceOf(ReflectionMemberAccessor.class));
        Assume.assumeTrue(ClassFileVersion.ofThisVm().isAtLeast(JAVA_V21));

        try {
            // when
            spy.getNameAndThrowException();
            fail();
        } catch (Throwable t) {
            // then
            Assertions.assertThat(t)
                    .has(
                            methodsInStackTrace(
                                    "throwRuntimeException",
                                    "invoke",
                                    "invoke",
                                    "getNameAndThrowException",
                                    "shouldFilterStackTraceWithReflectionForJava21AndAbove"));
        }
    }

    //    @Test //manual verification
    public void verifyTheStackTrace() {
        spy.getNameAndThrowException();
    }

    @Test
    public void shouldVerify() {
        // when
        spy.getName();

        // then
        verify(spy).getDefaultName();
    }

    @Test
    public void shouldStub() {
        // given
        when(spy.getDefaultName()).thenReturn(new Name("John"));
        // when
        String name = spy.getName();
        // then
        assertEquals("John", name);
    }

    @Test
    public void shouldDealWithPrivateFieldsOfSubclasses() {
        assertEquals("100$", spy.howMuchDidYouInherit());
    }
}
```

---

### **Summary of Key Renames**

- `guessName` ⟶ `getDefaultName`
- `getNameButDelegateToMethodThatThrows` ⟶ `getNameAndThrowException`
- `throwSomeException` ⟶ `throwRuntimeException`
- Adjusted test methods for spelling/clarity/consistency.

**These changes improve code readability and maintainability.**

551
Compiles
Tests pass