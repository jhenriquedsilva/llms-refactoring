26-04-2025, 15:45

This code **does** contain several “extract method” refactoring opportunities, primarily due to repetition of **PropertyMapper** mapping blocks and detecting common themes in configuration methods. Here’s a summary and refactoring:

**Refactoring Opportunities Identified:**
1. The builder-customizing methods (`customizeClientBuilder`, `customizeAdminBuilder`, etc.) repeat similar mapping logic.
2. The pattern `PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull(); ...` is repeated often.
3. The **extracted mappings** for *client*, *admin*, *producer*, *consumer*, *consumer subscription*, *container*, *listener*, and *reader* can be factored out individually for clarity and reuse. This makes the main methods easier to follow and test.
4. The exception handling logic for converting auth parameters can be isolated.

**Refactored Code:**

```java
package org.springframework.boot.autoconfigure.pulsar;

import java.time.Duration;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import org.apache.pulsar.client.admin.PulsarAdminBuilder;
import org.apache.pulsar.client.api.ClientBuilder;
import org.apache.pulsar.client.api.ConsumerBuilder;
import org.apache.pulsar.client.api.ProducerBuilder;
import org.apache.pulsar.client.api.PulsarClientException.UnsupportedAuthenticationException;
import org.apache.pulsar.client.api.ReaderBuilder;
import org.apache.pulsar.common.util.ObjectMapperFactory;

import org.springframework.boot.context.properties.PropertyMapper;
import org.springframework.pulsar.listener.PulsarContainerProperties;
import org.springframework.pulsar.reader.PulsarReaderContainerProperties;
import org.springframework.util.StringUtils;

final class PulsarPropertiesMapper {

    private final PulsarProperties properties;

    PulsarPropertiesMapper(PulsarProperties properties) {
        this.properties = properties;
    }

    void customizeClientBuilder(ClientBuilder clientBuilder, PulsarConnectionDetails connectionDetails) {
        PulsarProperties.Client properties = this.properties.getClient();
        PropertyMapper map = createDefaultPropertyMapper();
        mapClientSettings(map, clientBuilder, properties, connectionDetails);
        customizeAuthentication(clientBuilder::authentication, properties.getAuthentication());
    }

    private void mapClientSettings(PropertyMapper map, ClientBuilder clientBuilder,
                                   PulsarProperties.Client properties, PulsarConnectionDetails connectionDetails) {
        map.from(connectionDetails::getBrokerUrl).to(clientBuilder::serviceUrl);
        map.from(properties::getConnectionTimeout).to(timeoutProperty(clientBuilder::connectionTimeout));
        map.from(properties::getOperationTimeout).to(timeoutProperty(clientBuilder::operationTimeout));
        map.from(properties::getLookupTimeout).to(timeoutProperty(clientBuilder::lookupTimeout));
    }

    void customizeAdminBuilder(PulsarAdminBuilder adminBuilder, PulsarConnectionDetails connectionDetails) {
        PulsarProperties.Admin properties = this.properties.getAdmin();
        PropertyMapper map = createDefaultPropertyMapper();
        mapAdminSettings(map, adminBuilder, properties, connectionDetails);
        customizeAuthentication(adminBuilder::authentication, properties.getAuthentication());
    }

    private void mapAdminSettings(PropertyMapper map, PulsarAdminBuilder adminBuilder,
                                  PulsarProperties.Admin properties, PulsarConnectionDetails connectionDetails) {
        map.from(connectionDetails::getAdminUrl).to(adminBuilder::serviceHttpUrl);
        map.from(properties::getConnectionTimeout).to(timeoutProperty(adminBuilder::connectionTimeout));
        map.from(properties::getReadTimeout).to(timeoutProperty(adminBuilder::readTimeout));
        map.from(properties::getRequestTimeout).to(timeoutProperty(adminBuilder::requestTimeout));
    }

    private void customizeAuthentication(AuthenticationConsumer authentication,
                                         PulsarProperties.Authentication properties) {
        if (StringUtils.hasText(properties.getPluginClassName())) {
            try {
                authentication.accept(
                        properties.getPluginClassName(),
                        convertAuthParamsToString(properties.getParameters())
                );
            }
            catch (UnsupportedAuthenticationException ex) {
                throw new IllegalStateException("Unable to configure Pulsar authentication", ex);
            }
        }
    }

    private String convertAuthParamsToString(Map<String, String> params) {
        try {
            Map<String, String> sortedParams = new TreeMap<>(params);
            return ObjectMapperFactory.create().writeValueAsString(sortedParams);
        }
        catch (Exception ex) {
            throw new IllegalStateException("Could not convert auth parameters to encoded string", ex);
        }
    }

    <T> void customizeProducerBuilder(ProducerBuilder<T> producerBuilder) {
        PulsarProperties.Producer properties = this.properties.getProducer();
        PropertyMapper map = createDefaultPropertyMapper();
        mapProducerSettings(map, producerBuilder, properties);
    }

    private <T> void mapProducerSettings(PropertyMapper map, ProducerBuilder<T> producerBuilder, PulsarProperties.Producer properties) {
        map.from(properties::getName).to(producerBuilder::producerName);
        map.from(properties::getTopicName).to(producerBuilder::topic);
        map.from(properties::getSendTimeout).to(timeoutProperty(producerBuilder::sendTimeout));
        map.from(properties::getMessageRoutingMode).to(producerBuilder::messageRoutingMode);
        map.from(properties::getHashingScheme).to(producerBuilder::hashingScheme);
        map.from(properties::isBatchingEnabled).to(producerBuilder::enableBatching);
        map.from(properties::isChunkingEnabled).to(producerBuilder::enableChunking);
        map.from(properties::getCompressionType).to(producerBuilder::compressionType);
        map.from(properties::getAccessMode).to(producerBuilder::accessMode);
    }

    <T> void customizeConsumerBuilder(ConsumerBuilder<T> consumerBuilder) {
        PulsarProperties.Consumer properties = this.properties.getConsumer();
        PropertyMapper map = createDefaultPropertyMapper();
        mapConsumerSettings(map, consumerBuilder, properties);
        customizeConsumerBuilderSubscription(consumerBuilder);
    }

    private <T> void mapConsumerSettings(PropertyMapper map, ConsumerBuilder<T> consumerBuilder, PulsarProperties.Consumer properties) {
        map.from(properties::getName).to(consumerBuilder::consumerName);
        map.from(properties::getTopics).as(ArrayList::new).to(consumerBuilder::topics);
        map.from(properties::getTopicsPattern).to(consumerBuilder::topicsPattern);
        map.from(properties::getPriorityLevel).to(consumerBuilder::priorityLevel);
        map.from(properties::isReadCompacted).to(consumerBuilder::readCompacted);
        map.from(properties::getDeadLetterPolicy).as(DeadLetterPolicyMapper::map).to(consumerBuilder::deadLetterPolicy);
        map.from(properties::isRetryEnable).to(consumerBuilder::enableRetry);
    }

    private void customizeConsumerBuilderSubscription(ConsumerBuilder<?> consumerBuilder) {
        PulsarProperties.Consumer.Subscription properties = this.properties.getConsumer().getSubscription();
        PropertyMapper map = createDefaultPropertyMapper();
        mapConsumerSubscriptionSettings(map, consumerBuilder, properties);
    }

    private void mapConsumerSubscriptionSettings(PropertyMapper map, ConsumerBuilder<?> consumerBuilder, PulsarProperties.Consumer.Subscription properties) {
        map.from(properties::getName).to(consumerBuilder::subscriptionName);
        map.from(properties::getInitialPosition).to(consumerBuilder::subscriptionInitialPosition);
        map.from(properties::getMode).to(consumerBuilder::subscriptionMode);
        map.from(properties::getTopicsMode).to(consumerBuilder::subscriptionTopicsMode);
        map.from(properties::getType).to(consumerBuilder::subscriptionType);
    }

    void customizeContainerProperties(PulsarContainerProperties containerProperties) {
        customizePulsarContainerConsumerSubscriptionProperties(containerProperties);
        customizePulsarContainerListenerProperties(containerProperties);
    }

    private void customizePulsarContainerConsumerSubscriptionProperties(PulsarContainerProperties containerProperties) {
        PulsarProperties.Consumer.Subscription properties = this.properties.getConsumer().getSubscription();
        PropertyMapper map = createDefaultPropertyMapper();
        map.from(properties::getType).to(containerProperties::setSubscriptionType);
    }

    private void customizePulsarContainerListenerProperties(PulsarContainerProperties containerProperties) {
        PulsarProperties.Listener properties = this.properties.getListener();
        PropertyMapper map = createDefaultPropertyMapper();
        map.from(properties::getSchemaType).to(containerProperties::setSchemaType);
        map.from(properties::isObservationEnabled).to(containerProperties::setObservationEnabled);
    }

    <T> void customizeReaderBuilder(ReaderBuilder<T> readerBuilder) {
        PulsarProperties.Reader properties = this.properties.getReader();
        PropertyMapper map = createDefaultPropertyMapper();
        mapReaderSettings(map, readerBuilder, properties);
    }

    private <T> void mapReaderSettings(PropertyMapper map, ReaderBuilder<T> readerBuilder, PulsarProperties.Reader properties) {
        map.from(properties::getName).to(readerBuilder::readerName);
        map.from(properties::getTopics).to(readerBuilder::topics);
        map.from(properties::getSubscriptionName).to(readerBuilder::subscriptionName);
        map.from(properties::getSubscriptionRolePrefix).to(readerBuilder::subscriptionRolePrefix);
        map.from(properties::isReadCompacted).to(readerBuilder::readCompacted);
    }

    void customizeReaderContainerProperties(PulsarReaderContainerProperties readerContainerProperties) {
        PulsarProperties.Reader properties = this.properties.getReader();
        PropertyMapper map = createDefaultPropertyMapper();
        map.from(properties::getTopics).to(readerContainerProperties::setTopics);
    }

    private Consumer<Duration> timeoutProperty(BiConsumer<Integer, TimeUnit> setter) {
        return (duration) -> setter.accept((int) duration.toMillis(), TimeUnit.MILLISECONDS);
    }

    private PropertyMapper createDefaultPropertyMapper() {
        return PropertyMapper.get().alwaysApplyingWhenNonNull();
    }

    private interface AuthenticationConsumer {
        void accept(String authPluginClassName, String authParamString) throws UnsupportedAuthenticationException;
    }
}
```

**Summary of Improvements:**
- All repeated mapping logic is refactored into private `mapXSettings` methods.
- PropertyMapper initialization shortened via a dedicated method.
- Exception-handling for authentication parameters is now its own method.
- Readability and maintainability increased without loss of semantic meaning.

Levenshtein edit-distance: 2370