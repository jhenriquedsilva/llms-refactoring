28-05-2025, 19:41

Yes, there are **extract method refactoring** opportunities in this class to **improve readability and reusability**. In particular:

- The code for "assert that cis.read... == EOF" is repeated in several places.
- The creation and use of a `ClosedInputStream` for a sequence of `assertEquals` calls is repeated as well.

To refactor, we can extract a helper method that takes a lambda (or use a functional interface, since weâ€™re in Java 8+) to perform assertions on provided `ClosedInputStream`. This minimizes repetition, centralizes resource management, and clarifies the intent.

Here is a suggested refactored version:

```java
package org.apache.commons.io.input;

import static org.apache.commons.io.IOUtils.EOF;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.IOException;
import java.util.function.Consumer;

import org.junit.jupiter.api.Test;

/**
 * Tests {@link ClosedInputStream}.
 */
public class ClosedInputStreamTest {

    // Helper method to manage ClosedInputStream lifecycle and run assertions
    private void withClosedInputStream(Consumer<ClosedInputStream> testLogic) throws IOException {
        try (ClosedInputStream cis = new ClosedInputStream()) {
            testLogic.accept(cis);
        }
    }

    @Test
    public void testRead() throws Exception {
        withClosedInputStream(cis -> assertEquals(EOF, cis.read(), "read()"));
    }

    @Test
    public void testReadArray() throws Exception {
        withClosedInputStream(cis -> {
            assertEquals(EOF, cis.read(new byte[4096]));
            assertEquals(EOF, cis.read(new byte[1]));
            assertEquals(EOF, cis.read(new byte[0]));
        });
    }

    @Test
    public void testReadArrayIndex() throws Exception {
        withClosedInputStream(cis -> {
            assertEquals(EOF, cis.read(new byte[4096], 0, 1));
            assertEquals(EOF, cis.read(new byte[1], 0, 1));
            assertEquals(EOF, cis.read(new byte[0], 0, 0));
        });
    }

    @Test
    public void testSingleton() throws Exception {
        try (@SuppressWarnings("deprecation")
             ClosedInputStream cis = ClosedInputStream.CLOSED_INPUT_STREAM) {
            assertEquals(EOF, cis.read(), "read()");
        }
        try (ClosedInputStream cis = ClosedInputStream.INSTANCE) {
            assertEquals(EOF, cis.read(), "read()");
        }
    }

}
```

**Notes:**
- Only `testSingleton` is not extracted since it requires different instances.
- The `withClosedInputStream` helper minimizes boilerplate and standardizes resource management.
- Using a Java `Consumer` makes it clear what the "test operation" for the stream is in each test.

**This improves readability and reduces duplication without altering test semantics.**

Levenshtein edit-distance: 420
Does not compile
Tests do not pass