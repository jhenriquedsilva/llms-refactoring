package org.springframework.boot.autoconfigure.pulsar;

import java.time.Duration;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import org.apache.pulsar.client.admin.PulsarAdminBuilder;
import org.apache.pulsar.client.api.ClientBuilder;
import org.apache.pulsar.client.api.ConsumerBuilder;
import org.apache.pulsar.client.api.ProducerBuilder;
import org.apache.pulsar.client.api.PulsarClientException.UnsupportedAuthenticationException;
import org.apache.pulsar.client.api.ReaderBuilder;
import org.apache.pulsar.common.util.ObjectMapperFactory;

import org.springframework.boot.context.properties.PropertyMapper;
import org.springframework.pulsar.listener.PulsarContainerProperties;
import org.springframework.pulsar.reader.PulsarReaderContainerProperties;
import org.springframework.util.StringUtils;

final class PulsarPropertiesMapper {

    private final PulsarProperties properties;

    PulsarPropertiesMapper(PulsarProperties properties) {
        this.properties = properties;
    }

    void customizeClientBuilder(ClientBuilder clientBuilder, PulsarConnectionDetails connectionDetails) {
        PulsarProperties.Client clientProperties = this.properties.getClient();
        PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();
        map.from(connectionDetails::getBrokerUrl).to(clientBuilder::serviceUrl);
        map.from(clientProperties::getConnectionTimeout).to(timeoutProperty(clientBuilder::connectionTimeout));
        map.from(clientProperties::getOperationTimeout).to(timeoutProperty(clientBuilder::operationTimeout));
        map.from(clientProperties::getLookupTimeout).to(timeoutProperty(clientBuilder::lookupTimeout));
        customizeAuthentication(clientBuilder::authentication, clientProperties.getAuthentication());
    }

    void customizeAdminBuilder(PulsarAdminBuilder adminBuilder, PulsarConnectionDetails connectionDetails) {
        PulsarProperties.Admin adminProperties = this.properties.getAdmin();
        PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();
        map.from(connectionDetails::getAdminUrl).to(adminBuilder::serviceHttpUrl);
        map.from(adminProperties::getConnectionTimeout).to(timeoutProperty(adminBuilder::connectionTimeout));
        map.from(adminProperties::getReadTimeout).to(timeoutProperty(adminBuilder::readTimeout));
        map.from(adminProperties::getRequestTimeout).to(timeoutProperty(adminBuilder::requestTimeout));
        customizeAuthentication(adminBuilder::authentication, adminProperties.getAuthentication());
    }

    private void customizeAuthentication(AuthenticationConsumer authentication, PulsarProperties.Authentication authenticationProperties) {
        if (!StringUtils.hasText(authenticationProperties.getPluginClassName())) {
            return;
        }
        try {
            Map<String, String> params = new TreeMap<>(authenticationProperties.getParam());
            String authParamString;
            try {
                authParamString = ObjectMapperFactory.create().writeValueAsString(params);
            } catch (Exception ex) {
                throw new IllegalStateException("Could not convert auth parameters to encoded string", ex);
            }
            authentication.accept(authenticationProperties.getPluginClassName(), authParamString);
        } catch (UnsupportedAuthenticationException ex) {
            throw new IllegalStateException("Unable to configure Pulsar authentication", ex);
        }
    }

    <T> void customizeProducerBuilder(ProducerBuilder<T> producerBuilder) {
        PulsarProperties.Producer producerProperties = this.properties.getProducer();
        PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();
        map.from(producerProperties::getName).to(producerBuilder::producerName);
        map.from(producerProperties::getTopicName).to(producerBuilder::topic);
        map.from(producerProperties::getSendTimeout).to(timeoutProperty(producerBuilder::sendTimeout));
        map.from(producerProperties::getMessageRoutingMode).to(producerBuilder::messageRoutingMode);
        map.from(producerProperties::getHashingScheme).to(producerBuilder::hashingScheme);
        map.from(producerProperties::isBatchingEnabled).to(producerBuilder::enableBatching);
        map.from(producerProperties::isChunkingEnabled).to(producerBuilder::enableChunking);
        map.from(producerProperties::getCompressionType).to(producerBuilder::compressionType);
        map.from(producerProperties::getAccessMode).to(producerBuilder::accessMode);
    }

    <T> void customizeConsumerBuilder(ConsumerBuilder<T> consumerBuilder) {
        PulsarProperties.Consumer consumerProperties = this.properties.getConsumer();
        PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();
        map.from(consumerProperties::getName).to(consumerBuilder::consumerName);
        map.from(consumerProperties::getTopics).as(ArrayList::new).to(consumerBuilder::topics);
        map.from(consumerProperties::getTopicsPattern).to(consumerBuilder::topicsPattern);
        map.from(consumerProperties::getPriorityLevel).to(consumerBuilder::priorityLevel);
        map.from(consumerProperties::isReadCompacted).to(consumerBuilder::readCompacted);
        map.from(consumerProperties::getDeadLetterPolicy).as(DeadLetterPolicyMapper::map).to(consumerBuilder::deadLetterPolicy);
        map.from(consumerProperties::isRetryEnable).to(consumerBuilder::enableRetry);
        customizeConsumerBuilderSubscription(consumerBuilder);
    }

    private void customizeConsumerBuilderSubscription(ConsumerBuilder<?> consumerBuilder) {
        PulsarProperties.Consumer.Subscription subscriptionProperties = this.properties.getConsumer().getSubscription();
        PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();
        map.from(subscriptionProperties::getName).to(consumerBuilder::subscriptionName);
        map.from(subscriptionProperties::getInitialPosition).to(consumerBuilder::subscriptionInitialPosition);
        map.from(subscriptionProperties::getMode).to(consumerBuilder::subscriptionMode);
        map.from(subscriptionProperties::getTopicsMode).to(consumerBuilder::subscriptionTopicsMode);
        map.from(subscriptionProperties::getType).to(consumerBuilder::subscriptionType);
    }

    void customizeContainerProperties(PulsarContainerProperties containerProperties) {
        customizePulsarContainerConsumerSubscriptionProperties(containerProperties);
        customizePulsarContainerListenerProperties(containerProperties);
    }

    private void customizePulsarContainerConsumerSubscriptionProperties(PulsarContainerProperties containerProperties) {
        PulsarProperties.Consumer.Subscription subscriptionProperties = this.properties.getConsumer().getSubscription();
        PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();
        map.from(subscriptionProperties::getType).to(containerProperties::setSubscriptionType);
    }

    private void customizePulsarContainerListenerProperties(PulsarContainerProperties containerProperties) {
        PulsarProperties.Listener listenerProperties = this.properties.getListener();
        PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();
        map.from(listenerProperties::getSchemaType).to(containerProperties::setSchemaType);
        map.from(listenerProperties::isObservationEnabled).to(containerProperties::setObservationEnabled);
    }

    <T> void customizeReaderBuilder(ReaderBuilder<T> readerBuilder) {
        PulsarProperties.Reader readerProperties = this.properties.getReader();
        PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();
        map.from(readerProperties::getName).to(readerBuilder::readerName);
        map.from(readerProperties::getTopics).to(readerBuilder::topics);
        map.from(readerProperties::getSubscriptionName).to(readerBuilder::subscriptionName);
        map.from(readerProperties::getSubscriptionRolePrefix).to(readerBuilder::subscriptionRolePrefix);
        map.from(readerProperties::isReadCompacted).to(readerBuilder::readCompacted);
    }

    void customizeReaderContainerProperties(PulsarReaderContainerProperties readerContainerProperties) {
        PulsarProperties.Reader readerProperties = this.properties.getReader();
        PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();
        map.from(readerProperties::getTopics).to(readerContainerProperties::setTopics);
    }

    private Consumer<Duration> timeoutProperty(BiConsumer<Integer, TimeUnit> setter) {
        return (duration) -> setter.accept((int) duration.toMillis(), TimeUnit.MILLISECONDS);
    }

    private interface AuthenticationConsumer {

        void accept(String authPluginClassName, String authParams) throws UnsupportedAuthenticationException;

    }
}