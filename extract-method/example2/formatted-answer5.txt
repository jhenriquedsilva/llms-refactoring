package org.apache.commons.io.input;

import static org.apache.commons.io.IOUtils.EOF;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

public class ClosedInputStreamTest {

    @Test
    public void testRead() throws Exception {
        assertClosedInputStreamReadEOF(new ClosedInputStream());
    }

    @Test
    public void testReadArray() throws Exception {
        assertClosedInputStreamReadEOF(new ClosedInputStream(), new byte[4096]);
        assertClosedInputStreamReadEOF(new ClosedInputStream(), new byte[1]);
        assertClosedInputStreamReadEOF(new ClosedInputStream(), new byte[0]);
    }

    @Test
    public void testReadArrayIndex() throws Exception {
        assertClosedInputStreamReadEOF(new ClosedInputStream(), new byte[4096], 0, 1);
        assertClosedInputStreamReadEOF(new ClosedInputStream(), new byte[1], 0, 1);
        assertClosedInputStreamReadEOF(new ClosedInputStream(), new byte[0], 0, 0);
    }

    @Test
    public void testSingleton() throws Exception {
        assertClosedInputStreamReadEOF(ClosedInputStream.CLOSED_INPUT_STREAM);
        assertClosedInputStreamReadEOF(ClosedInputStream.INSTANCE);
    }

    private void assertClosedInputStreamReadEOF(ClosedInputStream cis) throws Exception {
        try (ClosedInputStream stream = cis) {
            assertEquals(EOF, stream.read(), "read()");
        }
    }

    private void assertClosedInputStreamReadEOF(ClosedInputStream cis, byte[] bytes) throws Exception {
        try (ClosedInputStream stream = cis) {
            assertEquals(EOF, stream.read(bytes));
        }
    }

    private void assertClosedInputStreamReadEOF(ClosedInputStream cis, byte[] bytes, int off, int len) throws Exception {
        try (ClosedInputStream stream = cis) {
            assertEquals(EOF, stream.read(bytes, off, len));
        }
    }
}