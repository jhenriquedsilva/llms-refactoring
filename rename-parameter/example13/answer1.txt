01-05-2025, 14:56

### Rename Parameter Refactoring Review

In this code, the main parameters of method signatures are often generically named — for example:
- `Class<?> testClass`
- `Events tests`
- `String msg`
- `Events testEvent`
From a **readability** and **clarity** perspective, we can improve some of these parameter names.

#### Opportunities for Rename Parameter Refactoring

- `testClass` → `testCaseClass`: To more clearly indicate that this class is a **test case** class.
- `tests` (of type `Events`) → `eventResults` or `testEvents`: This avoids confusion between test runner/test class and the events/results returned by execution.
- `msg` (of type `String`) → `expectedMessage`: To show that the string is the assertion message you're expecting.
- `testEvent` (of type `Events`) → `testEvents`: For better plurality and clarity.
- `methodName` remains fine, as does `listener` (clear with the annotation), and `stats` (callback parameter is standard).

With these improvements, the method signatures, e.g.:
```java
private static void assertFailingWithMessage(Events testEvent, String msg)
```
becomes
```java
private static void assertFailingWithMessage(Events testEvents, String expectedMessage)
```
Also, for
```java
private void assertMissingCloseMethod(Class<?> testClass, String methodName)
```
becomes
```java
private void assertMissingCloseMethod(Class<?> testCaseClass, String methodName)
```
And within the methods, variable names are updated accordingly.

---

## Refactored Code

```java
package org.junit.jupiter.engine.extension;

import static java.lang.StackWalker.Option.RETAIN_CLASS_REFERENCE;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatIllegalStateException;
import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;
import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_METHOD;
import static org.junit.platform.testkit.engine.EventConditions.finishedWithFailure;
import static org.junit.platform.testkit.engine.TestExecutionResultConditions.message;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.LogRecord;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.AutoClose;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.fixtures.TrackLogRecords;
import org.junit.jupiter.engine.AbstractJupiterTestEngineTests;
import org.junit.platform.commons.logging.LogRecordListener;
import org.junit.platform.testkit.engine.Events;

/**
 * Integration tests for {@link AutoClose @AutoClose} and the {@link AutoCloseExtension}.
 *
 * @since 5.11
 */
class AutoCloseTests extends AbstractJupiterTestEngineTests {

    private static final List<String> recorder = new ArrayList<>();

    @BeforeEach
    @AfterEach
    void resetTracking() {
        InstancePerClassTestCase.closed = false;
        recorder.clear();
    }

    @Test
    void blankCloseMethodName() {
        Class<?> testCaseClass = BlankCloseMethodNameTestCase.class;
        String expectedMessage = String.format("@AutoClose on field %s.field must specify a method name.",
                testCaseClass.getCanonicalName());
        Events testEvents = executeTestsForClass(testCaseClass).testEvents();
        assertFailingWithMessage(testEvents, expectedMessage);
    }

    @Test
    void primitiveTypeCannotBeClosed() {
        Class<?> testCaseClass = PrimitiveFieldTestCase.class;
        String expectedMessage = String.format("@AutoClose is not supported on primitive field %s.x.",
                testCaseClass.getCanonicalName());
        Events testEvents = executeTestsForClass(testCaseClass).testEvents();
        assertFailingWithMessage(testEvents, expectedMessage);
    }

    @Test
    void arrayCannotBeClosed() {
        Class<?> testCaseClass = ArrayFieldTestCase.class;
        String expectedMessage = String.format("@AutoClose is not supported on array field %s.x.", testCaseClass.getCanonicalName());
        Events testEvents = executeTestsForClass(testCaseClass).testEvents();
        assertFailingWithMessage(testEvents, expectedMessage);
    }

    @Test
    void nullCannotBeClosed(@TrackLogRecords LogRecordListener listener) {
        Class<?> testCaseClass = NullCloseableFieldTestCase.class;
        String expectedMessage = String.format("Cannot @AutoClose field %s.field because it is null.",
                testCaseClass.getCanonicalName());
        Events testEvents = executeTestsForClass(testCaseClass).testEvents();
        testEvents.assertStatistics(stats -> stats.succeeded(1).failed(0));
        assertThat(listener.stream(Level.WARNING)).map(LogRecord::getMessage).anyMatch(expectedMessage::equals);
    }

    @Test
    void noCloseMethod() {
        assertMissingCloseMethod(NoCloseMethodTestCase.class, "close");
    }

    @Test
    void noShutdownMethod() {
        assertMissingCloseMethod(NoShutdownMethodTestCase.class, "shutdown");
    }

    /**
     * Tests prerequisites for the {@link AutoCloseSpy} implementation.
     */
    @Test
    void spyPermitsOnlyASingleAction() {
        AutoCloseSpy spy = new AutoCloseSpy("preconditions");

        spy.close();

        assertThatIllegalStateException().isThrownBy(spy::run).withMessage("Already closed via close()");
        assertThatIllegalStateException().isThrownBy(spy::close).withMessage("Already closed via close()");
        assertThat(recorder).containsExactly("AutoCloseTests.preconditions.close()");
    }

    @Test
    void fieldsAreProperlyClosedWithInstancePerMethodTestClass() {
        Events testEvents = executeTestsForClass(InstancePerMethodTestCase.class).testEvents();
        testEvents.assertStatistics(stats -> stats.succeeded(2));
        assertThat(recorder).containsExactly(//
                // test1()
                "InstancePerMethodTestCase.runnable.run()", //
                "InstancePerMethodTestCase.closable.close()", //
                // test2()
                "InstancePerMethodTestCase.runnable.run()", //
                "InstancePerMethodTestCase.closable.close()", //
                // Class-level cleanup
                "InstancePerMethodTestCase.staticClosable.close()"//
        );
    }

    @Test
    void fieldsAreProperlyClosedWithInstancePerClassTestClass() {
        Events testEvents = executeTestsForClass(InstancePerClassTestCase.class).testEvents();
        testEvents.assertStatistics(stats -> stats.succeeded(2));
        assertThat(InstancePerClassTestCase.closed).isTrue();
    }

    @Test
    void fieldsAreProperlyClosedWithNestedTestClassesWithInstancePerMethod() {
        Events testEvents = executeTestsForClass(InstancePerMethodEnclosingTestCase.NestedTestCase.class).testEvents();
        testEvents.assertStatistics(stats -> stats.succeeded(1));
        assertThat(recorder).containsExactly(//
                "NestedTestCase.nestedClosable.close()", //
                "InstancePerMethodEnclosingTestCase.enclosingClosable.close()", //
                "NestedTestCase.nestedStaticClosable.close()", //
                "InstancePerMethodEnclosingTestCase.enclosingStaticClosable.close()"//
        );

        // Reset tracking
        resetTracking();

        testEvents = executeTestsForClass(InstancePerMethodEnclosingTestCase.class).testEvents();
        testEvents.assertStatistics(stats -> stats.succeeded(2));
        assertThat(recorder).containsExactly(//
                "InstancePerMethodEnclosingTestCase.enclosingClosable.close()", //
                "NestedTestCase.nestedClosable.close()", //
                "InstancePerMethodEnclosingTestCase.enclosingClosable.close()", //
                "NestedTestCase.nestedStaticClosable.close()", //
                "InstancePerMethodEnclosingTestCase.enclosingStaticClosable.close()" //
        );
    }

    @Test
    void fieldsAreProperlyClosedWithNestedTestClassesWithInstancePerClass() {
        // With test instance lifecycle "per class" mode, we actually expect the
        // same behavior for the closing of all fields when the nested test class
        // is run standalone AND when it's run along with its enclosing class.
        String[] expected = { //
                "NestedTestCase.nestedStaticClosable.close()", //
                "NestedTestCase.nestedClosable.close()", //
                "InstancePerClassEnclosingTestCase.enclosingStaticClosable.close()", //
                "InstancePerClassEnclosingTestCase.enclosingClosable.close()" //
        };

        Events testEvents = executeTestsForClass(InstancePerClassEnclosingTestCase.NestedTestCase.class).testEvents();
        testEvents.assertStatistics(stats -> stats.succeeded(1));
        assertThat(recorder).containsExactly(expected);

        // Reset tracking
        resetTracking();

        testEvents = executeTestsForClass(InstancePerClassEnclosingTestCase.class).testEvents();
        testEvents.assertStatistics(stats -> stats.succeeded(2));
        assertThat(recorder).containsExactly(expected);
    }

    @Test
    void fieldsAreProperlyClosedWithinTestClassHierarchy() {
        Events testEvents = executeTestsForClass(SuperTestCase.class).testEvents();
        testEvents.assertStatistics(stats -> stats.succeeded(1));
        assertThat(recorder).containsExactly(//
                // superTest()
                "SuperTestCase.superClosable.close()", //
                // Class-level cleanup
                "SuperTestCase.superStaticClosable.close()" //
        );

        // Reset tracking
        resetTracking();

        testEvents = executeTestsForClass(SubTestCase.class).testEvents();
        testEvents.assertStatistics(stats -> stats.succeeded(2));
        assertThat(recorder).containsExactly(//
                // superTest()
                "SubTestCase.subClosable.close()", //
                "SuperTestCase.superClosable.close()", //
                // subTest()
                "SubTestCase.subClosable.close()", //
                "SuperTestCase.superClosable.close()", //
                // Class-level cleanup in subclass
                "SubTestCase.subStaticClosable.close()", //
                // Class-level cleanup in superclass
                "SuperTestCase.superStaticClosable.close()" //
        );
    }

    private static void assertFailingWithMessage(Events testEvents, String expectedMessage) {
        testEvents//
                .assertStatistics(stats -> stats.failed(1))//
                .assertThatEvents().haveExactly(1, finishedWithFailure(message(expectedMessage)));
    }

    private void assertMissingCloseMethod(Class<?> testCaseClass, String methodName) {
        String expectedMessage = String.format("Cannot @AutoClose field %s.field because %s does not define method %s().",
                testCaseClass.getCanonicalName(), String.class.getName(), methodName);
        Events testEvents = executeTestsForClass(testCaseClass).testEvents();
        assertFailingWithMessage(testEvents, expectedMessage);
    }

    interface TestInterface {

        @Test
        default void test() {
        }
    }

    static class BlankCloseMethodNameTestCase implements TestInterface {

        @AutoClose("")
        final String field = "blank";
    }

    static class PrimitiveFieldTestCase implements TestInterface {

        @AutoClose
        final int x = 0;
    }

    static class ArrayFieldTestCase implements TestInterface {

        @AutoClose
        final int[] x = {};
    }

    static class NullCloseableFieldTestCase implements TestInterface {

        @AutoClose
        final AutoCloseable field = null;
    }

    static class NoCloseMethodTestCase implements TestInterface {

        @AutoClose
        private final String field = "";
    }

    @Retention(RetentionPolicy.RUNTIME)
    @AutoClose("shutdown")
    @interface AutoShutdown {
    }

    static class NoShutdownMethodTestCase implements TestInterface {

        @AutoShutdown
        private final String field = "";
    }

    @TestInstance(PER_METHOD)
    static class InstancePerMethodTestCase {

        @AutoClose
        private static AutoCloseable staticClosable;

        @AutoClose
        private static final AutoCloseable nullStatic = null;

        @AutoClose
        private final AutoCloseable closable = new AutoCloseSpy("closable");

        @AutoClose("   run      ") // intentionally contains extra whitespace.
        private final Runnable runnable = new AutoCloseSpy("runnable");

        @AutoClose
        private final AutoCloseable nullField = null;

        @BeforeAll
        static void setup() {
            staticClosable = new AutoCloseSpy("staticClosable");
        }

        @Test
        void test1() {
        }

        @Test
        void test2() {
        }
    }

    @TestInstance(PER_CLASS)
    static class InstancePerClassTestCase {

        static boolean closed = false;

        @AutoClose
        final AutoCloseable field = () -> closed = true;

        @Test
        void test1() {
            assertThat(closed).isFalse();
        }

        @Test
        void test2() {
            assertThat(closed).isFalse();
        }
    }

    @TestInstance(PER_METHOD)
    static class InstancePerMethodEnclosingTestCase implements TestInterface {

        @AutoClose
        static AutoCloseSpy enclosingStaticClosable;

        @AutoClose
        final AutoCloseable enclosingClosable = new AutoCloseSpy("enclosingClosable");

        @BeforeAll
        static void setup() {
            enclosingStaticClosable = new AutoCloseSpy("enclosingStaticClosable");
        }

        @Nested
        @TestInstance(PER_METHOD)
        class NestedTestCase implements TestInterface {

            @AutoClose
            static AutoCloseSpy nestedStaticClosable;

            @AutoClose
            final AutoCloseable nestedClosable = new AutoCloseSpy("nestedClosable");

            @BeforeAll
            static void setup() {
                nestedStaticClosable = new AutoCloseSpy("nestedStaticClosable");
            }
        }
    }

    @TestInstance(PER_CLASS)
    static class InstancePerClassEnclosingTestCase implements TestInterface {

        @AutoClose
        static AutoCloseSpy enclosingStaticClosable;

        @AutoClose
        final AutoCloseable enclosingClosable = new AutoCloseSpy("enclosingClosable");

        @BeforeAll
        static void setup() {
            enclosingStaticClosable = new AutoCloseSpy("enclosingStaticClosable");
        }

        @Nested
        @TestInstance(PER_CLASS)
        class NestedTestCase implements TestInterface {

            @AutoClose
            static AutoCloseSpy nestedStaticClosable;

            @AutoClose
            final AutoCloseable nestedClosable = new AutoCloseSpy("nestedClosable");

            @BeforeAll
            static void setup() {
                nestedStaticClosable = new AutoCloseSpy("nestedStaticClosable");
            }
        }
    }

    static class SuperTestCase {

        @AutoClose
        static AutoCloseable superStaticClosable;

        @AutoClose
        final AutoCloseable superClosable = new AutoCloseSpy("superClosable");

        @BeforeAll
        // WARNING: if this method is named setup() AND the @BeforeAll method in
        // SubTestCase is also named setup(), the latter will "hide" the former.
        static void superSetup() {
            superStaticClosable = new AutoCloseSpy("superStaticClosable");
        }

        @Test
        void superTest() {
        }
    }

    static class SubTestCase extends SuperTestCase {

        @AutoClose
        static AutoCloseable subStaticClosable;

        @AutoClose
        final AutoCloseable subClosable = new AutoCloseSpy("subClosable");

        @BeforeAll
        static void subSetup() {
            subStaticClosable = new AutoCloseSpy("subStaticClosable");
        }

        @Test
        void subTest() {
        }
    }

    static class AutoCloseSpy implements AutoCloseable, Runnable {

        private final String prefix;
        private String invokedMethod = null;

        AutoCloseSpy(String prefix) {
            Class<?> callerClass = StackWalker.getInstance(RETAIN_CLASS_REFERENCE).getCallerClass();
            this.prefix = callerClass.getSimpleName() + "." + prefix + ".";
        }

        @Override
        public void run() {
            recordInvocation("run()");
        }

        @Override
        public void close() {
            recordInvocation("close()");
        }

        private void recordInvocation(String methodName) {
            if (this.invokedMethod != null) {
                throw new IllegalStateException("Already closed via " + this.invokedMethod);
            }
            this.invokedMethod = methodName;
            recorder.add(this.prefix + this.invokedMethod);
        }
    }

}
```

---

**Summary:**
- All parameter renames clarify intentions and improve code readability.
- No change in logic or test coverage.
- Most identifiers outside method parameters were already clear.

Compiles
Tests pass