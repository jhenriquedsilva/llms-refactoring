package org.apache.lucene.queryparser.flexible.standard.parser;

import java.util.Locale;

import org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages;
import org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax;
import org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence;
import org.apache.lucene.queryparser.flexible.messages.MessageImpl;

public class EscapeQuerySyntaxImpl implements EscapeQuerySyntax {

    private static final char[] wildcardChars = {'*', '?'};
    private static final String[] escapableTermExtraFirstChars = {"+", "-", "@"};
    private static final String[] escapableTermChars = {"\"", "<", ">", "=", "!", "(", ")", "^", "[", "{", ":", "]", "}", "~", "/"};
    private static final String[] escapableQuotedChars = {"\""};
    private static final String[] escapableWhiteChars = {" ", "\t", "\n", "\r", "\f", "\b", "ã€€"};
    private static final String[] escapableWordTokens = {"AND", "OR", "NOT", "TO", "WITHIN", "SENTENCE", "PARAGRAPH", "INORDER"};

    private static CharSequence escapeTermChars(CharSequence str, Locale locale) {
        if (str == null || str.isEmpty()) return str;
        CharSequence buffer = str;
        for (String escapableTermChar : escapableTermChars) {
            buffer = replaceIgnoreCase(buffer, escapableTermChar.toLowerCase(locale), "\\", locale);
        }
        for (String escapableTermExtraFirstChar : escapableTermExtraFirstChars) {
            if (buffer.charAt(0) == escapableTermExtraFirstChar.charAt(0)) {
                buffer = "\\" + buffer;
                break;
            }
        }
        return buffer;
    }

    private static CharSequence escapeQuotedString(CharSequence str, Locale locale) {
        if (str == null || str.isEmpty()) return str;
        CharSequence buffer = str;
        for (String escapableQuotedChar : escapableQuotedChars) {
            buffer = replaceIgnoreCase(buffer, escapableQuotedChar.toLowerCase(locale), "\\", locale);
        }
        return buffer;
    }

    private static CharSequence escapeTermToken(CharSequence term, Locale locale) {
        if (term == null || term.isEmpty()) return term;
        term = escapeTermChars(term, locale);
        term = escapeWhiteChars(term, locale);
        for (String escapableWordToken : escapableWordTokens) {
            if (escapableWordToken.equalsIgnoreCase(term.toString())) return "\\" + term;
        }
        return term;
    }

    private static CharSequence replaceIgnoreCase(CharSequence string, CharSequence sequence1, CharSequence escapeChar, Locale locale) {
        if (escapeChar == null || sequence1 == null || string == null) throw new NullPointerException();
        int count = string.length();
        int sequence1Length = sequence1.length();
        if (sequence1Length == 0) {
            StringBuilder result = new StringBuilder(count * (1 + escapeChar.length()));
            for (int i = 0; i < count; i++) {
                result.append(escapeChar);
                result.append(string.charAt(i));
            }
            return result;
        }
        String lowercase = string.toString().toLowerCase(locale);
        StringBuilder result = new StringBuilder();
        char first = sequence1.charAt(0);
        int start = 0, copyStart = 0, firstIndex;
        while (start < count) {
            if ((firstIndex = lowercase.indexOf(first, start)) == -1) break;
            boolean found = true;
            if (sequence1.length() > 1) {
                if (firstIndex + sequence1Length > count) break;
                for (int i = 1; i < sequence1Length; i++) {
                    if (lowercase.charAt(firstIndex + i) != sequence1.charAt(i)) {
                        found = false;
                        break;
                    }
                }
            }
            if (found) {
                result.append(string, copyStart, firstIndex);
                result.append(escapeChar);
                result.append(string, firstIndex, firstIndex + sequence1Length);
                copyStart = start = firstIndex + sequence1Length;
            } else {
                start = firstIndex + 1;
            }
        }
        if (result.isEmpty() && copyStart == 0) return string;
        result.append(string, copyStart, string.length());
        return result;
    }

    private static CharSequence escapeWhiteChars(CharSequence str, Locale locale) {
        if (str == null || str.isEmpty()) return str;
        CharSequence buffer = str;
        for (String escapableWhiteChar : escapableWhiteChars) {
            buffer = replaceIgnoreCase(buffer, escapableWhiteChar.toLowerCase(locale), "\\", locale);
        }
        return buffer;
    }

    @Override
    public CharSequence escape(CharSequence text, Locale locale, Type type) {
        if (text == null || text.isEmpty()) return text;
        if (text instanceof UnescapedCharSequence) {
            text = ((UnescapedCharSequence) text).toStringEscaped(wildcardChars);
        } else {
            text = new UnescapedCharSequence(text).toStringEscaped(wildcardChars);
        }
        if (type == Type.STRING) {
            return escapeQuotedString(text, locale);
        } else {
            return escapeTermToken(text, locale);
        }
    }

    public static UnescapedCharSequence discardEscapeChar(CharSequence input) throws ParseException {
        char[] output = new char[input.length()];
        boolean[] wasEscaped = new boolean[input.length()];
        int length = 0;
        boolean lastCharWasEscapeChar = false;
        int codePointMultiplier = 0;
        int codePoint = 0;
        for (int i = 0; i < input.length(); i++) {
            char curChar = input.charAt(i);
            if (codePointMultiplier > 0) {
                codePoint += hexCharToInt(curChar) * codePointMultiplier;
                codePointMultiplier >>>= 4;
                if (codePointMultiplier == 0) {
                    output[length++] = (char) codePoint;
                    codePoint = 0;
                }
            } else if (lastCharWasEscapeChar) {
                if (curChar == 'u') {
                    codePointMultiplier = 16 * 16 * 16;
                } else {
                    output[length] = curChar;
                    wasEscaped[length] = true;
                    length++;
                }
                lastCharWasEscapeChar = false;
            } else {
                if (curChar == '\\') {
                    lastCharWasEscapeChar = true;
                } else {
                    output[length] = curChar;
                    length++;
                }
            }
        }
        if (codePointMultiplier > 0) {
            throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION));
        }
        if (lastCharWasEscapeChar) {
            throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_ESCAPE_CHARACTER));
        }
        return new UnescapedCharSequence(output, wasEscaped, 0, length);
    }

    private static int hexCharToInt(char c) throws ParseException {
        if ('0' <= c && c <= '9') {
            return c - '0';
        } else if ('a' <= c && c <= 'f') {
            return c - 'a' + 10;
        } else if ('A' <= c && c <= 'F') {
            return c - 'A' + 10;
        } else {
            throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE, c));
        }
    }
}