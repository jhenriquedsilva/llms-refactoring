01-05-2025, 15:16

Yes, there **are** refactoring opportunities, especially with the parameter names in the constructor of the `DataClass` class, where boolean and optional parameters use non-descriptive or inconsistent identifiers. Using clear, descriptive, and consistent parameter names improves code readability and maintainability.

#### Identified Issues:
- In `DataClass`, the boolean constructor parameter `p2` does not match the field name `param2` (inconsistency with the field and its accessor).
- The Optional parameter `optionalParam` could be named `optionalParam3` for better clarity, matching its purpose and correspondence to the field `param3`.

#### Refactored Parameter Names:
- `boolean p2`  →  `boolean param2`
- `Optional<Integer> optionalParam`  →  `Optional<Integer> optionalParam3`

#### Refactored `@ConstructorProperties` annotation:
- The string for the third property in the annotation should match the parameter name, so `optionalParam` → `optionalParam3`.

Below is the fully refactored class:

```java
package org.springframework.validation;

import java.beans.ConstructorProperties;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import jakarta.validation.constraints.NotNull;
import org.junit.jupiter.api.Test;

import org.springframework.core.ResolvableType;
import org.springframework.format.support.DefaultFormattingConversionService;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Unit tests for {@link DataBinder} with constructor binding.
 *
 * @author Rossen Stoyanchev
 */
public class DataBinderConstructTests {

    @Test
    void dataClassBinding() {
        MapValueResolver valueResolver = new MapValueResolver(Map.of("param1", "value1", "param2", "true"));
        DataBinder binder = initDataBinder(DataClass.class);
        binder.construct(valueResolver);

        DataClass dataClass = getTarget(binder);
        assertThat(dataClass.param1()).isEqualTo("value1");
        assertThat(dataClass.param2()).isEqualTo(true);
        assertThat(dataClass.param3()).isEqualTo(0);
    }

    @Test
    void dataClassBindingWithOptionalParameter() {
        MapValueResolver valueResolver =
                new MapValueResolver(Map.of("param1", "value1", "param2", "true", "optionalParam3", "8"));

        DataBinder binder = initDataBinder(DataClass.class);
        binder.construct(valueResolver);

        DataClass dataClass = getTarget(binder);
        assertThat(dataClass.param1()).isEqualTo("value1");
        assertThat(dataClass.param2()).isEqualTo(true);
        assertThat(dataClass.param3()).isEqualTo(8);
    }

    @Test
    void dataClassBindingWithMissingParameter() {
        MapValueResolver valueResolver = new MapValueResolver(Map.of("param1", "value1"));
        DataBinder binder = initDataBinder(DataClass.class);
        binder.construct(valueResolver);

        BindingResult bindingResult = binder.getBindingResult();
        assertThat(bindingResult.getAllErrors()).hasSize(1);
        assertThat(bindingResult.getFieldValue("param1")).isEqualTo("value1");
        assertThat(bindingResult.getFieldValue("param2")).isNull();
        assertThat(bindingResult.getFieldValue("param3")).isNull();
    }

    @Test // gh-31821
    void dataClassBindingWithNestedOptionalParameterWithMissingParameter() {
        MapValueResolver valueResolver = new MapValueResolver(Map.of("param1", "value1"));
        DataBinder binder = initDataBinder(NestedDataClass.class);
        binder.construct(valueResolver);

        NestedDataClass dataClass = getTarget(binder);
        assertThat(dataClass.param1()).isEqualTo("value1");
        assertThat(dataClass.nestedParam2()).isNull();
    }

    @Test
    void dataClassBindingWithConversionError() {
        MapValueResolver valueResolver = new MapValueResolver(Map.of("param1", "value1", "param2", "x"));
        DataBinder binder = initDataBinder(DataClass.class);
        binder.construct(valueResolver);

        BindingResult bindingResult = binder.getBindingResult();
        assertThat(bindingResult.getAllErrors()).hasSize(1);
        assertThat(bindingResult.getFieldValue("param1")).isEqualTo("value1");
        assertThat(bindingResult.getFieldValue("param2")).isEqualTo("x");
        assertThat(bindingResult.getFieldValue("param3")).isNull();
    }

    @SuppressWarnings("SameParameterValue")
    private static DataBinder initDataBinder(Class<?> targetType) {
        DataBinder binder = new DataBinder(null);
        binder.setTargetType(ResolvableType.forClass(targetType));
        binder.setConversionService(new DefaultFormattingConversionService());
        return binder;
    }

    @SuppressWarnings("unchecked")
    private static <T> T getTarget(DataBinder dataBinder) {
        assertThat(dataBinder.getBindingResult().getAllErrors()).isEmpty();
        Object target = dataBinder.getTarget();
        assertThat(target).isNotNull();
        return (T) target;
    }


    private static class DataClass {

        @NotNull
        private final String param1;

        private final boolean param2;

        private int param3;

        @ConstructorProperties({"param1", "param2", "optionalParam3"})
        DataClass(String param1, boolean param2, Optional<Integer> optionalParam3) {
            this.param1 = param1;
            this.param2 = param2;
            Assert.notNull(optionalParam3, "Optional must not be null");
            optionalParam3.ifPresent(integer -> this.param3 = integer);
        }

        public String param1() {
            return this.param1;
        }

        public boolean param2() {
            return this.param2;
        }

        public int param3() {
            return this.param3;
        }
    }


    private static class NestedDataClass {

        private final String param1;

        @Nullable
        private final DataClass nestedParam2;

        public NestedDataClass(String param1, @Nullable DataClass nestedParam2) {
            this.param1 = param1;
            this.nestedParam2 = nestedParam2;
        }

        public String param1() {
            return this.param1;
        }

        @Nullable
        public DataClass nestedParam2() {
            return this.nestedParam2;
        }
    }


    private static class MapValueResolver implements DataBinder.ValueResolver {

        private final Map<String, Object> map;

        private MapValueResolver(Map<String, Object> values) {
            this.map = values;
        }

        @Override
        public Object resolveValue(String name, Class<?> type) {
            return map.get(name);
        }

        @Override
        public Set<String> getNames() {
            return this.map.keySet();
        }
    }

}
```

### **Summary**
- The parameter `p2` has been renamed to `param2` for clarity and consistency.
- The parameter `optionalParam` has been renamed to `optionalParam3`.
- The annotation `@ConstructorProperties` and test Map keys have also been updated accordingly.

**This version improves code readability, maintainability, and reduces the potential for confusion.**