package org.apache.commons.io.input;

import static org.apache.commons.io.IOUtils.EOF;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

public class ClosedInputStreamTest {

    @Test
    public void testRead() throws Exception {
        assertReadEqualsEof(new ClosedInputStream(), "read()");
    }

    @Test
    public void testReadArray() throws Exception {
        assertReadArrayEqualsEof(new ClosedInputStream());
    }

    @Test
    public void testReadArrayIndex() throws Exception {
        assertReadArrayIndexEqualsEof(new ClosedInputStream());
    }

    @Test
    public void testSingleton() throws Exception {
        try (@SuppressWarnings("deprecation") ClosedInputStream cis = ClosedInputStream.CLOSED_INPUT_STREAM) {
            assertEquals(EOF, cis.read(), "read()");
        }
        assertReadEqualsEof(ClosedInputStream.INSTANCE, "read()");
    }

    private void assertReadEqualsEof(ClosedInputStream cis, String message) throws Exception {
        try (ClosedInputStream ignored = cis) {
            assertEquals(EOF, ignored.read(), message);
        }
    }

    private void assertReadArrayEqualsEof(ClosedInputStream cis) throws Exception {
        try (ClosedInputStream ignored = cis) {
            assertEquals(EOF, ignored.read(new byte[4096]));
            assertEquals(EOF, ignored.read(new byte[1]));
            assertEquals(EOF, ignored.read(new byte[0]));
        }
    }

    private void assertReadArrayIndexEqualsEof(ClosedInputStream cis) throws Exception {
        try (ClosedInputStream ignored = cis) {
            assertEquals(EOF, ignored.read(new byte[4096], 0, 1));
            assertEquals(EOF, ignored.read(new byte[1], 0, 1));
            assertEquals(EOF, ignored.read(new byte[0], 0, 0));
        }
    }
}