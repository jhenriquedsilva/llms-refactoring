26-04-2025, 09:24
Yes, **extract method refactoring** can help here. Notice how multiple methods add a contributor to `fieldModelContributor` via patterns like:

```java
fieldModelContributor.add( c -> c.vectorTypeOptionsStep().XXX( arg ) );
```

And one method does:

```java
fieldModelContributor.add( c -> c.indexNullAs( indexNullAs ) );
```

To eliminate duplication, you can extract a private utility method for the repeated pattern. Hereâ€™s the **refactored code**:

---

```java
package org.hibernate.search.mapper.pojo.mapping.definition.programmatic.impl;

import org.hibernate.search.engine.backend.types.Projectable;
import org.hibernate.search.engine.backend.types.Searchable;
import org.hibernate.search.engine.backend.types.VectorSimilarity;
import org.hibernate.search.mapper.pojo.bridge.binding.spi.FieldModelContributorContext;
import org.hibernate.search.mapper.pojo.extractor.mapping.programmatic.ContainerExtractorPath;
import org.hibernate.search.mapper.pojo.mapping.building.spi.PojoPropertyMetadataContributor;
import org.hibernate.search.mapper.pojo.mapping.definition.programmatic.PropertyMappingStep;
import org.hibernate.search.mapper.pojo.mapping.definition.programmatic.PropertyMappingVectorFieldStep;

import java.util.function.Consumer;

class PropertyMappingVectorFieldStepImpl extends AbstractPropertyMappingFieldOptionsStep<PropertyMappingVectorFieldStepImpl>
        implements PropertyMappingVectorFieldStep, PojoPropertyMetadataContributor {

    PropertyMappingVectorFieldStepImpl(PropertyMappingStep parent, int dimension, String relativeFieldName) {
        super(parent, relativeFieldName, FieldModelContributorContext::vectorTypeOptionsStep);
        extractors(ContainerExtractorPath.noExtractors());
    }

    @Override
    public PropertyMappingVectorFieldStep projectable(Projectable projectable) {
        addToVectorOptionsStep(c -> c.projectable(projectable));
        return this;
    }

    @Override
    public PropertyMappingVectorFieldStep searchable(Searchable searchable) {
        return this;
    }

    @Override
    public PropertyMappingVectorFieldStep vectorSimilarity(VectorSimilarity vectorSimilarity) {
        addToVectorOptionsStep(c -> c.vectorSimilarity(vectorSimilarity));
        return this;
    }

    @Override
    public PropertyMappingVectorFieldStep beamWidth(int beamWidth) {
        addToVectorOptionsStep(c -> c.beamWidth(beamWidth));
        return this;
    }

    @Override
    public PropertyMappingVectorFieldStep maxConnections(int maxConnections) {
        addToVectorOptionsStep(c -> c.maxConnections(maxConnections));
        return this;
    }

    @Override
    public PropertyMappingVectorFieldStep indexNullAs(String indexNullAs) {
        fieldModelContributor.add(c -> c.indexNullAs(indexNullAs));
        return this;
    }

    // --- Extracted utility method to reduce duplication ---
    private void addToVectorOptionsStep(Consumer<FieldModelContributorContext.VectorTypeOptionsStep> action) {
        fieldModelContributor.add(c -> action.accept(c.vectorTypeOptionsStep()));
    }
}
```

---

### **Summary of Changes**
- Introduced `addToVectorOptionsStep`, which accepts a lambda operating on the `VectorTypeOptionsStep`.
- Methods dealing with `.vectorTypeOptionsStep().XXX()` now call this utility, improving DRYness, maintainability, and readability.
- `indexNullAs` left as-is, since it does not fit the pattern.

**This improves code clarity and maintainability by consolidating the repetitive pattern.**

Levenshtein edit-distance: 449