01-05-2025, 10:53

**Analysis**

The main focus is on determining if any of the parameter names in method/constructor signatures are of low quality or unclear, and can benefit from a "Rename Parameter" refactoring. Let's consider the code:

### Constructor
```java
public DateFormat(
    Source source,
    @Param(optional = true, name = "format", type = { "keyword" }, description = "A valid date pattern") Expression first,
    @Param(name = "date", type = { "date" }, description = "Date expression") Expression date,
    Configuration configuration
)
```

Here, `first` is not descriptiveâ€”it could mean either `format` (when `date` is not present) or `date` (when only one parameter), but the use of `first` and `date` is confusing in the constructor, especially considering which one is the actual date and which is the format string.

This confusion propagates in a few places:
- In `replaceChildren`, `newChildren.get(0)` is passed as `first` and `newChildren.get(1)` as `date`.
- In `info`, `first` is set to either `format` or `field`.

### Recommendation

**Rename `first` to `formatOrField` in the constructor and all usage points.**

This makes it clear that this argument is context sensitive and can be either the `format` (if a second param follows) or the `field` (date) value, matching legacy code and overload behaviors usually found in similar Elasticsearch signatures.

Alternatively, if you want to be even more expressive, you could use two constructors:
- One with just `date`
- One with `format` and `date`
But to minimize impact per your guidelines, let's just rename and clarify.

---

## Refactored Code

```java
package org.elasticsearch.xpack.esql.expression.function.scalar.date;

import org.apache.lucene.util.BytesRef;
import org.elasticsearch.common.time.DateFormatter;
import org.elasticsearch.compute.ann.Evaluator;
import org.elasticsearch.compute.ann.Fixed;
import org.elasticsearch.compute.operator.EvalOperator.ExpressionEvaluator;
import org.elasticsearch.xpack.esql.evaluator.mapper.EvaluatorMapper;
import org.elasticsearch.xpack.esql.expression.function.FunctionInfo;
import org.elasticsearch.xpack.esql.expression.function.Param;
import org.elasticsearch.xpack.esql.session.EsqlConfiguration;
import org.elasticsearch.xpack.ql.expression.Expression;
import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;
import org.elasticsearch.xpack.ql.expression.function.scalar.ConfigurationFunction;
import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;
import org.elasticsearch.xpack.ql.session.Configuration;
import org.elasticsearch.xpack.ql.tree.NodeInfo;
import org.elasticsearch.xpack.ql.tree.Source;
import org.elasticsearch.xpack.ql.type.DataType;
import org.elasticsearch.xpack.ql.type.DataTypes;

import java.util.List;
import java.util.Locale;
import java.util.function.Function;

import static org.elasticsearch.xpack.ql.expression.TypeResolutions.ParamOrdinal.FIRST;
import static org.elasticsearch.xpack.ql.expression.TypeResolutions.ParamOrdinal.SECOND;
import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isDate;
import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;
import static org.elasticsearch.xpack.ql.util.DateUtils.UTC_DATE_TIME_FORMATTER;

public class DateFormat extends ConfigurationFunction implements OptionalArgument, EvaluatorMapper {

    private final Expression field;
    private final Expression format;

    @FunctionInfo(returnType = "keyword", description = "Returns a string representation of a date, in the provided format.")
    public DateFormat(
            Source source,
            @Param(optional = true, name = "format", type = { "keyword" }, description = "A valid date pattern") Expression formatOrField,
            @Param(name = "date", type = { "date" }, description = "Date expression") Expression date,
            Configuration configuration
    ) {
        super(source, date != null ? List.of(formatOrField, date) : List.of(formatOrField), configuration);
        this.field = date != null ? date : formatOrField;
        this.format = date != null ? formatOrField : null;
    }

    @Override
    public DataType dataType() {
        return DataTypes.KEYWORD;
    }

    @Override
    protected TypeResolution resolveType() {
        if (childrenResolved() == false) {
            return new TypeResolution("Unresolved children");
        }

        TypeResolution resolution = isDate(field, sourceText(), format == null ? FIRST : SECOND);
        if (resolution.unresolved()) {
            return resolution;
        }
        if (format != null) {
            resolution = isStringAndExact(format, sourceText(), FIRST);
            if (resolution.unresolved()) {
                return resolution;
            }
        }

        return TypeResolution.TYPE_RESOLVED;
    }

    @Override
    public boolean foldable() {
        return field.foldable() && (format == null || format.foldable());
    }

    @Override
    public Object fold() {
        return EvaluatorMapper.super.fold();
    }

    @Evaluator(extraName = "Constant")
    static BytesRef process(long val, @Fixed DateFormatter formatter) {
        return new BytesRef(formatter.formatMillis(val));
    }

    @Evaluator
    static BytesRef process(long val, BytesRef formatter, @Fixed Locale locale) {
        return process(val, toFormatter(formatter, locale));
    }

    @Override
    public ExpressionEvaluator.Factory toEvaluator(Function<Expression, ExpressionEvaluator.Factory> toEvaluator) {
        var fieldEvaluator = toEvaluator.apply(field);
        if (format == null) {
            return dvrCtx -> new DateFormatConstantEvaluator(source(), fieldEvaluator.get(dvrCtx), UTC_DATE_TIME_FORMATTER, dvrCtx);
        }
        if (format.dataType() != DataTypes.KEYWORD) {
            throw new IllegalArgumentException("unsupported data type for format [" + format.dataType() + "]");
        }
        if (format.foldable()) {
            DateFormatter formatter = toFormatter(format.fold(), ((EsqlConfiguration) configuration()).locale());
            return dvrCtx -> new DateFormatConstantEvaluator(source(), fieldEvaluator.get(dvrCtx), formatter, dvrCtx);
        }
        var formatEvaluator = toEvaluator.apply(format);
        return dvrCtx -> new DateFormatEvaluator(
                source(),
                fieldEvaluator.get(dvrCtx),
                formatEvaluator.get(dvrCtx),
                ((EsqlConfiguration) configuration()).locale(),
                dvrCtx
        );
    }

    private static DateFormatter toFormatter(Object format, Locale locale) {
        DateFormatter result = format == null ? UTC_DATE_TIME_FORMATTER : DateFormatter.forPattern(((BytesRef) format).utf8ToString());
        return result.withLocale(locale);
    }

    @Override
    public Expression replaceChildren(List<Expression> newChildren) {
        return new DateFormat(source(), newChildren.get(0), newChildren.size() > 1 ? newChildren.get(1) : null, configuration());
    }

    @Override
    protected NodeInfo<? extends Expression> info() {
        Expression firstArgument = format != null ? format : field;
        Expression secondArgument = format != null ? field : null;
        return NodeInfo.create(this, DateFormat::new, firstArgument, secondArgument, configuration());
    }

    @Override
    public ScriptTemplate asScript() {
        throw new UnsupportedOperationException("functions do not support scripting");
    }
}
```

**Summary of changes:**
- The constructor's parameter `first` was renamed to `formatOrField`, and all usages in the class and overridden methods (`replaceChildren`, `info`) have been updated accordingly.
- Local variables (`first`/`second`) in `info()` were renamed to `firstArgument`/`secondArgument` for clarity.

**Rationale:**
This makes the purpose/meaning of parameters clear, improves maintainability, and eliminates confusion about the parameter roles in this context.
