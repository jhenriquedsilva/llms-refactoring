package org.hibernate.id.insert;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.hibernate.dialect.Dialect;
import org.hibernate.engine.spi.SessionFactoryImplementor;
import org.hibernate.engine.spi.SharedSessionContractImplementor;
import org.hibernate.generator.EventType;
import org.hibernate.generator.values.GeneratedValueBasicResultBuilder;
import org.hibernate.id.PostInsertIdentityPersister;
import org.hibernate.jdbc.Expectation;
import org.hibernate.metamodel.mapping.EntityRowIdMapping;
import org.hibernate.persister.entity.EntityPersister;
import org.hibernate.sql.model.ast.builder.TableInsertBuilderStandard;
import org.hibernate.sql.model.ast.builder.TableMutationBuilder;
import org.hibernate.type.Type;

import static org.hibernate.generator.values.internal.GeneratedValuesHelper.getActualGeneratedModelPart;

public class UniqueKeySelectingDelegate extends AbstractSelectingDelegate {
    private final String[] uniqueKeyProperties;
    private final Type[] uniqueKeyPropertyTypes;
    private final String selectByUniqueKeySql;

    @Deprecated(forRemoval = true, since = "6.5")
    public UniqueKeySelectingDelegate(PostInsertIdentityPersister persister, Dialect dialect, String[] uniqueKeyProperties) {
        this(persister, uniqueKeyProperties, EventType.INSERT);
    }

    public UniqueKeySelectingDelegate(EntityPersister persister, String[] uniqueKeyProperties, EventType timing) {
        super(persister, timing, true, true);
        this.uniqueKeyProperties = uniqueKeyProperties;
        uniqueKeyPropertyTypes = new Type[uniqueKeyProperties.length];
        for (int i = 0; i < uniqueKeyProperties.length; i++) {
            uniqueKeyPropertyTypes[i] = persister.getPropertyType(uniqueKeyProperties[i]);
        }
        final EntityRowIdMapping rowIdMapping = persister.getRowIdMapping();
        if (!persister.isIdentifierAssignedByInsert() || persister.getInsertGeneratedProperties().size() > 1 || rowIdMapping != null) {
            final List<GeneratedValueBasicResultBuilder> resultBuilders = jdbcValuesMappingProducer.getResultBuilders();
            final List<String> columnNames = new ArrayList<>(resultBuilders.size());
            for (GeneratedValueBasicResultBuilder resultBuilder : resultBuilders) {
                columnNames.add(getActualGeneratedModelPart(resultBuilder.getModelPart()).getSelectionExpression());
            }
            selectByUniqueKeySql = persister.getSelectByUniqueKeyString(uniqueKeyProperties, columnNames.toArray(new String[0]));
        } else {
            selectByUniqueKeySql = persister.getSelectByUniqueKeyString(uniqueKeyProperties);
        }
    }

    protected String getSelectSQL() {
        return selectByUniqueKeySql;
    }

    @Override
    public TableMutationBuilder<?> createTableMutationBuilder(Expectation expectation, SessionFactoryImplementor factory) {
        return new TableInsertBuilderStandard(persister, persister.getIdentifierTableMapping(), factory);
    }

    protected void bindParameters(Object entity, PreparedStatement ps, SharedSessionContractImplementor session) throws SQLException {
        int index = 1;
        for (int i = 0; i < uniqueKeyProperties.length; i++) {
            uniqueKeyPropertyTypes[i].nullSafeSet(ps, persister.getPropertyValue(entity, uniqueKeyProperties[i]), index, session);
            index += uniqueKeyPropertyTypes[i].getColumnSpan(session.getFactory());
        }
    }
}