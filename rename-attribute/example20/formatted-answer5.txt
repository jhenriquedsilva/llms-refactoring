package org.springframework.core.annotation;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.core.BridgeMethodResolver;
import org.springframework.core.MethodParameter;
import org.springframework.core.ResolvableType;
import org.springframework.lang.NonNull;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.ObjectUtils;
import org.springframework.util.ReflectionUtils;
import org.springframework.util.StringUtils;

public class AnnotatedMethod {

    private final Method method;

    private final Method bridgedMethod;

    private final MethodParameter[] parameters;

    @Nullable
    private volatile List<Annotation[][]> inheritedInterfaceParameterAnnotationsList;

    public AnnotatedMethod(Method method) {
        Assert.notNull(method, "Method is required");
        this.method = method;
        this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method);
        ReflectionUtils.makeAccessible(this.bridgedMethod);
        this.parameters = initMethodParameters();
    }

    protected AnnotatedMethod(AnnotatedMethod annotatedMethod) {
        Assert.notNull(annotatedMethod, "AnnotatedMethod is required");
        this.method = annotatedMethod.method;
        this.bridgedMethod = annotatedMethod.bridgedMethod;
        this.parameters = annotatedMethod.parameters;
        this.inheritedInterfaceParameterAnnotationsList = annotatedMethod.inheritedInterfaceParameterAnnotationsList;
    }

    public final Method getMethod() {
        return this.method;
    }

    protected final Method getBridgedMethod() {
        return this.bridgedMethod;
    }

    protected Class<?> getContainingClass() {
        return this.method.getDeclaringClass();
    }

    public final MethodParameter[] getMethodParameters() {
        return this.parameters;
    }

    private MethodParameter[] initMethodParameters() {
        int parameterCount = this.bridgedMethod.getParameterCount();
        MethodParameter[] methodParameters = new MethodParameter[parameterCount];
        for (int i = 0; i < parameterCount; i++) {
            methodParameters[i] = new AnnotatedMethodParameter(i);
        }
        return methodParameters;
    }

    public MethodParameter getReturnType() {
        return new AnnotatedMethodParameter(-1);
    }

    public MethodParameter getReturnValueType(@Nullable Object returnValue) {
        return new ReturnValueMethodParameter(returnValue);
    }

    public boolean isVoid() {
        return Void.TYPE.equals(getReturnType().getParameterType());
    }

    @Nullable
    public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {
        return AnnotatedElementUtils.findMergedAnnotation(this.method, annotationType);
    }

    public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType) {
        return AnnotatedElementUtils.hasAnnotation(this.method, annotationType);
    }

    private List<Annotation[][]> getInheritedParameterAnnotations() {
        List<Annotation[][]> inheritedParameterAnnotationsList = this.inheritedInterfaceParameterAnnotationsList;
        if (inheritedParameterAnnotationsList == null) {
            inheritedParameterAnnotationsList = new ArrayList<>();
            Class<?> currentClass = this.method.getDeclaringClass();
            while (currentClass != null) {
                for (Class<?> interfaceClass : currentClass.getInterfaces()) {
                    for (Method candidateMethod : interfaceClass.getMethods()) {
                        if (isOverrideFor(candidateMethod)) {
                            inheritedParameterAnnotationsList.add(candidateMethod.getParameterAnnotations());
                        }
                    }
                }
                currentClass = currentClass.getSuperclass();
                if (currentClass == Object.class) {
                    currentClass = null;
                }
                if (currentClass != null) {
                    for (Method candidateMethod : currentClass.getMethods()) {
                        if (isOverrideFor(candidateMethod)) {
                            inheritedParameterAnnotationsList.add(candidateMethod.getParameterAnnotations());
                        }
                    }
                }
            }
            this.inheritedInterfaceParameterAnnotationsList = inheritedParameterAnnotationsList;
        }
        return inheritedParameterAnnotationsList;
    }

    private boolean isOverrideFor(Method candidateMethod) {
        if (!candidateMethod.getName().equals(this.method.getName()) || candidateMethod.getParameterCount() != this.method.getParameterCount()) {
            return false;
        }
        Class<?>[] methodParameterTypes = this.method.getParameterTypes();
        if (Arrays.equals(candidateMethod.getParameterTypes(), methodParameterTypes)) {
            return true;
        }
        for (int i = 0; i < methodParameterTypes.length; i++) {
            if (methodParameterTypes[i] != ResolvableType.forMethodParameter(candidateMethod, i, this.method.getDeclaringClass()).resolve()) {
                return false;
            }
        }
        return true;
    }

    @Override
    public boolean equals(@Nullable Object other) {
        return (this == other || (other != null && getClass() == other.getClass() && this.method.equals(((AnnotatedMethod) other).method)));
    }

    @Override
    public int hashCode() {
        return this.method.hashCode();
    }

    @Override
    public String toString() {
        return this.method.toGenericString();
    }

    @Nullable
    protected static Object findProvidedArgument(MethodParameter parameter, @Nullable Object... providedArgs) {
        if (!ObjectUtils.isEmpty(providedArgs)) {
            for (Object providedArg : providedArgs) {
                if (parameter.getParameterType().isInstance(providedArg)) {
                    return providedArg;
                }
            }
        }
        return null;
    }

    protected static String formatArgumentError(MethodParameter param, String message) {
        return "Could not resolve parameter [" + param.getParameterIndex() + "] in " + param.getExecutable().toGenericString() + (StringUtils.hasText(message) ? ": " + message : "");
    }

    protected class AnnotatedMethodParameter extends SynthesizingMethodParameter {

        @Nullable
        private volatile Annotation[] combinedAnnotations;

        public AnnotatedMethodParameter(int index) {
            super(AnnotatedMethod.this.getBridgedMethod(), index);
        }

        protected AnnotatedMethodParameter(AnnotatedMethodParameter original) {
            super(original);
            this.combinedAnnotations = original.combinedAnnotations;
        }

        @Override
        @NonNull
        public Method getMethod() {
            return AnnotatedMethod.this.getBridgedMethod();
        }

        @Override
        public Class<?> getContainingClass() {
            return AnnotatedMethod.this.getContainingClass();
        }

        @Override
        public <T extends Annotation> T getMethodAnnotation(Class<T> annotationType) {
            return AnnotatedMethod.this.getMethodAnnotation(annotationType);
        }

        @Override
        public <T extends Annotation> boolean hasMethodAnnotation(Class<T> annotationType) {
            return AnnotatedMethod.this.hasMethodAnnotation(annotationType);
        }

        @Override
        public Annotation[] getParameterAnnotations() {
            Annotation[] annotations = this.combinedAnnotations;
            if (annotations == null) {
                annotations = super.getParameterAnnotations();
                int index = getParameterIndex();
                if (index >= 0) {
                    for (Annotation[][] interfaceParameterAnnotationsArray : getInheritedParameterAnnotations()) {
                        if (index < interfaceParameterAnnotationsArray.length) {
                            Annotation[] interfaceParamAnnotations = interfaceParameterAnnotationsArray[index];
                            if (interfaceParamAnnotations.length > 0) {
                                List<Annotation> mergedAnnotations = new ArrayList<>(annotations.length + interfaceParamAnnotations.length);
                                mergedAnnotations.addAll(Arrays.asList(annotations));
                                for (Annotation interfaceParamAnnotation : interfaceParamAnnotations) {
                                    boolean hasExistingAnnotationType = false;
                                    for (Annotation annotation : annotations) {
                                        if (annotation.annotationType() == interfaceParamAnnotation.annotationType()) {
                                            hasExistingAnnotationType = true;
                                            break;
                                        }
                                    }
                                    if (!hasExistingAnnotationType) {
                                        mergedAnnotations.add(adaptAnnotation(interfaceParamAnnotation));
                                    }
                                }
                                annotations = mergedAnnotations.toArray(new Annotation[0]);
                            }
                        }
                    }
                }
                this.combinedAnnotations = annotations;
            }
            return annotations;
        }

        @Override
        public AnnotatedMethodParameter clone() {
            return new AnnotatedMethodParameter(this);
        }
    }

    private class ReturnValueMethodParameter extends AnnotatedMethodParameter {

        @Nullable
        private final Class<?> returnValueType;

        public ReturnValueMethodParameter(@Nullable Object returnValue) {
            super(-1);
            this.returnValueType = (returnValue != null ? returnValue.getClass() : null);
        }

        protected ReturnValueMethodParameter(ReturnValueMethodParameter original) {
            super(original);
            this.returnValueType = original.returnValueType;
        }

        @Override
        public Class<?> getParameterType() {
            return (this.returnValueType != null ? this.returnValueType : super.getParameterType());
        }

        @Override
        public ReturnValueMethodParameter clone() {
            return new ReturnValueMethodParameter(this);
        }
    }
}