package com.puppycrawl.tools.checkstyle.utils;

import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.BitSet;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

import com.puppycrawl.tools.checkstyle.api.CheckstyleException;

public final class CommonUtil {

    public static final int DEFAULT_TAB_WIDTH = 8;

    public static final BitSet EMPTY_BIT_SET = new BitSet();

    public static final String[] EMPTY_STRING_ARRAY = new String[0];

    public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];

    public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];

    public static final int[] EMPTY_INT_ARRAY = new int[0];

    public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];

    public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];

    public static final String CLASSPATH_URL_PROTOCOL = "classpath:";

    private static final String UNABLE_TO_FIND_EXCEPTION_PREFIX = "Unable to find: ";

    private static final String EXTENSION_SEPARATOR = ".";

    private CommonUtil() {
    }

    public static Pattern createPattern(String pattern) {
        return createPattern(pattern, 0);
    }

    public static Pattern createPattern(String pattern, int flags) {
        try {
            return Pattern.compile(pattern, flags);
        } catch (final PatternSyntaxException ex) {
            throw new IllegalArgumentException("Failed to initialise regular expression " + pattern, ex);
        }
    }

    public static boolean matchesFileExtension(File file, String... fileExtensions) {
        boolean result = false;
        if (fileExtensions == null || fileExtensions.length == 0) {
            result = true;
        } else {
            final String[] withDotExtensions = new String[fileExtensions.length];
            for (int i = 0; i < fileExtensions.length; i++) {
                final String extension = fileExtensions[i];
                if (extension.startsWith(EXTENSION_SEPARATOR)) {
                    withDotExtensions[i] = extension;
                } else {
                    withDotExtensions[i] = EXTENSION_SEPARATOR + extension;
                }
            }
            final String fileName = file.getName();
            for (final String fileExtension : withDotExtensions) {
                if (fileName.endsWith(fileExtension)) {
                    result = true;
                    break;
                }
            }
        }
        return result;
    }

    public static boolean hasWhitespaceBefore(int index, String line) {
        boolean result = true;
        for (int i = 0; i < index; i++) {
            if (!Character.isWhitespace(line.charAt(i))) {
                result = false;
                break;
            }
        }
        return result;
    }

    public static int getLengthWithoutTrailingWhitespace(String line) {
        int len = line.length();
        for (int i = len - 1; i >= 0; i--) {
            if (!Character.isWhitespace(line.charAt(i))) {
                break;
            }
            len--;
        }
        return len;
    }

    public static int getExpandedTabLength(String inputString, int toIdx, int tabWidth) {
        int len = 0;
        for (int idx = 0; idx < toIdx; idx++) {
            if (inputString.codePointAt(idx) == '	') {
                len = (len / tabWidth + 1) * tabWidth;
            } else {
                len++;
            }
        }
        return len;
    }

    public static boolean isPatternValid(String pattern) {
        boolean isValid = true;
        try {
            Pattern.compile(pattern);
        } catch (final PatternSyntaxException ignored) {
            isValid = false;
        }
        return isValid;
    }

    public static String getSimpleClassName(String qualifiedClassName) {
        final int index = qualifiedClassName.lastIndexOf('.');
        return qualifiedClassName.substring(index + 1);
    }

    public static String relativizeAndNormalizePath(final String baseDirectory, final String path) {
        final String resultPath;
        if (baseDirectory == null) {
            resultPath = path;
        } else {
            final Path pathAbsolute = Paths.get(path);
            final Path pathBase = Paths.get(baseDirectory);
            resultPath = pathBase.relativize(pathAbsolute).toString();
        }
        return resultPath;
    }

    public static <T> Constructor<T> getConstructor(Class<T> targetClass, Class<?>... parameterTypes) {
        try {
            return targetClass.getConstructor(parameterTypes);
        } catch (NoSuchMethodException ex) {
            throw new IllegalStateException(ex);
        }
    }

    public static <T> T invokeConstructor(Constructor<T> constructor, Object... parameters) {
        try {
            return constructor.newInstance(parameters);
        } catch (InstantiationException | IllegalAccessException | InvocationTargetException ex) {
            throw new IllegalStateException(ex);
        }
    }

    public static void close(Closeable closeable) {
        if (closeable != null) {
            try {
                closeable.close();
            } catch (IOException ex) {
                throw new IllegalStateException("Cannot close the stream", ex);
            }
        }
    }

    public static URI getUriByFilename(String filename) throws CheckstyleException {
        URI uri = getWebOrFileProtocolUri(filename);
        if (uri == null) {
            uri = getFilepathOrClasspathUri(filename);
        }
        return uri;
    }

    public static URI getWebOrFileProtocolUri(String filename) {
        URI uri;
        try {
            final URL url = new URL(filename);
            uri = url.toURI();
        } catch (URISyntaxException | MalformedURLException ignored) {
            uri = null;
        }
        return uri;
    }

    private static URI getFilepathOrClasspathUri(String filename) throws CheckstyleException {
        final URI uri;
        final File file = new File(filename);
        if (file.exists()) {
            uri = file.toURI();
        } else {
            final int lastIndexOfClasspathProtocol;
            if (filename.lastIndexOf(CLASSPATH_URL_PROTOCOL) == 0) {
                lastIndexOfClasspathProtocol = CLASSPATH_URL_PROTOCOL.length();
            } else {
                lastIndexOfClasspathProtocol = 0;
            }
            uri = getResourceFromClassPath(filename.substring(lastIndexOfClasspathProtocol));
        }
        return uri;
    }

    public static URI getResourceFromClassPath(String filename) throws CheckstyleException {
        final URL configUrl;
        if (filename.charAt(0) == '/') {
            configUrl = getCheckstyleResource(filename);
        } else {
            configUrl = ClassLoader.getSystemResource(filename);
        }
        if (configUrl == null) {
            throw new CheckstyleException(UNABLE_TO_FIND_EXCEPTION_PREFIX + filename);
        }
        final URI uri;
        try {
            uri = configUrl.toURI();
        } catch (final URISyntaxException ex) {
            throw new CheckstyleException(UNABLE_TO_FIND_EXCEPTION_PREFIX + filename, ex);
        }
        return uri;
    }

    public static URL getCheckstyleResource(String name) {
        return CommonUtil.class.getResource(name);
    }

    public static String replaceTemplateGroupsWithRegexMatches(String template, String lineToPlaceInTemplate, Pattern regexp) {
        final Matcher matcher = regexp.matcher(lineToPlaceInTemplate);
        String result = template;
        if (matcher.find()) {
            for (int i = 0; i <= matcher.groupCount(); i++) {
                result = result.replaceAll("\$" + i, matcher.group(i));
            }
        }
        return result;
    }

    public static String getFileNameWithoutExtension(String fullFilename) {
        final String fileName = new File(fullFilename).getName();
        final int dotIndex = fileName.lastIndexOf('.');
        final String fileNameWithoutExtension;
        if (dotIndex == -1) {
            fileNameWithoutExtension = fileName;
        } else {
            fileNameWithoutExtension = fileName.substring(0, dotIndex);
        }
        return fileNameWithoutExtension;
    }

    public static String getFileExtension(String fileNameWithExtension) {
        final String fileName = Paths.get(fileNameWithExtension).toString();
        final int dotIndex = fileName.lastIndexOf('.');
        final String extension;
        if (dotIndex == -1) {
            extension = "";
        } else {
            extension = fileName.substring(dotIndex + 1);
        }
        return extension;
    }

    public static boolean isValidJavaIdentifier(String str) {
        boolean isIdentifier = !str.isEmpty();
        for (int i = 0; isIdentifier && i < str.length(); i++) {
            if (i == 0) {
                isIdentifier = Character.isJavaIdentifierStart(str.charAt(0));
            } else {
                isIdentifier = Character.isJavaIdentifierPart(str.charAt(i));
            }
        }
        return isIdentifier;
    }

    public static boolean isValidQualifiedJavaName(String str) {
        boolean isName = false;
        final String[] identifiers = str.split("\\.", -1);
        for (String identifier : identifiers) {
            isName = isValidJavaIdentifier(identifier);
            if (!isName) {
                break;
            }
        }
        return isName;
    }

    public static boolean isBlank(String value) {
        return Objects.isNull(value) || indexOfNonWhitespace(value) >= value.length();
    }

    public static int indexOfNonWhitespace(String value) {
        final int length = value.length();
        int left = 0;
        while (left < length) {
            final int codePointAt = value.codePointAt(left);
            if (!Character.isWhitespace(codePointAt)) {
                break;
            }
            left += Character.charCount(codePointAt);
        }
        return left;
    }

    public static boolean isCodePointWhitespace(int[] codePoints, int index) {
        final char character = Character.toChars(codePoints[index])[0];
        return Character.isWhitespace(character);
    }
}