28-04-2025, 20:14

Certainly! Let’s review the method names for clarity, conciseness, and self-explanatoriness:

### Existing Method Names

1. **longAsPoint(long encoded)**
   Meaning: Converts a long-encoded coordinate back to a `Point`.
   *Possible improvements*: `fromLongToPoint`, `decodePoint`, `decodeFromLong`.

2. **pointAsLong(double x, double y)**
   Meaning: Converts a coordinate (x, y) to a long representation.
   *Possible improvements*: `toLongFromPoint`, `encodePoint`, `encodeToLong`.

3. **wkbAsLong(BytesRef wkb)**
   Meaning: Parses WKB, expects a Point, encodes as long.
   *Possible improvements*: `wkbToLong`, `longFromWkb`.

4. **longAsWkb(long encoded)**
   Meaning: Converts encoded long to Point, then returns as WKB.
   *Possible improvements*: `longToWkb`, `wkbFromLong`.

5. **asWkt(Geometry geometry)**
   Meaning: Converts to WKT string.
   *Possible improvements*: `toWkt`.

6. **pointAsWKB(Geometry geometry)**
   Meaning: Converts Point/Geometry to WKB.
   *Possible improvements*: `toWkb`.

7. **wktToWkb(String wkt)**
   Meaning: Converts WKT string to WKB.
   *Possible improvements*: (already clear, perhaps `wktToWkbBytes` for more clarity).

8. **wkbToWkt(BytesRef wkb)**
   Meaning: Converts WKB to WKT string.
   *Possible improvements*: (already clear).

---

### Refactoring Method Names

Let’s rename for increased clarity and consistency:

- **longAsPoint** ⟶ **decodePoint**
- **pointAsLong** ⟶ **encodePoint**
- **wkbAsLong** ⟶ **wkbToLong**
- **longAsWkb** ⟶ **longToWkb**
- **asWkt** ⟶ **toWkt**
- **pointAsWKB** ⟶ **toWkb**
- **wktToWkb** (already clear)
- **wkbToWkt** (already clear)

---

### Refactored Code

```java
package org.elasticsearch.xpack.ql.util;

import org.apache.lucene.geo.GeoEncodingUtils;
import org.apache.lucene.geo.XYEncodingUtils;
import org.apache.lucene.util.BytesRef;
import org.elasticsearch.geometry.Geometry;
import org.elasticsearch.geometry.Point;
import org.elasticsearch.geometry.utils.GeometryValidator;
import org.elasticsearch.geometry.utils.WellKnownBinary;
import org.elasticsearch.geometry.utils.WellKnownText;

import java.nio.ByteOrder;

import static org.apache.lucene.geo.GeoEncodingUtils.encodeLatitude;
import static org.apache.lucene.geo.GeoEncodingUtils.encodeLongitude;

public enum SpatialCoordinateTypes {
    GEO {
        @Override
        public Point decodePoint(long encoded) {
            return new Point(
                GeoEncodingUtils.decodeLongitude((int) encoded),
                GeoEncodingUtils.decodeLatitude((int) (encoded >>> 32))
            );
        }

        @Override
        public long encodePoint(double x, double y) {
            int latitudeEncoded = encodeLatitude(y);
            int longitudeEncoded = encodeLongitude(x);
            return (((long) latitudeEncoded) << 32) | (longitudeEncoded & 0xFFFFFFFFL);
        }
    },
    CARTESIAN {

        private static final int MAX_VAL_ENCODED = XYEncodingUtils.encode((float) XYEncodingUtils.MAX_VAL_INCL);
        private static final int MIN_VAL_ENCODED = XYEncodingUtils.encode((float) XYEncodingUtils.MIN_VAL_INCL);

        @Override
        public Point decodePoint(long encoded) {
            final int x = checkCoordinate((int) (encoded >>> 32));
            final int y = checkCoordinate((int) (encoded & 0xFFFFFFFF));
            return new Point(XYEncodingUtils.decode(x), XYEncodingUtils.decode(y));
        }

        private int checkCoordinate(int i) {
            if (i > MAX_VAL_ENCODED || i < MIN_VAL_ENCODED) {
                throw new IllegalArgumentException("Failed to convert invalid encoded value to cartesian point");
            }
            return i;
        }

        @Override
        public long encodePoint(double x, double y) {
            final long xi = XYEncodingUtils.encode((float) x);
            final long yi = XYEncodingUtils.encode((float) y);
            return (yi & 0xFFFFFFFFL) | (xi << 32);
        }
    };

    public abstract Point decodePoint(long encoded);

    public abstract long encodePoint(double x, double y);

    public long wkbToLong(BytesRef wkb) {
        Geometry geometry = WellKnownBinary.fromWKB(GeometryValidator.NOOP, false, wkb.bytes, wkb.offset, wkb.length);
        if (geometry instanceof Point point) {
            return encodePoint(point.getX(), point.getY());
        } else {
            throw new IllegalArgumentException("Unsupported geometry: " + geometry.type());
        }
    }

    public BytesRef longToWkb(long encoded) {
        return toWkb(decodePoint(encoded));
    }

    public String toWkt(Geometry geometry) {
        return WellKnownText.toWKT(geometry);
    }

    public BytesRef toWkb(Geometry geometry) {
        return new BytesRef(WellKnownBinary.toWKB(geometry, ByteOrder.LITTLE_ENDIAN));
    }

    public BytesRef wktToWkb(String wkt) {
        // TODO: we should be able to transform WKT to WKB without building the geometry
        // we should as well use different validator for cartesian and geo?
        try {
            Geometry geometry = WellKnownText.fromWKT(GeometryValidator.NOOP, false, wkt);
            return new BytesRef(WellKnownBinary.toWKB(geometry, ByteOrder.LITTLE_ENDIAN));
        } catch (Exception e) {
            throw new IllegalArgumentException("Failed to parse WKT: " + e.getMessage(), e);
        }
    }

    public String wkbToWkt(BytesRef wkb) {
        return WellKnownText.fromWKB(wkb.bytes, wkb.offset, wkb.length);
    }
}
```

---

### **Summary of Improvements**

- **Consistency:** Method names are now consistently verb-based, clarifying source and target formats.
- **Clarity:** Clearly signifies whether conversion is to or from a type and what action is performed.
- **Readability:** Enhances code readability and maintainability.

---

**If you want even stricter consistency for all geometry encoding/decoding methods (e.g., `toWkbFromPoint`, `fromWktToWkb`, etc.), let me know!**

Levenshtein edit-distance: 202
Compiles