28-05-2025, 19:41

There **are** meaningful extract method refactoring opportunities in this code. Specifically, the repeated pattern:

```java
try (ClosedInputStream cis = new ClosedInputStream()) {
    assertEquals(EOF, cis.read(), "read()");
}
```
and similar constructs in other tests (with variations in arguments or input streams) can be refactored into utility (helper) methods to reduce duplication, improve readability, and centralize logic for asserting EOF behavior.

Letâ€™s apply **extract method refactoring** for assertions involving the `ClosedInputStream` in all its usages. Here's the refactored class:

```java
package org.apache.commons.io.input;

import static org.apache.commons.io.IOUtils.EOF;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

/**
 * Tests {@link ClosedInputStream}.
 */
public class ClosedInputStreamTest {

    @Test
    public void testRead() throws Exception {
        assertClosedInputStreamReadEOF(new ClosedInputStream());
    }

    @Test
    public void testReadArray() throws Exception {
        assertClosedInputStreamReadEOF(new ClosedInputStream(), new byte[4096]);
        assertClosedInputStreamReadEOF(new ClosedInputStream(), new byte[1]);
        assertClosedInputStreamReadEOF(new ClosedInputStream(), new byte[0]);
    }

    @Test
    public void testReadArrayIndex() throws Exception {
        assertClosedInputStreamReadEOF(new ClosedInputStream(), new byte[4096], 0, 1);
        assertClosedInputStreamReadEOF(new ClosedInputStream(), new byte[1], 0, 1);
        assertClosedInputStreamReadEOF(new ClosedInputStream(), new byte[0], 0, 0);
    }

    @Test
    public void testSingleton() throws Exception {
        assertClosedInputStreamReadEOF(ClosedInputStream.CLOSED_INPUT_STREAM);
        assertClosedInputStreamReadEOF(ClosedInputStream.INSTANCE);
    }

    // Helper for read()
    private void assertClosedInputStreamReadEOF(ClosedInputStream cis) throws Exception {
        try (ClosedInputStream stream = cis) {
            assertEquals(EOF, stream.read(), "read()");
        }
    }

    // Helper for read(byte[])
    private void assertClosedInputStreamReadEOF(ClosedInputStream cis, byte[] bytes) throws Exception {
        try (ClosedInputStream stream = cis) {
            assertEquals(EOF, stream.read(bytes));
        }
    }

    // Helper for read(byte[], int, int)
    private void assertClosedInputStreamReadEOF(ClosedInputStream cis, byte[] bytes, int off, int len) throws Exception {
        try (ClosedInputStream stream = cis) {
            assertEquals(EOF, stream.read(bytes, off, len));
        }
    }
}
```

**Notes:**

- This refactoring extracts the repetitive test resource management and EOF assertion into private utility methods.
- Test logic is now concise and focused on the essence of each test.
- The refactoring makes it easier to update EOF assertion or stream resource management policy in one place, if needed.

**Summary:**  
The class was refactored by extracting method logic for commonly repeated `ClosedInputStream` EOF assertions. This improves reusability, readability, and maintainability.

Levenshtein edit-distance: 1013