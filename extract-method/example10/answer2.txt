26-04-2025, 09:48

Certainly! Upon reviewing the given code, there **are multiple opportunities** for *extract method refactoring* to make the code more readable and reduce code duplication and complexity, especially in the following locations:

### 1. **FileChannelDataBlock.read()**
The logic for temporarily setting `dst.limit()` and later restoring it can be moved into its own helper method. However, since it's already concise, the major opportunity is in the *ManagedFileChannel.read()* method.

### 2. **ManagedFileChannel.read()**
This method has complex buffer management that involves:
- Retrying to repair the channel after `ClosedByInterruptException`
- Filling up the buffer from the file channel
- Copying buffer contents into the destination buffer

**These can be split for clarity!**

### 3. **ManagedFileChannel.open() / close()**
The logging and tracking logic are repetitive and can be extracted for clarity.

---

Below is the **refactored class** with extracted methods for improved readability and structure. All refactors are marked with comments (`// Extracted Method`) for clarity.

---

```java
package org.springframework.boot.loader.zip;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedByInterruptException;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.function.Supplier;

import org.springframework.boot.loader.log.DebugLogger;

/**
 * Reference counted {@link DataBlock} implementation backed by a {@link FileChannel} with
 * support for slicing.
 *
 * @author Phillip Webb
 */
class FileChannelDataBlock implements CloseableDataBlock {

    private static final DebugLogger debug = DebugLogger.get(FileChannelDataBlock.class);

    static Tracker tracker;

    private final ManagedFileChannel channel;

    private final long offset;

    private final long size;

    FileChannelDataBlock(Path path) throws IOException {
        this.channel = new ManagedFileChannel(path);
        this.offset = 0;
        this.size = Files.size(path);
    }

    FileChannelDataBlock(ManagedFileChannel channel, long offset, long size) {
        this.channel = channel;
        this.offset = offset;
        this.size = size;
    }

    @Override
    public long size() throws IOException {
        return this.size;
    }

    @Override
    public int read(ByteBuffer dst, long pos) throws IOException {
        if (pos < 0) {
            throw new IllegalArgumentException("Position must not be negative");
        }
        ensureOpen(ClosedChannelException::new);
        int remaining = (int) (this.size - pos);
        if (remaining <= 0) {
            return -1;
        }
        int originalDestinationLimit = -1;
        if (dst.remaining() > remaining) {
            originalDestinationLimit = dst.limit();
            dst.limit(dst.position() + remaining);
        }
        int result = this.channel.read(dst, this.offset + pos);
        if (originalDestinationLimit != -1) {
            dst.limit(originalDestinationLimit);
        }
        return result;
    }

    /**
     * Open a connection to this block, increasing the reference count and re-opening the
     * underlying file channel if necessary.
     * @throws IOException on I/O error
     */
    void open() throws IOException {
        this.channel.open();
    }

    /**
     * Close a connection to this block, decreasing the reference count and closing the
     * underlying file channel if necessary.
     * @throws IOException on I/O error
     */
    @Override
    public void close() throws IOException {
        this.channel.close();
    }

    /**
     * Ensure that the underlying file channel is currently open.
     * @param exceptionSupplier a supplier providing the exception to throw
     * @param <E> the exception type
     * @throws E if the channel is closed
     */
    <E extends Exception> void ensureOpen(Supplier<E> exceptionSupplier) throws E {
        this.channel.ensureOpen(exceptionSupplier);
    }

    /**
     * Return a new {@link FileChannelDataBlock} slice providing access to a subset of the
     * data. The caller is responsible for calling {@link #open()} and {@link #close()} on
     * the returned block.
     * @param offset the start offset for the slice relative to this block
     * @return a new {@link FileChannelDataBlock} instance
     * @throws IOException on I/O error
     */
    FileChannelDataBlock slice(long offset) throws IOException {
        return slice(offset, this.size - offset);
    }

    /**
     * Return a new {@link FileChannelDataBlock} slice providing access to a subset of the
     * data. The caller is responsible for calling {@link #open()} and {@link #close()} on
     * the returned block.
     * @param offset the start offset for the slice relative to this block
     * @param size the size of the new slice
     * @return a new {@link FileChannelDataBlock} instance
     */
    FileChannelDataBlock slice(long offset, long size) {
        if (offset == 0 && size == this.size) {
            return this;
        }
        if (offset < 0) {
            throw new IllegalArgumentException("Offset must not be negative");
        }
        if (size < 0 || offset + size > this.size) {
            throw new IllegalArgumentException("Size must not be negative and must be within bounds");
        }
        debug.log("Slicing %s at %s with size %s", this.channel, offset, size);
        return new FileChannelDataBlock(this.channel, this.offset + offset, size);
    }

    /**
     * Manages access to underlying {@link FileChannel}.
     */
    static class ManagedFileChannel {

        static final int BUFFER_SIZE = 1024 * 10;

        private final Path path;

        private int referenceCount;

        private FileChannel fileChannel;

        private ByteBuffer buffer;

        private long bufferPosition = -1;

        private int bufferSize;

        private final Object lock = new Object();

        ManagedFileChannel(Path path) {
            if (!Files.isRegularFile(path)) {
                throw new IllegalArgumentException(path + " must be a regular file");
            }
            this.path = path;
        }

        int read(ByteBuffer dst, long position) throws IOException {
            synchronized (this.lock) {
                if (needsBufferRefill(position)) {
                    refillBufferWithRetry(position);
                    // After refillBufferWithRetry, the buffer is set. Still need to handle bufferSize==0 or negative.
                }
                if (this.bufferSize <= 0) {
                    return this.bufferSize;
                }
                return transferFromBuffer(dst, position); // Extracted Method
            }
        }

        // Extracted Method
        private boolean needsBufferRefill(long position) {
            return position < this.bufferPosition ||
                    position >= this.bufferPosition + this.bufferSize;
        }

        // Extracted Method
        private void refillBufferWithRetry(long position) throws IOException {
            for (int i = 0; i < 10; i++) {
                boolean interrupted = (i != 0) ? Thread.interrupted() : false;
                try {
                    refillBuffer(position);
                    return;
                }
                catch (ClosedByInterruptException ex) {
                    repairFileChannel();
                }
                finally {
                    if (interrupted) {
                        Thread.currentThread().interrupt();
                    }
                }
            }
            throw new ClosedByInterruptException();
        }

        // Extracted Method
        private void refillBuffer(long position) throws IOException {
            this.buffer.clear();
            this.bufferSize = this.fileChannel.read(this.buffer, position);
            this.bufferPosition = position;
        }

        // Extracted Method
        private int transferFromBuffer(ByteBuffer dst, long position) {
            int offset = (int) (position - this.bufferPosition);
            int length = Math.min(this.bufferSize - offset, dst.remaining());
            dst.put(dst.position(), this.buffer, offset, length);
            dst.position(dst.position() + length);
            return length;
        }

        private void repairFileChannel() throws IOException {
            if (tracker != null) {
                tracker.closedFileChannel(this.path, this.fileChannel);
            }
            this.fileChannel = FileChannel.open(this.path, StandardOpenOption.READ);
            if (tracker != null) {
                tracker.openedFileChannel(this.path, this.fileChannel);
            }
        }

        void open() throws IOException {
            synchronized (this.lock) {
                if (this.referenceCount == 0) {
                    debug.log("Opening '%s'", this.path);
                    openFileChannelAndInitBuffer(); // Extracted Method
                }
                this.referenceCount++;
                logReferenceCountIncremented();  // Extracted Method
            }
        }

        // Extracted Method
        private void openFileChannelAndInitBuffer() throws IOException {
            this.fileChannel = FileChannel.open(this.path, StandardOpenOption.READ);
            this.buffer = ByteBuffer.allocateDirect(BUFFER_SIZE);
            if (tracker != null) {
                tracker.openedFileChannel(this.path, this.fileChannel);
            }
        }

        // Extracted Method
        private void logReferenceCountIncremented() {
            debug.log("Reference count for '%s' incremented to %s", this.path, this.referenceCount);
        }

        void close() throws IOException {
            synchronized (this.lock) {
                if (this.referenceCount == 0) {
                    return;
                }
                this.referenceCount--;
                if (this.referenceCount == 0) {
                    debug.log("Closing '%s'", this.path);
                    cleanupOnClose(); // Extracted Method
                }
                logReferenceCountDecremented(); // Extracted Method
            }
        }

        // Extracted Method
        private void cleanupOnClose() throws IOException {
            this.buffer = null;
            this.bufferPosition = -1;
            this.bufferSize = 0;
            this.fileChannel.close();
            if (tracker != null) {
                tracker.closedFileChannel(this.path, this.fileChannel);
            }
            this.fileChannel = null;
        }

        // Extracted Method
        private void logReferenceCountDecremented() {
            debug.log("Reference count for '%s' decremented to %s", this.path, this.referenceCount);
        }

        <E extends Exception> void ensureOpen(Supplier<E> exceptionSupplier) throws E {
            synchronized (this.lock) {
                if (this.referenceCount == 0 || !this.fileChannel.isOpen()) {
                    throw exceptionSupplier.get();
                }
            }
        }

        @Override
        public String toString() {
            return this.path.toString();
        }

    }

    /**
     * Internal tracker used to check open and closing of files in tests.
     */
    interface Tracker {

        void openedFileChannel(Path path, FileChannel fileChannel);

        void closedFileChannel(Path path, FileChannel fileChannel);

    }

}
```

---

## **Summary of Refactoring Applied**
- **Extracted buffer-check/management and retry loop** from `ManagedFileChannel.read` for clarity.
- **Extracted buffer transfer logic** for easier understanding and testing.
- **Extracted open/close reference/debug code** to small private helper methods to promote code reuse and cleaner main logic.

**Feel free to ask further for Javadoc or code comments on the extracted methods if needed.**

Levenshtein edit-distance: 1878