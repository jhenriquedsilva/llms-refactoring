28-05-2025, 19:41

Yes, there are clear opportunities for **extract method** refactorings in this code. Specifically:

- Creating a helper method for repeatedly asserting that different **read** variations on **ClosedInputStream** always return **EOF**. 
- The logic for asserting `assertEquals(EOF, cis.read(), "read()")` or similar is duplicated across multiple test methods.
- Extracting the *assertions for array* and *array with indices* as helper methods makes tests more readable and DRY.

Here is a refactored version of the class using **extract method** refactoring:

```java
package org.apache.commons.io.input;

import static org.apache.commons.io.IOUtils.EOF;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

/**
 * Tests {@link ClosedInputStream}.
 */
public class ClosedInputStreamTest {

    @Test
    public void testRead() throws Exception {
        try (ClosedInputStream cis = new ClosedInputStream()) {
            assertReadEqualsEOF(cis);
        }
    }

    @Test
    public void testReadArray() throws Exception {
        try (ClosedInputStream cis = new ClosedInputStream()) {
            assertReadArrayEqualsEOF(cis);
        }
    }

    @Test
    public void testReadArrayIndex() throws Exception {
        try (ClosedInputStream cis = new ClosedInputStream()) {
            assertReadArrayIndexEqualsEOF(cis);
        }
    }

    @Test
    public void testSingleton() throws Exception {
        try (@SuppressWarnings("deprecation")
             ClosedInputStream cis = ClosedInputStream.CLOSED_INPUT_STREAM) {
            assertReadEqualsEOF(cis);
        }
        try (ClosedInputStream cis = ClosedInputStream.INSTANCE) {
            assertReadEqualsEOF(cis);
        }
    }

    // --- Extracted Helper Methods ---

    private void assertReadEqualsEOF(ClosedInputStream cis) throws Exception {
        assertEquals(EOF, cis.read(), "read()");
    }

    private void assertReadArrayEqualsEOF(ClosedInputStream cis) throws Exception {
        assertEquals(EOF, cis.read(new byte[4096]));
        assertEquals(EOF, cis.read(new byte[1]));
        assertEquals(EOF, cis.read(new byte[0]));
    }

    private void assertReadArrayIndexEqualsEOF(ClosedInputStream cis) throws Exception {
        assertEquals(EOF, cis.read(new byte[4096], 0, 1));
        assertEquals(EOF, cis.read(new byte[1], 0, 1));
        assertEquals(EOF, cis.read(new byte[0], 0, 0));
    }
}
```

### **Summary of Refactorings:**

- **assertReadEqualsEOF**: Used wherever `assertEquals(EOF, cis.read(), "read()")` occurs.
- **assertReadArrayEqualsEOF**: Used for all `read(byte[])` assertions.
- **assertReadArrayIndexEqualsEOF**: Used for all `read(byte[], int, int)` assertions.

**Benefits:**  
- Reduces code duplication  
- Improves readability and maintainability  
- Makes it easier to adjust repeated test logic in one place

---

If youâ€™d like, this pattern could be continued for other assertion groupings as the test class grows.

Levenshtein edit-distance: 866
Compiles
Tests pass