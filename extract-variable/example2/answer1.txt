29-04-2025, 21:08

**Refactoring Opportunity:**

In the code, there are several places where repeated expressions are used, particularly, for the creation of `ByteArrayInputStream` from `helloWorld` or `hello`, and instantiation of `BoundedInputStream`. Repeated access to `helloWorld.length`, `hello.length` and construction of similar bounded streams.

Applying "extract variable" refactorings improves readability and reusability.

### Main Refactorings

1. Extract frequently used expressions (like `new ByteArrayInputStream(helloWorld)`) into variables.
2. In `testOnMaxLength`, store expressions such as `helloWorld.length`, `hello.length`, `helloWorld.length + 1` in well-named variables.
3. In `testReadArray` and `testReadSingle`, extract repeated calls for clarity.

Here is the **refactored class**:

```java
package org.apache.commons.io.input;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.ByteArrayInputStream;
import java.util.concurrent.atomic.AtomicBoolean;

import org.apache.commons.io.IOUtils;
import org.junit.jupiter.api.Test;

/**
 * Tests for {@link BoundedInputStream}.
 */
public class BoundedInputStreamTest {

    private void compare(final String msg, final byte[] expected, final byte[] actual) {
        assertEquals(expected.length, actual.length, msg + " length");
        for (int i = 0; i < expected.length; i++) {
            assertEquals(expected[i], actual[i], msg + " byte[" + i + "]");
        }
    }

    @Test
    public void testOnMaxLength() throws Exception {
        BoundedInputStream bounded;
        final byte[] helloWorld = "Hello World".getBytes();
        final byte[] hello = "Hello".getBytes();
        final int helloWorldLength = helloWorld.length;
        final int helloLength = hello.length;
        final int helloWorldLengthPlusOne = helloWorldLength + 1;
        final AtomicBoolean boolRef = new AtomicBoolean();

        // limit = length
        ByteArrayInputStream helloWorldStream = new ByteArrayInputStream(helloWorld);
        bounded = new BoundedInputStream(helloWorldStream, helloWorldLength) {
            @Override
            protected void onMaxLength(final long max, final long readCount) {
                boolRef.set(true);
            }
        };
        assertEquals(helloWorldLength, bounded.getMaxLength());
        assertEquals(0, bounded.getCount());
        assertEquals(bounded.getMaxLength(), bounded.getRemaining());
        assertFalse(boolRef.get());
        int readCount = 0;
        for (int i = 0; i < helloWorldLength; i++) {
            assertEquals(helloWorld[i], bounded.read(), "limit = length byte[" + i + "]");
            readCount++;
            assertEquals(helloWorldLength, bounded.getMaxLength());
            assertEquals(readCount, bounded.getCount());
            assertEquals(bounded.getMaxLength() - readCount, bounded.getRemaining());
        }
        assertEquals(-1, bounded.read(), "limit = length end");
        assertEquals(helloWorldLength, bounded.getMaxLength());
        assertEquals(readCount, bounded.getCount());
        assertEquals(bounded.getMaxLength() - readCount, bounded.getRemaining());
        assertTrue(boolRef.get());

        // limit > length
        boolRef.set(false);
        ByteArrayInputStream helloWorldStream2 = new ByteArrayInputStream(helloWorld);
        bounded = new BoundedInputStream(helloWorldStream2, helloWorldLengthPlusOne) {
            @Override
            protected void onMaxLength(final long max, final long readCount) {
                boolRef.set(true);
            }
        };
        assertEquals(helloWorldLengthPlusOne, bounded.getMaxLength());
        assertEquals(0, bounded.getCount());
        assertEquals(bounded.getMaxLength(), bounded.getRemaining());
        assertFalse(boolRef.get());
        readCount = 0;
        for (int i = 0; i < helloWorldLength; i++) {
            assertEquals(helloWorld[i], bounded.read(), "limit > length byte[" + i + "]");
            readCount++;
            assertEquals(helloWorldLengthPlusOne, bounded.getMaxLength());
            assertEquals(readCount, bounded.getCount());
            assertEquals(bounded.getMaxLength() - readCount, bounded.getRemaining());
        }
        assertEquals(-1, bounded.read(), "limit > length end");
        assertEquals(helloWorldLengthPlusOne, bounded.getMaxLength());
        assertEquals(readCount, bounded.getCount());
        assertEquals(bounded.getMaxLength() - readCount, bounded.getRemaining());
        assertFalse(boolRef.get());

        // limit < length
        boolRef.set(false);
        ByteArrayInputStream helloWorldStream3 = new ByteArrayInputStream(helloWorld);
        bounded = new BoundedInputStream(helloWorldStream3, helloLength) {
            @Override
            protected void onMaxLength(final long max, final long readCount) {
                boolRef.set(true);
            }
        };
        assertEquals(helloLength, bounded.getMaxLength());
        assertEquals(0, bounded.getCount());
        assertEquals(bounded.getMaxLength(), bounded.getRemaining());
        assertFalse(boolRef.get());
        readCount = 0;
        for (int i = 0; i < helloLength; i++) {
            assertEquals(hello[i], bounded.read(), "limit < length byte[" + i + "]");
            readCount++;
            assertEquals(helloLength, bounded.getMaxLength());
            assertEquals(readCount, bounded.getCount());
            assertEquals(bounded.getMaxLength() - readCount, bounded.getRemaining());
        }
        assertEquals(-1, bounded.read(), "limit < length end");
        assertEquals(helloLength, bounded.getMaxLength());
        assertEquals(readCount, bounded.getCount());
        assertEquals(bounded.getMaxLength() - readCount, bounded.getRemaining());
        assertTrue(boolRef.get());
    }

    @Test
    public void testReadArray() throws Exception {

        BoundedInputStream bounded;
        final byte[] helloWorld = "Hello World".getBytes();
        final byte[] hello = "Hello".getBytes();
        final int helloWorldLength = helloWorld.length;
        final int helloLength = hello.length;

        ByteArrayInputStream helloWorldStream = new ByteArrayInputStream(helloWorld);

        bounded = new BoundedInputStream(new ByteArrayInputStream(helloWorld));
        compare("limit = -1", helloWorld, IOUtils.toByteArray(bounded));

        bounded = new BoundedInputStream(new ByteArrayInputStream(helloWorld), 0);
        compare("limit = 0", IOUtils.EMPTY_BYTE_ARRAY, IOUtils.toByteArray(bounded));

        bounded = new BoundedInputStream(new ByteArrayInputStream(helloWorld), helloWorldLength);
        compare("limit = length", helloWorld, IOUtils.toByteArray(bounded));

        bounded = new BoundedInputStream(new ByteArrayInputStream(helloWorld), helloWorldLength + 1);
        compare("limit > length", helloWorld, IOUtils.toByteArray(bounded));

        bounded = new BoundedInputStream(new ByteArrayInputStream(helloWorld), helloWorldLength - 6);
        compare("limit < length", hello, IOUtils.toByteArray(bounded));
    }

    @Test
    public void testReadSingle() throws Exception {
        BoundedInputStream bounded;
        final byte[] helloWorld = "Hello World".getBytes();
        final byte[] hello = "Hello".getBytes();
        final int helloWorldLength = helloWorld.length;
        final int helloLength = hello.length;

        // limit = length
        bounded = new BoundedInputStream(new ByteArrayInputStream(helloWorld), helloWorldLength);
        for (int i = 0; i < helloWorldLength; i++) {
            assertEquals(helloWorld[i], bounded.read(), "limit = length byte[" + i + "]");
        }
        assertEquals(-1, bounded.read(), "limit = length end");

        // limit > length
        bounded = new BoundedInputStream(new ByteArrayInputStream(helloWorld), helloWorldLength + 1);
        for (int i = 0; i < helloWorldLength; i++) {
            assertEquals(helloWorld[i], bounded.read(), "limit > length byte[" + i + "]");
        }
        assertEquals(-1, bounded.read(), "limit > length end");

        // limit < length
        bounded = new BoundedInputStream(new ByteArrayInputStream(helloWorld), helloLength);
        for (int i = 0; i < helloLength; i++) {
            assertEquals(hello[i], bounded.read(), "limit < length byte[" + i + "]");
        }
        assertEquals(-1, bounded.read(), "limit < length end");
    }
}
```

**Summary of Changes:**

- Added variables: `helloWorldLength`, `helloLength`, and `helloWorldLengthPlusOne` where appropriate.
- Extracted multiple `new ByteArrayInputStream(helloWorld)` calls into local variables in `testOnMaxLength`.
- Used these variables throughout the tests for clarity and maintainability.
- Removed redundant repeated expressions and improved statement clarity.

### This makes the code clearer and less error-prone in the future.
