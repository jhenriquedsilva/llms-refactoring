30-04-2025, 21:10

Yes, there **are several extract variable refactoring opportunities** in this code. Most notably, repeated literals and method results can be assigned to local variables to improve readability and maintainability.

Here's a summary of suggested refactorings:

- **Repeated call to `.toLowerCase(locale)`** on strings in loops (especially in `escapeIgnoringCase`). Extract this as a variable per iteration to avoid redundant calls.
- The character **`'\\'`** and escape string **`"\\"`** (sometimes written as "`\"`" in your snippet, which is probably a formatting glitch) are repeated often and can benefit from being extracted.
- The **calculated values** like `term.toString()`, `buffer.charAt(0)`, and similar, can also be extracted for clarity and minor efficiency.
- In `escapeIgnoringCase`, `string.toString().toLowerCase(locale)` is **called in every loop iteration**. Extract once at the start of the method.

Below is the **refactored class** with these opportunities applied. I've used the encoding `ESCAPE_CHAR` for the escape sequence where ambiguous from the original. You can rename or adjust as needed.

---

```java
package org.apache.lucene.queryparser.flexible.standard.parser;

import java.util.Locale;
import org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages;
import org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax;
import org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence;
import org.apache.lucene.queryparser.flexible.messages.MessageImpl;

/** Implementation of {@link EscapeQuerySyntax} for the standard lucene syntax. */
public class EscapeQuerySyntaxImpl implements EscapeQuerySyntax {

    private static final char[] wildcardChars = {'*', '?'};

    private static final String[] escapableTermExtraFirstChars = {"+", "-", "@"};

    private static final String[] escapableTermChars = {
            "\"", "<", ">", "=", "!", "(", ")", "^", "[", "{", ":", "]", "}", "~", "/"
    };

    // TODO: check what to do with these "*", "?", "\\"
    private static final String[] escapableQuotedChars = {"\""};
    private static final String[] escapableWhiteChars = {" ", "\t", "\n", "\r", "\f", "\b", "ã€€"};
    private static final String[] escapableWordTokens = {
            "AND", "OR", "NOT", "TO", "WITHIN", "SENTENCE", "PARAGRAPH", "INORDER"
    };

    private static final String ESCAPE_CHAR = "\\";

    private static CharSequence escapeChar(CharSequence str, Locale locale) {
        if (str == null || str.isEmpty()) return str;

        CharSequence buffer = str;

        // regular escapable char for terms
        for (String escapableTermChar : escapableTermChars) {
            String escapableTermCharLower = escapableTermChar.toLowerCase(locale);
            buffer = escapeIgnoringCase(buffer, escapableTermCharLower, ESCAPE_CHAR, locale);
        }

        // first char of a term as more escaping chars
        char firstBufferChar = buffer.charAt(0);
        for (String escapableTermExtraFirstChar : escapableTermExtraFirstChars) {
            char charToEscape = escapableTermExtraFirstChar.charAt(0);
            if (firstBufferChar == charToEscape) {
                buffer = ESCAPE_CHAR + buffer.toString();
                break;
            }
        }

        return buffer;
    }

    private static CharSequence escapeQuoted(CharSequence str, Locale locale) {
        if (str == null || str.isEmpty()) return str;

        CharSequence buffer = str;

        for (String escapableQuotedChar : escapableQuotedChars) {
            String escapableQuotedCharLower = escapableQuotedChar.toLowerCase(locale);
            buffer = escapeIgnoringCase(buffer, escapableQuotedCharLower, ESCAPE_CHAR, locale);
        }
        return buffer;
    }

    private static CharSequence escapeTerm(CharSequence term, Locale locale) {
        if (term == null || term.isEmpty()) return term;

        // escape single chars
        term = escapeChar(term, locale);
        term = escapeWhiteChar(term, locale);

        // escape parser words
        String termString = term.toString();
        for (String escapableWordToken : escapableWordTokens) {
            if (escapableWordToken.equalsIgnoreCase(termString)) return ESCAPE_CHAR + termString;
        }
        return term;
    }

    /**
     * Prepend every case-insensitive occurrence of the {@code sequence1} in the {@code string} with
     * the {@code escapeChar}. When the {@code sequence1} is empty, every character in the {@code
     * string} is escaped.
     *
     * @param string string to apply escaping to
     * @param sequence1 the old character sequence in lowercase
     * @param escapeChar the escape character to prefix sequence1 in the returned string
     * @return CharSequence with every occurrence of {@code sequence1} prepended with {@code
     *     escapeChar}
     */
    private static CharSequence escapeIgnoringCase(
            CharSequence string, CharSequence sequence1, CharSequence escapeChar, Locale locale) {
        if (escapeChar == null || sequence1 == null || string == null) throw new NullPointerException();

        int count = string.length();
        int sequence1Length = sequence1.length();
        String stringLower = string.toString().toLowerCase(locale);
        String sequence1String = sequence1.toString();

        // empty search string - escape every character
        if (sequence1Length == 0) {
            StringBuilder result = new StringBuilder(count * (1 + escapeChar.length()));
            for (int i = 0; i < count; i++) {
                result.append(escapeChar);
                result.append(string.charAt(i));
            }
            return result;
        }

        // normal case
        StringBuilder result = new StringBuilder();
        char first = sequence1.charAt(0);
        int start = 0, copyStart = 0, firstIndex;
        while (start < count) {
            firstIndex = stringLower.indexOf(first, start);
            if (firstIndex == -1) break;
            boolean found = true;
            if (sequence1.length() > 1) {
                if (firstIndex + sequence1Length > count) break;
                for (int i = 1; i < sequence1Length; i++) {
                    if (stringLower.charAt(firstIndex + i) != sequence1String.charAt(i)) {
                        found = false;
                        break;
                    }
                }
            }
            if (found) {
                result.append(string, copyStart, firstIndex);
                result.append(escapeChar);
                result.append(string, firstIndex, firstIndex + sequence1Length);
                copyStart = start = firstIndex + sequence1Length;
            } else {
                start = firstIndex + 1;
            }
        }
        if (result.isEmpty() && copyStart == 0) return string;
        result.append(string, copyStart, string.length());
        return result;
    }

    /**
     * escape all tokens that are part of the parser syntax on a given string
     *
     * @param str string to get replaced
     * @param locale locale to be used when performing string compares
     * @return the new String
     */
    private static CharSequence escapeWhiteChar(CharSequence str, Locale locale) {
        if (str == null || str.isEmpty()) return str;

        CharSequence buffer = str;

        for (String escapableWhiteChar : escapableWhiteChars) {
            String escapableWhiteCharLower = escapableWhiteChar.toLowerCase(locale);
            buffer = escapeIgnoringCase(buffer, escapableWhiteCharLower, ESCAPE_CHAR, locale);
        }
        return buffer;
    }

    @Override
    public CharSequence escape(CharSequence text, Locale locale, Type type) {
        if (text == null || text.isEmpty()) return text;

        // escape wildcards and the escape char (this has to be performed before anything else)
        // since we need to preserve the UnescapedCharSequence and escape the original escape chars
        if (text instanceof UnescapedCharSequence) {
            text = ((UnescapedCharSequence) text).toStringEscaped(wildcardChars);
        } else {
            text = new UnescapedCharSequence(text).toStringEscaped(wildcardChars);
        }

        if (type == Type.STRING) {
            return escapeQuoted(text, locale);
        } else {
            return escapeTerm(text, locale);
        }
    }

    /**
     * Returns a String where the escape char has been removed, or kept only once if there was a
     * double escape.
     *
     * <p>Supports escaped Unicode characters, e.g. translates {@code \u0041} to {@code A}.
     */
    public static UnescapedCharSequence discardEscapeChar(CharSequence input) throws ParseException {
        // Create char array to hold unescaped char sequence
        char[] output = new char[input.length()];
        boolean[] wasEscaped = new boolean[input.length()];

        // The length of the output can be less than the input
        // due to discarded escape chars. This variable holds
        // the actual length of the output
        int length = 0;

        // We remember whether the last processed character was
        // an escape character
        boolean lastCharWasEscapeChar = false;

        // The multiplier the current unicode digit must be multiplied with.
        // E.g. the first digit must be multiplied with 16^3, the second with 16^2...
        int codePointMultiplier = 0;

        // Used to calculate the codepoint of the escaped unicode character
        int codePoint = 0;

        for (int i = 0; i < input.length(); i++) {
            char curChar = input.charAt(i);
            if (codePointMultiplier > 0) {
                codePoint += hexToInt(curChar) * codePointMultiplier;
                codePointMultiplier >>>= 4;
                if (codePointMultiplier == 0) {
                    output[length++] = (char) codePoint;
                    codePoint = 0;
                }
            } else if (lastCharWasEscapeChar) {
                if (curChar == 'u') {
                    // found an escaped unicode character
                    codePointMultiplier = 16 * 16 * 16;
                } else {
                    // this character was escaped
                    output[length] = curChar;
                    wasEscaped[length] = true;
                    length++;
                }
                lastCharWasEscapeChar = false;
            } else {
                if (curChar == '\\') {
                    lastCharWasEscapeChar = true;
                } else {
                    output[length] = curChar;
                    length++;
                }
            }
        }

        if (codePointMultiplier > 0) {
            throw new ParseException(
                    new MessageImpl(QueryParserMessages.INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION));
        }

        if (lastCharWasEscapeChar) {
            throw new ParseException(
                    new MessageImpl(QueryParserMessages.INVALID_SYNTAX_ESCAPE_CHARACTER));
        }

        return new UnescapedCharSequence(output, wasEscaped, 0, length);
    }

    /** Returns the numeric value of the hexadecimal character */
    private static int hexToInt(char c) throws ParseException {
        if ('0' <= c && c <= '9') {
            return c - '0';
        } else if ('a' <= c && c <= 'f') {
            return c - 'a' + 10;
        } else if ('A' <= c && c <= 'F') {
            return c - 'A' + 10;
        } else {
            throw new ParseException(
                    new MessageImpl(QueryParserMessages.INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE, c));
        }
    }
}
```

---

**Key Extracted Variables:**
- `ESCAPE_CHAR` â€“ a clear escape character sequence constant.
- `stringLower` and `sequence1String` in `escapeIgnoringCase` â€“ for more efficient and readable case-insensitive operations.
- `escapableTermCharLower`, `escapableQuotedCharLower`, and `escapableWhiteCharLower` in their loops.
- Also extracted `firstBufferChar`, `termString`, and similar where repeated lookup/calculation was found.

**Reused variables, avoided repeated method calls, and clarified loop bodies.**
This refactoring maintains logic, improves readability, and follows good engineering practice.

Let me know if you need more granular explanations or want further improvements!
