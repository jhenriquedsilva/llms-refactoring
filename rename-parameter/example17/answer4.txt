01-05-2025, 15:36

Let's analyze the code for **rename parameter refactoring** opportunities, specifically focusing on cases where parameter names are unclear or of low quality, potentially harming readability.

### Issues Noticed

- Parameters named `o` (in `coverage` and `coverageStatement`): `o` is too generic and provides little context about its purpose.
- Parameters named `s` (in `testSealedExhaustive`, `switchStatementExhaustive`, and the sealed interface methods): `s` is also generic (e.g., could mean string, sealed, or any other term), and contextually, it's always of the sealed interface type.
- Parameters named `i` in generic context (e.g., `testGenericSealedExhaustive(I<Integer> i)`): The generic name `i` may be confused with the type argument, integer `i`, or template type parameter.

---

### Suggested Renaming

| Original Name | Opportunity             | Suggestion                    |
|:-------------:|:----------------------:|:-----------------------------:|
| o             | Too generic            | `value`                       |
| s             | Means object of S      | `sealedValue`                 |
| i             | In context of generics | `input`                       |

---

### Refactored Code

```java
/**
 * @see <a href="https://openjdk.org/jeps/441">JEP 441: Pattern Matching for switch</a>
 */
public class ExhaustiveSwitch {

    // As of Java 21
    // Type coverage
    static int coverage(Object value) {
        return switch (value) {
            case String s  -> s.length();
            case Integer i -> i;
            default -> 0;
        };
    }

    static void coverageStatement(Object value) {
        switch (value) {
            case String s:
                System.out.println(s);
                break;
            case Integer i:
                System.out.println("Integer");
                break;
            default:    // Now exhaustive!
                break;
        }
    }

    // As of Java 21
    // Exhaustiveness and sealed classes
    sealed interface S permits A, B, C {}
    final static class A implements S {}
    final static class B implements S {}
    record C(int i) implements S {}    // Implicitly final

    static int testSealedExhaustive(S sealedValue) {
        return switch (sealedValue) {
            case A a -> 1;
            case B b -> 2;
            case C c -> 3;
        };
    }

    static void switchStatementExhaustive(S sealedValue) {
        switch (sealedValue) {
            case A a :
                System.out.println("A");
                break;
            case C c :
                System.out.println("C");
                break;
            default:
                System.out.println("default case, should be B");
                break;
        };
    }

    // As of Java 21
    // Exhaustiveness and sealed classes
    sealed interface I<T> permits E, F {}
    final static class E<X> implements I<String> {}
    final static class F<Y> implements I<Y> {}

    static int testGenericSealedExhaustive(I<Integer> input) {
        return switch (input) {
            // Exhaustive as no E case possible!
            case F<Integer> bi -> 42;
        };
    }

    public static void main(String[] args) {
        System.out.println(coverage("a string"));
        System.out.println(coverage(42));
        System.out.println(coverage(new Object()));

        coverageStatement("a string");
        coverageStatement(21);
        coverageStatement(new Object());

        System.out.println("A:" + testSealedExhaustive(new A()));
        System.out.println("B:" + testSealedExhaustive(new B()));
        System.out.println("C:" + testSealedExhaustive(new C(1)));

        switchStatementExhaustive(new A());
        switchStatementExhaustive(new B());
        switchStatementExhaustive(new C(2));

        System.out.println("F:" + testGenericSealedExhaustive(new F<Integer>()));
    }
}
```

---

### Summary of Refactorings

- **coverage**, **coverageStatement** parameters renamed from `o` → `value`.
- **testSealedExhaustive**, **switchStatementExhaustive** parameters renamed from `s` → `sealedValue`.
- **testGenericSealedExhaustive** parameter renamed from `i` → `input`.

These changes improve code readability and expressiveness.