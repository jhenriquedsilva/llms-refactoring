01-05-2025, 09:52

Yes, there **are** opportunities for **extract variable refactoring** in this code snippet. The expression `inputStream.readAllBytes()` is used twice, which can lead to potential issues since reading from an input stream exhausts it after the first call. Reading the bytes once and saving them in a variable improves both **readability, reusability, and correctness**.

Here is your refactored class using extract variable refactoring and fixing the input stream issue:

```java
package org.apache.solr.handler.configsets;

import static org.apache.solr.client.solrj.SolrRequest.METHOD.PUT;
import static org.apache.solr.security.PermissionNameProvider.Name.CONFIG_EDIT_PERM;

import java.io.InputStream;
import org.apache.solr.api.EndPoint;
import org.apache.solr.common.SolrException;
import org.apache.solr.common.cloud.ZkMaintenanceUtils;
import org.apache.solr.common.params.ConfigSetParams;
import org.apache.solr.core.CoreContainer;
import org.apache.solr.request.SolrQueryRequest;
import org.apache.solr.response.SolrQueryResponse;
import org.apache.solr.util.FileTypeMagicUtil;

/**
 * V2 API for adding or updating a single file within a configset.
 *
 * <p>This API (PUT /v2/cluster/configs/configsetName/someFilePath) is analogous to the v1
 * /admin/configs?action=UPLOAD&amp;filePath=someFilePath command.
 */
public class UploadConfigSetFileAPI extends ConfigSetAPIBase {

    public static final String CONFIGSET_NAME_PLACEHOLDER =
            UploadConfigSetAPI.CONFIGSET_NAME_PLACEHOLDER;
    public static final String FILEPATH_PLACEHOLDER = "*";

    private static final String API_PATH =
            "/cluster/configs/{" + CONFIGSET_NAME_PLACEHOLDER + "}/" + FILEPATH_PLACEHOLDER;

    public UploadConfigSetFileAPI(CoreContainer coreContainer) {
        super(coreContainer);
    }

    @EndPoint(method = PUT, path = API_PATH, permission = CONFIG_EDIT_PERM)
    public void updateConfigSetFile(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {
        ensureConfigSetUploadEnabled();

        final String configSetName = req.getPathTemplateValues().get("name");
        boolean overwritesExisting = configSetService.checkConfigExists(configSetName);
        boolean requestIsTrusted =
                isTrusted(req.getUserPrincipal(), coreContainer.getAuthenticationPlugin());

        // Get upload parameters

        String singleFilePath = req.getPathTemplateValues().getOrDefault(FILEPATH_PLACEHOLDER, "");
        boolean allowOverwrite = req.getParams().getBool(ConfigSetParams.OVERWRITE, true);
        boolean cleanup = req.getParams().getBool(ConfigSetParams.CLEANUP, false);
        final InputStream inputStream = ensureNonEmptyInputStream(req);

        String fixedSingleFilePath = singleFilePath;
        if (fixedSingleFilePath.charAt(0) == '/') {
            fixedSingleFilePath = fixedSingleFilePath.substring(1);
        }

        // Extract variable for file bytes, reading the inputStream only once
        final byte[] fileBytes = inputStream.readAllBytes();

        if (fixedSingleFilePath.isEmpty()) {
            throw new SolrException(
                    SolrException.ErrorCode.BAD_REQUEST,
                    "The file path provided for upload, '" + singleFilePath + "', is not valid.");
        } else if (
            ZkMaintenanceUtils.isFileForbiddenInConfigSets(fixedSingleFilePath)
            || FileTypeMagicUtil.isFileForbiddenInConfigset(fileBytes)
        ) {
            throw new SolrException(
                    SolrException.ErrorCode.BAD_REQUEST,
                    "The file type provided for upload, '"
                            + singleFilePath
                            + "', is forbidden for use in configSets.");
        } else if (cleanup) {
            // Cleanup is not allowed while using singleFilePath upload
            throw new SolrException(
                    SolrException.ErrorCode.BAD_REQUEST,
                    "ConfigSet uploads do not allow cleanup=true when file path is used.");
        } else {
            // Create a node for the configuration in config
            // For creating the baseNode, the cleanup parameter is only allowed to be true when
            // singleFilePath is not passed.
            createBaseNode(configSetService, overwritesExisting, requestIsTrusted, configSetName);
            configSetService.uploadFileToConfig(configSetName, fixedSingleFilePath, fileBytes, allowOverwrite);
        }
    }
}
```

**Refactoring description:**
- **Extracted `inputStream.readAllBytes()` into the `fileBytes` variable** to improve readability and correctness, avoiding reading the stream more than once.
- **Replaced** all occurrences of `inputStream.readAllBytes()` with `fileBytes`.

If you need further extract variable refactoring (e.g., for other repeated expressions or conditions), you can further discuss or highlight the relevant code sections!

Levenshtein edit-distance: 30
Compiles