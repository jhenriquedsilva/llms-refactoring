package org.junit.jupiter.engine.extension;

import static java.nio.file.Files.deleteIfExists;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.io.CleanupMode.ALWAYS;
import static org.junit.jupiter.api.io.CleanupMode.NEVER;
import static org.junit.jupiter.api.io.CleanupMode.ON_SUCCESS;
import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
import static org.junit.platform.engine.discovery.DiscoverySelectors.selectMethod;
import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;

import java.io.IOException;
import java.nio.file.Path;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.io.CleanupMode;
import org.junit.jupiter.api.io.TempDir;
import org.junit.jupiter.engine.AbstractJupiterTestEngineTests;
import org.junit.platform.launcher.LauncherDiscoveryRequest;

class TempDirectoryCleanupTests extends AbstractJupiterTestEngineTests {

    @Nested
    class TempDirFieldTests {

        private static Path defaultFieldDir;
        private static Path neverFieldDir;
        private static Path alwaysFieldDir;
        private static Path onSuccessFailingFieldDir;
        private static Path onSuccessPassingFieldDir;

        @Test
        void shouldCleanupDefaultTempDirField() {
            LauncherDiscoveryRequest request = request().selectors(selectMethod(DefaultFieldCase.class, "assignDefaultTempDirField")).build();
            executeTests(request);
            assertThat(defaultFieldDir).doesNotExist();
        }

        @Test
        void shouldNotCleanupDefaultTempDirFieldWhenCleanupModeIsNever() {
            LauncherDiscoveryRequest request = request().configurationParameter(TempDir.DEFAULT_CLEANUP_MODE_PROPERTY_NAME, "never").selectors(selectMethod(DefaultFieldCase.class, "assignDefaultTempDirField")).build();
            executeTests(request);
            assertThat(defaultFieldDir).exists();
        }

        @Test
        void shouldNotCleanupTempDirFieldWhenCleanupModeIsNever() {
            LauncherDiscoveryRequest request = request().selectors(selectMethod(NeverFieldCase.class, "assignNeverTempDirField")).build();
            executeTests(request);
            assertThat(neverFieldDir).exists();
        }

        @Test
        void shouldCleanupTempDirFieldWhenCleanupModeIsAlways() {
            LauncherDiscoveryRequest request = request().selectors(selectMethod(AlwaysFieldCase.class, "assignAlwaysTempDirField")).build();
            executeTests(request);
            assertThat(alwaysFieldDir).doesNotExist();
        }

        @Test
        void shouldCleanupTempDirFieldWhenCleanupModeIsOnSuccessAndTestPasses() {
            LauncherDiscoveryRequest request = request().selectors(selectMethod(OnSuccessPassingFieldCase.class, "assignOnSuccessPassingTempDirField")).build();
            executeTests(request);
            assertThat(onSuccessPassingFieldDir).doesNotExist();
        }

        @Test
        void shouldNotCleanupTempDirFieldWhenCleanupModeIsOnSuccessAndTestFails() {
            LauncherDiscoveryRequest request = request().selectors(selectMethod(OnSuccessFailingFieldCase.class, "assignOnSuccessFailingTempDirField")).build();
            executeTests(request);
            assertThat(onSuccessFailingFieldDir).exists();
        }

        @Test
        void shouldNotCleanupStaticTempDirFieldWhenCleanupModeIsOnSuccessAndTestFails() {
            LauncherDiscoveryRequest request = request().selectors(selectClass(OnSuccessFailingStaticFieldCase.class)).build();
            executeTests(request);
            assertThat(onSuccessFailingFieldDir).exists();
        }

        @Test
        void shouldNotCleanupStaticTempDirFieldWithNestedTestWhenCleanupModeIsOnSuccessAndTestFails() {
            LauncherDiscoveryRequest request = request().selectors(selectClass(OnSuccessFailingStaticFieldWithNestingCase.class)).build();
            executeTests(request);
            assertThat(onSuccessFailingFieldDir).exists();
        }

        @AfterAll
        static void afterAll() throws IOException {
            deleteIfNotNullAndExists(defaultFieldDir);
            deleteIfNotNullAndExists(neverFieldDir);
            deleteIfNotNullAndExists(alwaysFieldDir);
            deleteIfNotNullAndExists(onSuccessFailingFieldDir);
            deleteIfNotNullAndExists(onSuccessPassingFieldDir);
        }

        static void deleteIfNotNullAndExists(Path dir) throws IOException {
            if (dir != null) {
                deleteIfExists(dir);
            }
        }

        static class DefaultFieldCase {

            @TempDir
            Path defaultFieldDir;

            @Test
            void assignDefaultTempDirField() {
                TempDirFieldTests.defaultFieldDir = defaultFieldDir;
            }
        }

        static class NeverFieldCase {

            @TempDir(cleanup = NEVER)
            Path neverFieldDir;

            @Test
            void assignNeverTempDirField() {
                TempDirFieldTests.neverFieldDir = neverFieldDir;
            }
        }

        static class AlwaysFieldCase {

            @TempDir(cleanup = ALWAYS)
            Path alwaysFieldDir;

            @Test
            void assignAlwaysTempDirField() {
                TempDirFieldTests.alwaysFieldDir = alwaysFieldDir;
            }
        }

        static class OnSuccessPassingFieldCase {

            @TempDir(cleanup = ON_SUCCESS)
            Path onSuccessPassingFieldDir;

            @Test
            void assignOnSuccessPassingTempDirField() {
                TempDirFieldTests.onSuccessPassingFieldDir = onSuccessPassingFieldDir;
            }
        }

        static class OnSuccessFailingFieldCase {

            @TempDir(cleanup = ON_SUCCESS)
            Path onSuccessFailingFieldDir;

            @Test
            void assignOnSuccessFailingTempDirField() {
                TempDirFieldTests.onSuccessFailingFieldDir = onSuccessFailingFieldDir;
                fail();
            }
        }

        @TestMethodOrder(MethodOrderer.OrderAnnotation.class)
        static class OnSuccessFailingStaticFieldCase {

            @TempDir(cleanup = ON_SUCCESS)
            static Path onSuccessFailingFieldDir;

            @Test
            @Order(1)
            void assignOnSuccessFailingTempDirFieldAndFail() {
                TempDirFieldTests.onSuccessFailingFieldDir = onSuccessFailingFieldDir;
                fail();
            }

            @Test
            @Order(2)
            void doNothingPasses() {
            }
        }

        static class OnSuccessFailingStaticFieldWithNestingCase {

            @TempDir(cleanup = ON_SUCCESS)
            static Path onSuccessFailingFieldDir;

            @Nested
            class NestedTestCase {

                @Test
                void assignOnSuccessFailingTempDirFieldAndFail() {
                    TempDirFieldTests.onSuccessFailingFieldDir = onSuccessFailingFieldDir;
                    fail();
                }
            }
        }
    }

    @Nested
    class TempDirParameterTests {

        private static Path defaultParameterDir;
        private static Path neverParameterDir;
        private static Path alwaysParameterDir;
        private static Path onSuccessFailingParameterDir;
        private static Path onSuccessPassingParameterDir;

        @Test
        void shouldCleanupDefaultTempDirParameter() {
            LauncherDiscoveryRequest request = request().selectors(selectMethod(DefaultParameterCase.class, "assignDefaultTempDirParameter", "java.nio.file.Path")).build();
            executeTests(request);
            assertThat(defaultParameterDir).doesNotExist();
        }

        @Test
        void shouldNotCleanupDefaultTempDirParameterWhenCleanupModeIsNever() {
            LauncherDiscoveryRequest request = request().configurationParameter(TempDir.DEFAULT_CLEANUP_MODE_PROPERTY_NAME, "never").selectors(selectMethod(DefaultParameterCase.class, "assignDefaultTempDirParameter", "java.nio.file.Path")).build();
            executeTests(request);
            assertThat(defaultParameterDir).exists();
        }

        @Test
        void shouldNotCleanupTempDirParameterWhenCleanupModeIsNever() {
            LauncherDiscoveryRequest request = request().selectors(selectMethod(NeverParameterCase.class, "assignNeverTempDirParameter", "java.nio.file.Path")).build();
            executeTests(request);
            assertThat(neverParameterDir).exists();
        }

        @Test
        void shouldCleanupTempDirParameterWhenCleanupModeIsAlways() {
            LauncherDiscoveryRequest request = request().selectors(selectMethod(AlwaysParameterCase.class, "assignAlwaysTempDirParameter", "java.nio.file.Path")).build();
            executeTests(request);
            assertThat(alwaysParameterDir).doesNotExist();
        }

        @Test
        void shouldCleanupTempDirParameterWhenCleanupModeIsOnSuccessAndTestPasses() {
            LauncherDiscoveryRequest request = request().selectors(selectMethod(OnSuccessPassingParameterCase.class, "assignOnSuccessPassingTempDirParameter", "java.nio.file.Path")).build();
            executeTests(request);
            assertThat(onSuccessPassingParameterDir).doesNotExist();
        }

        @Test
        void shouldNotCleanupTempDirParameterWhenCleanupModeIsOnSuccessAndTestFails() {
            LauncherDiscoveryRequest request = request().selectors(selectMethod(OnSuccessFailingParameterCase.class, "assignOnSuccessFailingTempDirParameter", "java.nio.file.Path")).build();
            executeTests(request);
            assertThat(onSuccessFailingParameterDir).exists();
        }

        @AfterAll
        static void afterAll() throws IOException {
            TempDirFieldTests.deleteIfNotNullAndExists(defaultParameterDir);
            TempDirFieldTests.deleteIfNotNullAndExists(neverParameterDir);
            TempDirFieldTests.deleteIfNotNullAndExists(alwaysParameterDir);
            TempDirFieldTests.deleteIfNotNullAndExists(onSuccessFailingParameterDir);
            TempDirFieldTests.deleteIfNotNullAndExists(onSuccessPassingParameterDir);
        }

        static class DefaultParameterCase {

            @Test
            void assignDefaultTempDirParameter(@TempDir Path defaultParameterDir) {
                TempDirParameterTests.defaultParameterDir = defaultParameterDir;
            }
        }

        static class NeverParameterCase {

            @Test
            void assignNeverTempDirParameter(@TempDir(cleanup = NEVER) Path neverParameterDir) {
                TempDirParameterTests.neverParameterDir = neverParameterDir;
            }
        }

        static class AlwaysParameterCase {

            @Test
            void assignAlwaysTempDirParameter(@TempDir(cleanup = ALWAYS) Path alwaysParameterDir) {
                TempDirParameterTests.alwaysParameterDir = alwaysParameterDir;
            }
        }

        static class OnSuccessPassingParameterCase {

            @Test
            void assignOnSuccessPassingTempDirParameter(@TempDir(cleanup = ON_SUCCESS) Path onSuccessPassingParameterDir) {
                TempDirParameterTests.onSuccessPassingParameterDir = onSuccessPassingParameterDir;
            }
        }

        static class OnSuccessFailingParameterCase {

            @Test
            void assignOnSuccessFailingTempDirParameter(@TempDir(cleanup = ON_SUCCESS) Path onSuccessFailingParameterDir) {
                TempDirParameterTests.onSuccessFailingParameterDir = onSuccessFailingParameterDir;
                fail();
            }
        }
    }
}